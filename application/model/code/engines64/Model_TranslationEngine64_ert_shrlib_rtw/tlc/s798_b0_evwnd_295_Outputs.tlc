%implements s798_b0_evwnd_295_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T LSSmoothPole;
real_T LevelPole;
real_T wn;
int32_T i;
char_T c_data[77];
char_T b_data[61];
boolean_T error;
static const char_T d[61] = %<(TLC_STR_CTX(132))>;
static const char_T e[77] = %<(TLC_STR_CTX(133))>;
%closefile localVarDecl
/* {S!d1905}MATLAB Function: '<S695>/translation' */
/* {S!d1908}MATLAB Function: '<S695>/translation' incorporates:
 *  S-Function (TuneVarMEX): '<S695>/Tune Variable'
 *  S-Function (TuneVarMEX): '<S695>/Tune Variable1'
 *  S-Function (TuneVarMEX): '<S695>/Tune Variable2'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S706>:1' */
/* '<S706>:1:3' f(); */
/*  Cutoff is the inverse of time constant in Hz. So this function */
/*  basically converts reciprocal of time constant to first order iir */
/*  filter coefficient. */
/*  Reference: https://bosecorp.sharepoint.com/sites/ASD3/DSPTeam/Shared%<"\%20Documents/DSP_Topics/Comparison\%20of\%20time\%20constant\%20conversion\%20methods.docx"> */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 2/Mono Detector/Mono Detector/Tune Translations/translation': '<S701>:1' */
/* '<S701>:1:10' error = false; */
/*@>f0b7ab*/error/*@>c6bfa2*/ = /*@>f0b7ad*/false;
/* '<S701>:1:11' if LevelCutoff.Value <= LSSmoothCutoff.Value */
/*@>c6bfd8*/if (/*@>f0d4a9*/Model_TranslationEngine64_B./*@>f0d9ae*/LevelCutoff.Value/*@>c6bfc5*/ <= /*@>f0d4af*/Model_TranslationEngine64_B./*@>f0d9b1*/LSSmoothCutoff.Value) {
    /* '<S701>:1:12' TranslateError('Least square smoother should smooth more than level smoother'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>f0b31c*/    for (/*@>f0d8c2*/i = /*@>f0d8c1*/0; /*@>f0d8cc*/i < /*@>f0d8ca*/61; /*@>f0d8c8*/i/*@>f0d8d0*/++) {
        /*@>f0c594*/b_data[/*@>f0b84a*/i]/*@>f0b30f*/ = /*@>f0d0ba*/d/*@>f0d0bc*/[/*@>f0d0b9*/i];
    }
    /*@>f0cb33*/TranslateError(&/*@>f0c57d*/b_data/*@>f0c590*/[/*@>f0b7e0*/0]);
    /* '<S701>:1:13' error = true; */
    /*@>f0b7ae*/error/*@>c6bfa5*/ = /*@>f0b7b0*/true;
} else /*@>c6bfda*/if (/*@>f0d4b5*/Model_TranslationEngine64_B./*@>f0d9b4*/LSSmoothResetCutoff.Value/*@>c6bfc6*/ <= /*@>f0d4bb*/Model_TranslationEngine64_B./*@>f0d9b7*/LSSmoothCutoff.Value) {
    /* '<S701>:1:14' elseif LSSmoothResetCutoff.Value <= LSSmoothCutoff.Value */
    /* '<S701>:1:15' TranslateError('Least square smoother for reset should smooth less than that for normal mode'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>f0cc82*/memcpy(&/*@>f0c88c*/c_data[/*@>f0c87c*/0], &/*@>f0c894*/e/*@>f0c895*/[/*@>f0c889*/0], /*@>f0c88b*/77U/*@>f0c898*/ * /*@>f0c897*/sizeof(char_T));
    /*@>f0cb31*/TranslateError(&/*@>f0c5ad*/c_data/*@>f0c5c0*/[/*@>f0b7e4*/0]);
    /* '<S701>:1:16' error = true; */
    /*@>f0b7b3*/error/*@>c6bfa8*/ = /*@>f0b7b5*/true;
}
/* '<S701>:1:19' if (~error) */
/*@>c6bfdc*/if (!/*@<c6bfc7*//*@>f0b7b1*/error) {
    /* '<S701>:1:20' wn = 2 * pi * LevelCutoff.Value / FrameRate; */
    /*@>f0b7b7*/wn/*@>c6bfad*/ = /*@>f0b7b6*/6.2831853071795862/*@>f0b88e*/ * /*@>f0d4c1*/Model_TranslationEngine64_B./*@>f0d9ba*/LevelCutoff.Value/*@>c6bfc9*/ / /*@>f0d534*/Model_TranslationEngine64_ConstB./*@>f0d9de*/CapturedTuneConst_l;
    /* '<S701>:1:21' LevelPole = (1 - sin(wn)) ./ cos(wn); */
    /*@>f0b7bd*/LevelPole/*@>c6bfae*/ = (/*@>f0b7bc*/1.0/*@>c6bfca*/ - /*@>f0cb35*/sin(/*@>f0b7f1*/wn))/*@>c6bfcb*/ / /*@>f0cb37*/cos(/*@>f0b7f3*/wn);
    /* '<S701>:1:22' LevelGain = 1 - LevelPole; */
    /*@>f0d4cd*/Model_TranslationEngine64_B./*@>f0d9c0*/LevelGain/*@>c6bfb0*/ = /*@>f0b7c2*/1.0/*@>c6bfcc*/ - /*@>f0b7c0*/LevelPole;
    /* '<S701>:1:24' wn = 2 * pi * LSSmoothCutoff.Value / FrameRate; */
    /*@>f0b7c7*/wn/*@>c6bfb4*/ = /*@>f0b7c6*/6.2831853071795862/*@>f0b88a*/ * /*@>f0d4d3*/Model_TranslationEngine64_B./*@>f0d9c3*/LSSmoothCutoff.Value/*@>c6bfce*/ / /*@>f0d53a*/Model_TranslationEngine64_ConstB./*@>f0d9e1*/CapturedTuneConst_l;
    /* '<S701>:1:25' LSSmoothPole = (1 - sin(wn)) ./ cos(wn); */
    /*@>f0b7cb*/LSSmoothPole/*@>c6bfb5*/ = (/*@>f0b7ca*/1.0/*@>c6bfcf*/ - /*@>f0cb39*/sin(/*@>f0b7f5*/wn))/*@>c6bfd0*/ / /*@>f0cb3b*/cos(/*@>f0b7f7*/wn);
    /* '<S701>:1:26' LSSmoothGain = 1 - LSSmoothPole; */
    /*@>f0d4df*/Model_TranslationEngine64_B./*@>f0d9c9*/LSSmoothGain/*@>c6bfb7*/ = /*@>f0b7d2*/1.0/*@>c6bfd1*/ - /*@>f0b7d0*/LSSmoothPole;
    /* '<S701>:1:28' wn = 2 * pi * LSSmoothResetCutoff.Value / FrameRate; */
    /*@>f0b7d5*/wn/*@>c6bfbb*/ = /*@>f0b7d4*/6.2831853071795862/*@>f0b87f*/ * /*@>f0d4eb*/Model_TranslationEngine64_B./*@>f0d9cf*/LSSmoothResetCutoff.Value/*@>c6bfd3*/ / /*@>f0d540*/Model_TranslationEngine64_ConstB./*@>f0d9e4*/CapturedTuneConst_l;
    /* '<S701>:1:29' LSSmoothResetPole = (1 - sin(wn)) ./ cos(wn); */
    /*@>f0b7d8*/wn/*@>c6bfbc*/ = (/*@>f0b7d7*/1.0/*@>c6bfd4*/ - /*@>f0cb3d*/sin(/*@>f0b7f9*/wn))/*@>c6bfd5*/ / /*@>f0cb3f*/cos(/*@>f0b7fb*/wn);
    /* '<S701>:1:30' LSSmoothResetGain = 1 - LSSmoothResetPole; */
    /*@>f0d503*/Model_TranslationEngine64_B./*@>f0d9db*/LSSmoothResetGain/*@>c6bfbe*/ = /*@>f0b7dc*/1.0/*@>c6bfd6*/ - /*@>f0b7da*/wn;
} else {
    /* '<S701>:1:31' else */
    /* '<S701>:1:32' LevelPole = 0; */
    /*@>f0b7b9*/LevelPole/*@>c6bfbf*/ = /*@>f0b7bb*/0.0;
    /* '<S701>:1:33' LevelGain = 0; */
    /*@>f0d4c7*/Model_TranslationEngine64_B./*@>f0d9bd*/LevelGain/*@>c6bfc0*/ = /*@>f0b7bf*/0.0;
    /* '<S701>:1:34' LSSmoothPole = 0; */
    /*@>f0b7c3*/LSSmoothPole/*@>c6bfc1*/ = /*@>f0b7c5*/0.0;
    /* '<S701>:1:35' LSSmoothGain = 0; */
    /*@>f0d4d9*/Model_TranslationEngine64_B./*@>f0d9c6*/LSSmoothGain/*@>c6bfc2*/ = /*@>f0b7c9*/0.0;
    /* '<S701>:1:36' LSSmoothResetPole = 0; */
    /*@>f0b7cd*/wn/*@>c6bfc3*/ = /*@>f0b7cf*/0.0;
    /* '<S701>:1:37' LSSmoothResetGain = 0; */
    /*@>f0d4e5*/Model_TranslationEngine64_B./*@>f0d9cc*/LSSmoothResetGain/*@>c6bfc4*/ = /*@>f0b7d3*/0.0;
}
/*@>f0d4f1*/Model_TranslationEngine64_B./*@>f0d9d2*/LevelPole/*@>c6bf98*/ = /*@>f0b7a5*/LevelPole;
/*@>f0d4f7*/Model_TranslationEngine64_B./*@>f0d9d5*/LSSmoothPole/*@>c6bf9c*/ = /*@>f0b7a7*/LSSmoothPole;
/*@>f0d4fd*/Model_TranslationEngine64_B./*@>f0d9d8*/LSSmoothResetPole/*@>c6bfa0*/ = /*@>f0b7a9*/wn;
/* {E!d1908}End of MATLAB Function: '<S695>/translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_2783(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(295, 0, fcnProtoType)>
%endfunction
