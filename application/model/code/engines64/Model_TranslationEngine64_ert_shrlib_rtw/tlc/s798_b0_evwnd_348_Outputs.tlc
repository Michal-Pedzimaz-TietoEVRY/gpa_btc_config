%implements s798_b0_evwnd_348_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T ChannelSOS_data[12];
real_T ChannelCoeffs[8];
real_T OverallGainPerCh[2];
real_T b_y;
real_T offset;
int32_T g_data[8];
int32_T tmp_data[8];
int32_T NumStages[2];
int32_T c_data[2];
int32_T ts_data[2];
int32_T SOSIndex;
int32_T c_k;
int32_T i;
int32_T vlen;
int32_T yk;
real32_T PoolCoeffs[8];
char_T e_data[31];
static const char_T f[31] = %<(TLC_STR_CTX(148))>;
%closefile localVarDecl
/* {S!d2507}MATLAB Function: '<S1401>/Translation' */
/* {S!d2510}MATLAB Function: '<S1401>/Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S1401>/Tune Variable1'
 *  S-Function (TuneVarMEX): '<S1401>/Tune Variable2'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S1404>:1' */
/* '<S1404>:1:3' f(); */
/*  Translation from raw SOS for pool SOS */
/* MATLAB Function 'NEAR/Near1p1/VolumeMute/AnnouncementLevelDetector/PreProcessing/PreEmphasisShelfFilter/PoolIirTunableWithReset/Translation': '<S1403>:1' */
/*  Some build time sanity size checking before calling the translation */
/* '<S1403>:1:7' if numel(NumStages.Value) ~= NumChannels */
/* '<S1403>:1:11' if RawSOS.Size(2) ~= 6 */
/* '<S1403>:1:15' [PoolNumStages, PoolCoeffs] = poolIirTranslation(RawSOS, NumStages, MaxNumStages, VariantUint8); */
/*  Perform platform-based translation for poolIir block */
/*  */
/*  This functions offers the following outputs: */
/*    PoolNumStages: Number of active stages for each channel */
/*    PoolCoeffs   : SOS coefficients in a format accepted by CRL (can be */
/*                   different for different platform CRLs) */
/*                   Hexagon (qhdsp_iir_af_bose.S) and ARM format - [b0, b1, a1, b2, a2]        [NumStages x 5, 1] */
/*                   Hexagon (flt_iir_cas_bq.S) DF-II format [-a1/a0 b1/b0 -a2/a0 b2/b0] plus gain per channel. */
/*                                              where a0 is assumed to be 1.0. [TotNumStages x 4 + NumChannel, 1] */
/*                   SHARC plus processors - [k, b1, b2, a1, a2]          [NumStages x 4, 1]                   */
/*  */
/*  This function expects the following inputs: */
/*    rawSOS      : Unprocessed SOS coefficients in the order - [b0, b1, b2, a0, a1, a2] */
/*                  Dimensions - [NumStages x NumChannels, 6] */
/*    numStages   : Number of active stages for each channel */
/*                  Dimensions - [1 x NumChannels] */
/*    maxNumStages: Maximum permissible number of stages for each channel */
/*                  Dimensions - [1 x NumChannels] */
/*    variantUint8: Platform Variant - accepts only uint8 data type */
/*                  Generally, the 'variant' is a character array or a */
/*                  string. In that case, it could be changed to uint8 data */
/*                  type as follows: uint8(char(Config.Variant)) */
/*   */
/*  If rawSOS and numStages are not being supplied from a TuneVar directly, */
/*  please change it to TuneVar output type as shown below: */
/*  rawSOS = struct('Value', rawSosCoeffs); */
/* 'poolIirTranslation:29' variantStr = char(variantUint8); */
/* 'poolIirTranslation:31' switch (variantStr) */
/* 'poolIirTranslation:38' case{"Hexagon"} */
/*  Hexagon specific order for biquad coefficients  */
/* 'poolIirTranslation:40' [PoolNumStages, PoolCoeffs] = PoolIirHexagonTranslationFcn(rawSOS, numStages, maxNumStages); */
/*  Hexagon flt_iir_cas_bq.S expects biquad coefficiients in following order: */
/*    [-a1/a0 b1/b0 -a2/a0 b2/b0] where a0 is assumed to be 1. */
/*    Overall gain b0/a0 is appended at the end of PoolCoeffs per channel.  */
/*  */
/*  In Matlab, coefficients are ordered as: */
/*    [b0, b1, b2, a0, a1, a2]. */
/* 'PoolIirHexagonTranslationFcn:10' NumCoeffPerBiquad = 4; */
/* 'PoolIirHexagonTranslationFcn:11' RawSOS        = rawSOS.Value; */
/* 'PoolIirHexagonTranslationFcn:12' NumStages     = int32(numStages.Value); */
/* 'PoolIirHexagonTranslationFcn:13' NumChannels   = numel(NumStages); */
/* 'PoolIirHexagonTranslationFcn:14' MaxNumStages  = maxNumStages; */
/* 'PoolIirHexagonTranslationFcn:15' PoolNumStages = int32(zeros(NumChannels,1)); */
/*@>100f9b9*/b_y/*@>100f9bb*/ = %<SLibCG_DumpSSCode("/*@[1018f4b*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>10196b1*/Model_TranslationEngine64_B./*@>10196b0*/numStages_cf./*@>10196af*/Value/*@>10196ae*/[/*@>10196b4*/0]"], 348, 2, 0)),"/*@]*/")>;
/*@>101202a*/if (/*@>10117f1*/b_y/*@>10117ef*/ < /*@>10117f2*/2.147483648E+9) {
    /*@>1012074*/if (/*@>10117f6*/b_y/*@>10117f4*/ >= /*@>10117f7*/-2.147483648E+9) {
        /*@>1012079*/NumStages/*@>1012078*/[/*@>101207a*/0]/*@>1012077*/ = /*@>10117f8*/(int32_T)/*@>10117fa*/b_y;
    } else {
        /*@>101202f*/NumStages/*@>101202e*/[/*@>1012030*/0]/*@>101202d*/ = /*@>10117fb*/MIN_int32_T;
    }
} else {
    /*@>100f8ba*/NumStages/*@>100ee5d*/[/*@>100f8c2*/0]/*@>100ee5c*/ = /*@>10117fc*/MAX_int32_T;
}
/*@>10181c2*/Model_TranslationEngine64_B./*@>1019606*/PoolNumStages/*@>100ee6b*/[/*@>100f8c4*/0]/*@>100ee6a*/ = /*@>1019051*/0;
/*@>100f980*/offset/*@>100f982*/ = %<SLibCG_DumpSSCode("/*@[1018f62*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>10196c1*/Model_TranslationEngine64_B./*@>10196c0*/numStages_cf./*@>10196bf*/Value/*@>10196be*/[/*@>10196c4*/1]"], 348, 2, 1)),"/*@]*/")>;
/*@>1012031*/if (/*@>1011805*/offset/*@>1011803*/ < /*@>1011806*/2.147483648E+9) {
    /*@>101207b*/if (/*@>101180a*/offset/*@>1011808*/ >= /*@>101180b*/-2.147483648E+9) {
        /*@>1012080*/NumStages/*@>101207f*/[/*@>1012081*/1]/*@>101207e*/ = /*@>101180c*/(int32_T)/*@>101180e*/offset;
    } else {
        /*@>1012036*/NumStages/*@>1012035*/[/*@>1012037*/1]/*@>1012034*/ = /*@>101180f*/MIN_int32_T;
    }
} else {
    /*@>100f8c5*/NumStages/*@>100ee76*/[/*@>100f8cd*/1]/*@>100ee75*/ = /*@>1011810*/MAX_int32_T;
}
/*@>10181ce*/Model_TranslationEngine64_B./*@>101960c*/PoolNumStages/*@>100ee84*/[/*@>100f8cf*/1]/*@>100ee83*/ = /*@>1019054*/0;
/* 'PoolIirHexagonTranslationFcn:16' PoolCoeffs    = single(zeros(MaxNumStages * NumCoeffPerBiquad, 1)); */
/* 'PoolIirHexagonTranslationFcn:17' ChannelCoeffs = zeros(MaxNumStages * NumCoeffPerBiquad, 1); */
/*@>1016bb6*/memset(&/*@>10163ae*/ChannelCoeffs/*@>10163af*/[/*@>10163ab*/0], /*@>1019057*/0, /*@>10163b4*/sizeof(real_T)/*@>1018dcb*/ << /*@>1018dca*/3U);
/*@>100ab8f*/for (/*@>10191e6*/i = /*@>10191e5*/0; /*@>10191f0*/i < /*@>10191ee*/8; /*@>10191ec*/i/*@>10191f4*/++) {
    /*@>100f6a2*/PoolCoeffs/*@>100ab87*/[/*@>100f67e*/i]/*@>100ab86*/ = /*@>100f680*/0.0F;
}
/* 'PoolIirHexagonTranslationFcn:18' SOSIndex      = int32(0); */
/*@>100f661*/SOSIndex/*@>c7813a*/ = /*@>101905a*/0;
/*  Verify that the SOS does not violate the maximum number of stages */
/*  allocated for the pool */
/* 'PoolIirHexagonTranslationFcn:22' if sum(NumStages) > MaxNumStages */
/*@>10120be*/if (/*@>1011a41*/b_y/*@>1011a3f*/ < /*@>1011a42*/2.147483648E+9) {
    /*@>10120d7*/if (/*@>1011a46*/b_y/*@>1011a44*/ >= /*@>1011a47*/-2.147483648E+9) {
        /*@>10120db*/vlen/*@>10120da*/ = /*@>1011a48*/(int32_T)/*@>1011a4a*/b_y;
    } else {
        /*@>10120c2*/vlen/*@>10120c1*/ = /*@>1011a4b*/MIN_int32_T;
    }
} else {
    /*@>1012097*/vlen/*@>1012099*/ = /*@>1011a4c*/MAX_int32_T;
}
/*@>10120c3*/if (/*@>1011a50*/offset/*@>1011a4e*/ < /*@>1011a51*/2.147483648E+9) {
    /*@>10120dc*/if (/*@>1011a55*/offset/*@>1011a53*/ >= /*@>1011a56*/-2.147483648E+9) {
        /*@>10120e0*/c_k/*@>10120df*/ = /*@>1011a57*/(int32_T)/*@>1011a59*/offset;
    } else {
        /*@>10120c7*/c_k/*@>10120c6*/ = /*@>1011a5a*/MIN_int32_T;
    }
} else {
    /*@>101209f*/c_k/*@>10120a1*/ = /*@>1011a5b*/MAX_int32_T;
}
/*@>c78181*/if (/*@>1010ca0*/(real_T)/*@>101209b*/vlen/*@>c77fb6*/ + /*@>1010ca2*/(real_T)/*@>10120a3*/c_k/*@>c7811a*/ > /*@>100f65f*/2.0) {
    /* 'PoolIirHexagonTranslationFcn:23' TranslateError('Too many second order sections'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>100c1db*/    for (/*@>10191d5*/vlen = /*@>10191d4*/0; /*@>10191df*/vlen < /*@>10191dd*/31; /*@>10191db*/vlen/*@>10191f5*/++) {
        /*@>1014c55*/e_data[/*@>100f719*/vlen]/*@>100c1ce*/ = /*@>1017b74*/f/*@>1017b76*/[/*@>1017b73*/vlen];
    }
    /*@>1016868*/TranslateError(&/*@>1014c3e*/e_data/*@>1014c51*/[/*@>100f64d*/0]);
}
/* 'PoolIirHexagonTranslationFcn:26' OverallGainPerCh = ones(NumChannels, 1); */
/* 'PoolIirHexagonTranslationFcn:27' for i = 1:NumChannels */
/*@>100abbd*/for (/*@>1019094*/i = /*@>1019093*/0; /*@>101909e*/i < /*@>101909c*/2; /*@>101909a*/i/*@>10191f6*/++) {
    int32_T NumStages_0;
    NumStages_0 = /*@>1017b4e*/NumStages/*@>1017b50*/[/*@>1017b4d*/i];
    /*@>100f6a6*/OverallGainPerCh/*@>100abb5*/[/*@>100f689*/i]/*@>100abb4*/ = /*@>100f68b*/1.0;
    /* 'PoolIirHexagonTranslationFcn:29' ChannelNumStages = NumStages(i); */
    /*  Size of current SOS */
    /* 'PoolIirHexagonTranslationFcn:30' assert(ChannelNumStages <= MaxNumStages); */
    /* 'PoolIirHexagonTranslationFcn:31' if (ChannelNumStages == 0) */
    /*@>c781a3*/if (NumStages_0/*@>1014766*/ != /*@>100f65e*/0) {
        int32_T ChannelSOS_size_idx_0;
        int32_T q1;
        int32_T ts_size_idx_1;
        /* 'PoolIirHexagonTranslationFcn:35' ChannelSOS = RawSOS(SOSIndex+(1:ChannelNumStages),:); */
        %<SLibCG_DumpSSCode("/*@[1018f7b*/",(SLibCGCallSubFcn("Model_TranslationEngine64_eml_integer_colon_dispatcher_k2", ["NumStages_0", "/*@>10196d8*/tmp_data", "ts_data"], 348, 2, 2)),"/*@]*/")>;
        ChannelSOS_size_idx_0/*@>100be35*/ = ts_data/*@>1017b65*/[/*@>1017b62*/1];
        /*@>100f6f2*/yk/*@>100bebf*/ = ts_data/*@>1017b6a*/[/*@>1017b67*/1];
/*@>100beb4*/        for (/*@>10191b1*/vlen = /*@>10191b0*/0; /*@>10191bb*/vlen < /*@>10191b9*/6; /*@>10191b7*/vlen/*@>10191f7*/++) {
/*@>100be9e*/            for (/*@>10191c2*/c_k = /*@>10191c1*/0; /*@>10191cf*/c_k < /*@>10191cc*/yk; /*@>10191c8*/c_k/*@>10191f8*/++) {
                /*@>100fadb*/q1/*@>100fadd*/ = /*@>1017b6e*/tmp_data[/*@>1017b6d*/c_k];
                /*@>10120c8*/if ((/*@>101182c*/SOSIndex/*@>101182a*/ < /*@>101182d*/0)/*@>1011829*/ && (/*@>1011830*/q1/*@>101182e*/ < /*@>1011832*/MIN_int32_T/*@>1011831*/ - /*@>1011834*/SOSIndex)) {
                    /*@>10120cc*/q1/*@>10120cb*/ = /*@>1011835*/MIN_int32_T;
                } else /*@>10120e1*/if ((/*@>101183a*/SOSIndex/*@>1011838*/ > /*@>101183b*/0)/*@>1011837*/ && (/*@>101183e*/q1/*@>101183c*/ > /*@>1011840*/MAX_int32_T/*@>101183f*/ - /*@>1011842*/SOSIndex)) {
                    /*@>10120e5*/q1/*@>10120e4*/ = /*@>1011843*/MAX_int32_T;
                } else {
                    /*@>10120a7*/q1/*@>10191f9*/ += /*@>1011846*/SOSIndex;
                }
                /*@>1014c78*/ChannelSOS_data[/*@>100f6e0*/c_k + ChannelSOS_size_idx_0 * /*@>100f6e2*/vlen]/*@>100be8c*/ = /*@>10181ec*/Model_TranslationEngine64_B./*@>1019618*/sosCoefficients_ih./*@>1019600*/Value/*@>1017b8c*/[((/*@>1017b81*/vlen/*@>1017b7f*/ << /*@>1017b82*/1)/*@>1017b7e*/ + /*@>1017b84*/q1)/*@>1017b7d*/ - /*@>1017b85*/1];
            }
        }
        /* 'PoolIirHexagonTranslationFcn:36' SOSIndex = SOSIndex + ChannelNumStages; */
        /*@>1012038*/if ((/*@>1011854*/SOSIndex/*@>1011852*/ < /*@>1011855*/0)/*@>1011851*/ && (NumStages_0/*@>1011856*/ < /*@>101185a*/MIN_int32_T/*@>1011859*/ - /*@>101185c*/SOSIndex)) {
            /*@>101203c*/SOSIndex/*@>101203b*/ = /*@>101185d*/MIN_int32_T;
        } else /*@>1012082*/if ((/*@>1011862*/SOSIndex/*@>1011860*/ > /*@>1011863*/0)/*@>101185f*/ && (NumStages_0/*@>1011864*/ > /*@>1011868*/MAX_int32_T/*@>1011867*/ - /*@>101186a*/SOSIndex)) {
            /*@>1012086*/SOSIndex/*@>1012085*/ = /*@>101186b*/MAX_int32_T;
        } else {
            /*@>100f65a*/SOSIndex/*@>101920c*/ += NumStages_0;
        }
        /*  decompose SOS     */
        /* 'PoolIirHexagonTranslationFcn:39' OverallGainPerCh(i) = prod(ChannelSOS(:, 1)) / prod(ChannelSOS(:, 4)); */
        /*@>c781ab*/if (ts_data/*@>1017b7b*/[/*@>1017b78*/1]/*@>c7808b*/ == /*@>100f648*/0) {
            /*@>100f646*/offset/*@>c7808c*/ = /*@>100f645*/1.0;
        } else {
            /*@>100f643*/offset/*@>c78085*/ = /*@>1017b8f*/ChannelSOS_data/*@>1017b91*/[/*@>1017b8e*/0];
/*@>c781ae*/            for (/*@>10191a1*/yk = /*@>10191a0*/2; /*@>10191ac*/yk <= ChannelSOS_size_idx_0; /*@>10191a7*/yk/*@>101920a*/++) {
                /*@>100f63b*/offset/*@>101920b*/ *= /*@>1017b99*/ChannelSOS_data/*@>1017b9b*/[/*@>1017b98*/1];
            }
        }
        /*@>c781b3*/if (ts_data/*@>1017b96*/[/*@>1017b93*/1]/*@>c78073*/ == /*@>100f636*/0) {
            /*@>100f634*/b_y/*@>c78074*/ = /*@>100f633*/1.0;
        } else {
            /*@>100f631*/b_y/*@>c7806d*/ = /*@>1017ba8*/ChannelSOS_data[ts_data/*@>1017ba4*/[/*@>1017ba6*/1] * /*@>1017ba7*/3];
/*@>c781b6*/            for (/*@>1019191*/yk = /*@>1019190*/2; /*@>101919c*/yk <= ChannelSOS_size_idx_0; /*@>1019197*/yk/*@>1019208*/++) {
                /*@>100f629*/b_y/*@>1019209*/ *= /*@>1017bb2*/ChannelSOS_data[ChannelSOS_size_idx_0 * /*@>1017bb1*/3 + /*@>1017bad*/1];
            }
        }
        /*@>100f6a8*/OverallGainPerCh/*@>c78131*/[/*@>100f5fd*/i]/*@>c78130*/ = /*@>100f64b*/offset/*@>c78115*/ / /*@>100f639*/b_y;
        /*  [a1 b1/b0 a2 b2/b0] Hexagon assembly code  */
        /* 'PoolIirHexagonTranslationFcn:42' ts = (1:NumCoeffPerBiquad:(NumCoeffPerBiquad*ChannelNumStages)) - 1; */
        /*@>101203d*/if (NumStages_0/*@>100fa57*/ > /*@>100fa53*/536870911) {
            /*@>1012041*/vlen/*@>1012040*/ = /*@>100fa5e*/MAX_int32_T;
        } else /*@>1012087*/if (NumStages_0/*@>100fa5c*/ <= /*@>100fa58*/-536870912) {
            /*@>101208b*/vlen/*@>101208a*/ = /*@>100fa64*/MIN_int32_T;
        } else {
            /*@>100fa5f*/vlen/*@>100fa61*/ = NumStages_0/*@>100fa6e*/ << /*@>100fa6d*/2;
        }
        /*@>1012042*/if (/*@>10117bf*/vlen/*@>c7802f*/ < /*@>100f612*/1) {
            /*@>1012046*/vlen/*@>1012045*/ = /*@>101905d*/0;
        } else {
            /*@>100f8ab*/vlen/*@>100ed6f*/ = /*@>1010d25*/(int32_T)(/*@>1010d24*/(uint32_T)(/*@>10117c1*/vlen/*@>c77f9e*/ - /*@>100f5f9*/1)/*@>100fa40*/ >> /*@>100fa3f*/2)/*@>c78027*/ + /*@>100f60e*/1;
        }
        ts_size_idx_1/*@>100c2e2*/ = /*@>100f727*/vlen;
        /*@>c781c5*/if (/*@>100f625*/vlen/*@>c78056*/ > /*@>100f624*/0) {
            /*@>1014d90*/ts_data/*@>1014da8*/[/*@>100f732*/0]/*@>c7805c*/ = /*@>1019060*/1;
            /*@>100f621*/yk/*@>c7805b*/ = /*@>1019063*/1;
/*@>c781c8*/            for (/*@>1019181*/c_k = /*@>1019180*/2; /*@>101918c*/c_k <= /*@>101918a*/vlen; /*@>1019187*/c_k/*@>10191fa*/++) {
                /*@>100f615*/yk/*@>10191fb*/ += /*@>100f617*/4;
                /*@>1014e04*/ts_data/*@>1014e1c*/[/*@>100f73f*/1]/*@>c78057*/ = /*@>100f618*/yk;
            }
        }
        /*@>100f6ac*/yk/*@>100b676*/ = /*@>1011a80*/vlen/*@>100d816*/ - /*@>100f88d*/1;
/*@>100c4dd*/        for (/*@>1019171*/vlen = /*@>1019170*/0; /*@>101917c*/vlen <= /*@>101917a*/yk; /*@>1019177*/vlen/*@>10191fc*/++) {
            /*@>100fb2a*/c_k/*@>100fb2c*/ = /*@>1017bb8*/ts_data[vlen];
            /*@>1012047*/if (/*@>10118a3*/c_k/*@>10118a1*/ < /*@>10118a4*/-2147483647) {
                /*@>1014e69*/ts_data[vlen]/*@>101204a*/ = /*@>10118a5*/MIN_int32_T;
            } else {
                /*@>1014e4b*/ts_data[vlen]/*@>100c4ce*/ = /*@>10118a8*/c_k/*@>10118a6*/ - /*@>10118a9*/1;
            }
        }
        /* 'PoolIirHexagonTranslationFcn:43' ChannelCoeffs(ts + 1) = -ChannelSOS(:, 5) ./ ChannelSOS(:, 4); */
        c_k = (ts_size_idx_1 / 4) << 2;
        q1 = c_k - 4;
        for (vlen = /*@>1019160*/0; vlen <= q1; vlen += 4) {
            __m128i tmp;
            tmp = _mm_loadu_si128((const __m128i *)&/*@>1014eb3*/ts_data[vlen]);
            _mm_storeu_si128(/*@>10142f8*/(__m128i *)&/*@>1014ed0*/c_data[vlen], _mm_add_epi32(tmp, _mm_set1_epi32(/*@>1019066*/1)));
        }
/*@>100c698*/        for (/*@>101914e*/vlen = c_k; /*@>101915b*/vlen < ts_size_idx_1; /*@>1019154*/vlen/*@>10191fe*/++) {
            /*@>1014ef5*/c_data[vlen]/*@>100c680*/ = /*@>1017bbe*/ts_data[vlen]/*@>100c66b*/ + /*@>100f6af*/1;
        }
/*@>100c821*/        for (/*@>101913a*/vlen = /*@>1019139*/0; /*@>1019147*/vlen < ts_size_idx_1; /*@>1019140*/vlen/*@>10191ff*/++) {
            /*@>100f77f*/ChannelCoeffs/*@>100c802*/[/*@>1017bc4*/c_data[/*@>1017bc3*/vlen]/*@>100c807*/ - /*@>100f786*/1]/*@>100c80f*/ = -/*@<100fb72*//*@>1017bcf*/ChannelSOS_data[(ChannelSOS_size_idx_0/*@>1018dd1*/ << 2) + /*@>1017bca*/vlen]/*@>100c7b8*/ / /*@>1017bda*/ChannelSOS_data[ChannelSOS_size_idx_0 * /*@>1017bd9*/3 + /*@>1017bd5*/vlen];
        }
        /*  -a1/a0 */
        /* 'PoolIirHexagonTranslationFcn:44' ChannelCoeffs(ts + 2) =  ChannelSOS(:, 2) ./ ChannelSOS(:, 1); */
/*@>100c9da*/        for (/*@>1019127*/vlen = /*@>1019126*/0; /*@>1019134*/vlen < ts_size_idx_1; /*@>101912d*/vlen/*@>1019200*/++) {
            /*@>100fb76*/c_k/*@>100fb78*/ = /*@>1017be0*/ts_data[vlen];
            /*@>1012050*/if (/*@>10118b4*/c_k/*@>10118b2*/ > /*@>10118b5*/2147483645) {
                /*@>101502d*/c_data[vlen]/*@>1012053*/ = /*@>10118b6*/MAX_int32_T;
            } else {
                /*@>101500f*/c_data[vlen]/*@>100c9c2*/ = /*@>10118b9*/c_k/*@>10118b7*/ + /*@>10118ba*/2;
            }
        }
/*@>100cb62*/        for (/*@>1019114*/vlen = /*@>1019113*/0; /*@>1019121*/vlen < ts_size_idx_1; /*@>101911a*/vlen/*@>1019201*/++) {
            /*@>100f7bd*/ChannelCoeffs/*@>100cb43*/[/*@>1017be6*/c_data[/*@>1017be5*/vlen]/*@>100cb48*/ - /*@>100f7c4*/1]/*@>100cb50*/ = /*@>1017bef*/ChannelSOS_data[/*@>1017bec*/vlen + ChannelSOS_size_idx_0]/*@>100cafa*/ / /*@>1017bf5*/ChannelSOS_data[/*@>1017bf4*/vlen];
        }
        /*   b1/b0 */
        /* 'PoolIirHexagonTranslationFcn:45' ChannelCoeffs(ts + 3) = -ChannelSOS(:, 6) ./ ChannelSOS(:, 4); */
/*@>100cd1b*/        for (/*@>1019101*/vlen = /*@>1019100*/0; /*@>101910e*/vlen < ts_size_idx_1; /*@>1019107*/vlen/*@>1019202*/++) {
            /*@>100fbc1*/c_k/*@>100fbc3*/ = /*@>1017bfb*/ts_data[vlen];
            /*@>1012059*/if (/*@>10118c4*/c_k/*@>10118c2*/ > /*@>10118c5*/2147483644) {
                /*@>1015142*/c_data[vlen]/*@>101205c*/ = /*@>10118c6*/MAX_int32_T;
            } else {
                /*@>1015124*/c_data[vlen]/*@>100cd03*/ = /*@>10118c9*/c_k/*@>10118c7*/ + /*@>10118ca*/3;
            }
        }
/*@>100cea4*/        for (/*@>10190ee*/vlen = /*@>10190ed*/0; /*@>10190fb*/vlen < ts_size_idx_1; /*@>10190f4*/vlen/*@>1019203*/++) {
            /*@>100f7fb*/ChannelCoeffs/*@>100ce85*/[/*@>1017c01*/c_data[/*@>1017c00*/vlen]/*@>100ce8a*/ - /*@>100f802*/1]/*@>100ce92*/ = -/*@<100fc09*//*@>1017c0c*/ChannelSOS_data[ChannelSOS_size_idx_0 * /*@>1017c0b*/5 + /*@>1017c07*/vlen]/*@>100ce3b*/ / /*@>1017c17*/ChannelSOS_data[ChannelSOS_size_idx_0 * /*@>1017c16*/3 + /*@>1017c12*/vlen];
        }
        /*  -a2/a0 */
        /* 'PoolIirHexagonTranslationFcn:46' ChannelCoeffs(ts + 4) =  ChannelSOS(:, 3) ./ ChannelSOS(:, 1); */
        /*@>100f6b4*/yk/*@>100b936*/ = ts_size_idx_1/*@>100d82b*/ - /*@>100f894*/1;
/*@>100cff5*/        for (/*@>10190de*/vlen = /*@>10190dd*/0; /*@>10190e9*/vlen <= /*@>10190e7*/yk; /*@>10190e4*/vlen/*@>1019204*/++) {
            /*@>100fc0d*/c_k/*@>100fc0f*/ = /*@>1017c1d*/ts_data[vlen];
            /*@>1012062*/if (/*@>10118e8*/c_k/*@>10118e6*/ > /*@>10118e9*/2147483643) {
                /*@>1015249*/ts_data[vlen]/*@>1012065*/ = /*@>10118ea*/MAX_int32_T;
            } else {
                /*@>101522b*/ts_data[vlen]/*@>100cfe6*/ = /*@>10118ed*/c_k/*@>10118eb*/ + /*@>10118ee*/4;
            }
        }
/*@>100d17b*/        for (/*@>10190cb*/vlen = /*@>10190ca*/0; /*@>10190d8*/vlen < ts_size_idx_1; /*@>10190d1*/vlen/*@>1019205*/++) {
            /*@>100f835*/ChannelCoeffs/*@>100d15c*/[/*@>1017c23*/ts_data[/*@>1017c22*/vlen]/*@>100d161*/ - /*@>100f83c*/1]/*@>100d169*/ = /*@>1017c2e*/ChannelSOS_data[(ChannelSOS_size_idx_0/*@>1018dd4*/ << 1) + /*@>1017c29*/vlen]/*@>100d113*/ / /*@>1017c34*/ChannelSOS_data[/*@>1017c33*/vlen];
        }
        /*   b2/b0 */
        /*  length of Current Channel Coeffs */
        /* 'PoolIirHexagonTranslationFcn:49' ChannelCoeffsLength = NumCoeffPerBiquad*ChannelNumStages; */
        /*  Offset into coefficient array for the current channel */
        /* 'PoolIirHexagonTranslationFcn:52' offset = NumCoeffPerBiquad*sum(PoolNumStages(1:i-1)); */
        /*@>10120cd*/if (/*@>10118fc*/i/*@>10118fa*/ < /*@>10118fd*/1) {
            /*@>10120d1*/vlen/*@>10120d0*/ = /*@>1019069*/0;
        } else {
            /*@>10120af*/vlen/*@>10120b1*/ = /*@>10181f2*/Model_TranslationEngine64_B./*@>101961b*/PoolNumStages/*@>1017c3b*/[/*@>1017c38*/0];
        }
        /*@>100f657*/offset/*@>c78122*/ = /*@>100f659*/4.0/*@>100f9ee*/ * /*@>1010ded*/(real_T)/*@>10120b3*/vlen;
        /* 'PoolIirHexagonTranslationFcn:53' PoolNumStages(i) = int32(ChannelNumStages); */
        /*@>10181f8*/Model_TranslationEngine64_B./*@>101961e*/PoolNumStages/*@>100d20b*/[/*@>100f84d*/i]/*@>c78121*/ = NumStages_0;
        /*  Store the coefficients */
        /* 'PoolIirHexagonTranslationFcn:56' PoolCoeffs(offset+(1:ChannelCoeffsLength)) = single(ChannelCoeffs(1:ChannelCoeffsLength)); */
        /*@>10120d2*/if (NumStages_0/*@>1011a9e*/ > /*@>1011aa1*/536870911) {
            /*@>10120d6*/vlen/*@>10120d5*/ = /*@>1011aa2*/MAX_int32_T;
        } else /*@>10120e6*/if (NumStages_0/*@>1011aa4*/ <= /*@>1011aa7*/-536870912) {
            /*@>10120ea*/vlen/*@>10120e9*/ = /*@>1011aa8*/MIN_int32_T;
        } else {
            /*@>10120b7*/vlen/*@>10120b9*/ = NumStages_0/*@>1011aa9*/ << /*@>1011aac*/2;
        }
        %<SLibCG_DumpSSCode("/*@[1018f94*/",(SLibCGCallSubFcn("Model_TranslationEngine64_eml_integer_colon_dispatcher_k2", ["/*@>10196ec*/vlen", "/*@>10196f6*/tmp_data", "ts_data"], 348, 2, 3)),"/*@]*/")>;
        c_k/*@>100ba4f*/ = ts_data/*@>1017c40*/[/*@>1017c3d*/1];
        /*@>100f86c*/yk/*@>100d3fa*/ = ts_data/*@>1017c45*/[/*@>1017c42*/1];
/*@>100d3e5*/        for (/*@>10190b8*/vlen = /*@>10190b7*/0; /*@>10190c5*/vlen < /*@>10190c2*/yk; /*@>10190be*/vlen/*@>1019206*/++) {
            /*@>100fc5a*/b_y/*@>100fc5c*/ = /*@>100f6b7*/offset/*@>100d396*/ + /*@>1010e05*/(real_T)/*@>1017c49*/tmp_data[vlen];
            /*@>101206b*/if (/*@>1011916*/b_y/*@>1011914*/ < /*@>1011917*/2.147483648E+9) {
                /*@>101208c*/if (/*@>101191b*/b_y/*@>1011919*/ >= /*@>101191c*/-2.147483648E+9) {
                    /*@>10153c8*/g_data[vlen]/*@>101208f*/ = /*@>101191d*/(int32_T)/*@>101191f*/b_y;
                } else {
                    /*@>10153ab*/g_data[vlen]/*@>101206e*/ = /*@>1011920*/MIN_int32_T;
                }
            } else {
                /*@>1015367*/g_data[vlen]/*@>100d3cd*/ = /*@>1011921*/MAX_int32_T;
            }
        }
/*@>100d581*/        for (/*@>10190a5*/vlen = /*@>10190a4*/0; /*@>10190b2*/vlen < c_k; /*@>10190ab*/vlen/*@>1019207*/++) {
            /*@>100f874*/PoolCoeffs/*@>100d55c*/[/*@>1017c4f*/g_data[/*@>1017c4e*/vlen]/*@>100d561*/ - /*@>100f87b*/1]/*@>100d569*/ = /*@>100d535*/(real32_T)/*@>1017c55*/ChannelCoeffs/*@>1017c57*/[/*@>1017c54*/vlen];
        }
    }
}
/* 'PoolIirHexagonTranslationFcn:59' PoolCoeffs = [PoolCoeffs; OverallGainPerCh]; */
/*@>100abd9*/for (/*@>1019083*/i = /*@>1019082*/0; /*@>101908d*/i < /*@>101908b*/8; /*@>1019089*/i/*@>101920d*/++) {
    /*@>10181e0*/Model_TranslationEngine64_B./*@>1019612*/PoolCoeffs/*@>100bd5d*/[/*@>100f6c8*/i]/*@>100abcb*/ = /*@>1017b59*/PoolCoeffs/*@>1017b5b*/[/*@>1017b58*/i];
}
/*@>10181da*/Model_TranslationEngine64_B./*@>101960f*/PoolCoeffs/*@>100ee36*/[/*@>100f8d3*/8]/*@>100ee35*/ = /*@>100ee3c*/(real32_T)/*@>1017b53*/OverallGainPerCh/*@>1017b55*/[/*@>1017b52*/0];
/*@>10181e6*/Model_TranslationEngine64_B./*@>1019615*/PoolCoeffs/*@>100ee47*/[/*@>100f8d4*/9]/*@>100ee46*/ = /*@>100ee4d*/(real32_T)/*@>1017b5e*/OverallGainPerCh/*@>1017b60*/[/*@>1017b5d*/1];
/* {E!d2510}End of MATLAB Function: '<S1401>/Translation' */
/*  VariantStr = char(VariantUint8); */
/*  switch (VariantStr) */
/*      case {"Generic","SharcPlusCore"} */
/*          %<"\% These variants order biquad coefficients in a compacted form"> */
/*          [PoolNumStages, PoolCoeffs] = pooliirTranslationFcn(RawSOS, NumStages, MaxNumStages); */
/*      case {"SharcPlusAccelGul","SharcPlusAccelGxp"} */
/*          %<"\% These variants order biquad coefficients for the ADI accelerator"> */
/*          [PoolNumStages, PoolCoeffs] = pooliirAccelTranslationFcn(RawSOS, NumStages, MaxNumStages); */
/*      case{"Hexagon"} */
/*          %<"\% Hexagon specific order for biquad coefficients "> */
/*          [PoolNumStages, PoolCoeffs] = PoolIirHexagonTranslationFcn(RawSOS, NumStages, MaxNumStages); */
/*      case{"ArmNeonV7V8"} */
/*          [PoolNumStages, PoolCoeffs] = PoolIirArmNeonV7V8TranslationFcn(RawSOS, NumStages, MaxNumStages); */
/*      otherwise */
/*          %<"\% This is a build-time error, not a translation error. The"> */
/*          %<"\% selected build-time variant is not supported for translation"> */
/*          error('Invalid implementation type: [%<"\%s]\', VariantStr);"> */
/*  end */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_1475_36(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(348, 2, fcnProtoType)>
%endfunction
