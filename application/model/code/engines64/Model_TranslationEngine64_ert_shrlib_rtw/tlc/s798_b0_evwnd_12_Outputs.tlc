%implements s798_b0_evwnd_12_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T wn;
%closefile localVarDecl
/*  Cutoff is the inverse of time constant in Hz. So this function */
/*  basically converts reciprocal of time constant to first order iir */
/*  filter coefficient. */
/*  Reference: https://bosecorp.sharepoint.com/sites/ASD3/DSPTeam/Shared%<"\%20Documents/DSP_Topics/Comparison\%20of\%20time\%20constant\%20conversion\%20methods.docx"> */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 2/Decimated-Rate FDP/Fdp/FreqDomainProcessing/Reverb Extractions/Trivial Translation4': '<S658>:1' */
/* '<S658>:1:7' wn = 2 * pi * LsSmoothCutoff.Value / FrameRate; */
/*@>cbf303*/wn/*@>c6bafe*/ = /*@>cbf30c*/6.2831853071795862/*@>cbf317*/ * rtu_LsSmoothCutoff->Value/*@>c6bb01*/ / /*@>cbf312*/rtu_FrameRate;
/* '<S658>:1:8' LsSmoothFactor = (1 - sin(wn)) ./ cos(wn); */
/*@>cbf5f0*/localB->/*@>cbf6bc*/LsSmoothFactor/*@>c6baff*/ = (/*@>cbf305*/1.0/*@>c6bb02*/ - /*@>cbf570*/sin(/*@>cbf308*/wn))/*@>c6bb03*/ / /*@>cbf572*/cos(/*@>cbf30a*/wn);
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[12].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(12, 0, 0)>
%endif
%if SLibCG_ArgAccessed(12, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(12, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_TranslationEngine64_TrivialTranslation4(\
%assign comma = ""
%if SLibCG_ArgAccessed(12, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_TranslationEngine64_TrivialTranslation4", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const bus_double_1_1 *rtu_LsSmoothCutoff\
%assign comma = ", "
%<comma>real_T rtu_FrameRate\
%assign comma = ", "
%<comma>B_TrivialTranslation4_Model_TranslationEngine64_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(12, 0, fcnProtoType)>
%endfunction
