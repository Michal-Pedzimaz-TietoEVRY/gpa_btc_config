%implements s798_b0_evwnd_54_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T nz[3];
int32_T i;
int32_T k;
char_T c_data[94];
char_T d_data[76];
boolean_T x[30];
static const char_T e[94] = %<(TLC_STR_CTX(48))>;
static const char_T f[76] = %<(TLC_STR_CTX(49))>;
%closefile localVarDecl
/* {S!d77}MATLAB Function: '<S805>/Trivial Translation' */
/* {S!d80}MATLAB Function: '<S805>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S805>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S819>:1' */
/* '<S819>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/SLC Tuning/Detent Level Left/Trivial Translation': '<S818>:1' */
/* '<S818>:1:3' numLRIn = MedusaFRMConfig.LR_in; */
/* '<S818>:1:4' NumCAEWeights = MedusaFRMConfig.NumTailComp.LR; */
/* '<S818>:1:6' NumRows = MedusaFRMConfig.LR_out; */
/* '<S818>:1:7' NumColumns = numLRIn + NumCAEWeights; */
/* '<S818>:1:8' if(~ MedusaFRMConfig.includeCAE) */
/* '<S818>:1:9' NumColumns = numLRIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S818>:1:13' if(detentGain_Left.Size(1) ~= NumRows || detentGain_Left.Size(2) ~= NumColumns) */
/*@>c6677d*/if ((/*@>d3fff6*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d40399*/DetentLevel_Left_n./*@>d40390*/Size/*@>d3fe7c*/[/*@>d3fe75*/0]/*@>c66776*/ != /*@>d3e3d6*/10.0)/*@>d4023d*/ || (/*@>d3fffc*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4039c*/DetentLevel_Left_n./*@>d40393*/Size/*@>d3fe85*/[/*@>d3fe7e*/1]/*@>c66778*/ != /*@>d3e3d7*/3.0)) {
    /* '<S818>:1:14' TranslateError('The parameter ''medusa_frm_left_detent'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d3fb6c*/memcpy(&/*@>d3f7e0*/c_data[/*@>d3f7d0*/0], &/*@>d3f7e8*/e/*@>d3f7e9*/[/*@>d3f7dd*/0], /*@>d3f7df*/94U/*@>d3f7ec*/ * /*@>d3f7eb*/sizeof(char_T));
    /*@>d3fa4b*/TranslateError(&/*@>d3f4b1*/c_data/*@>d3f4c4*/[/*@>d3e3de*/0], /*@>d3e3df*/10.0, /*@>d3e3e0*/3.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S818>:1:18' checkValues = (detentGain_Left.Value < 0); */
/*@>d3d95c*/for (/*@>d402cc*/i = /*@>d402cb*/0; /*@>d402d6*/i < /*@>d402d4*/30; /*@>d402d2*/i/*@>d402da*/++) {
    /*@>d3e42b*/x/*@>d3d94e*/[/*@>d3e429*/i]/*@>d3d94f*/ = (/*@>d40002*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4039f*/DetentLevel_Left_n./*@>d40396*/Value/*@>d3fe8f*/[/*@>d3fe88*/i]/*@>d3d93e*/ < /*@>d3e417*/0.0);
}
/* '<S818>:1:19' if(sum(sum(checkValues))) */
/*@>c667f2*/for (/*@>d402aa*/i = /*@>d402a9*/0; /*@>d402b4*/i < /*@>d402b2*/3; /*@>d402b0*/i/*@>d402db*/++) {
    int32_T xpageoffset;
    /*@>d3e3ed*/xpageoffset/*@>c667e7*/ = /*@>d3e3f8*/i/*@>d3e4cb*/ * /*@>d3e3ec*/10;
    /*@>d3e436*/nz/*@>d3e0df*/[/*@>d3e438*/i]/*@>c667eb*/ = /*@>d3fea2*/x/*@>d3fea4*/[/*@>d3fea1*/xpageoffset];
/*@>c667f6*/    for (/*@>d402bb*/k = /*@>d402ba*/0; /*@>d402c5*/k < /*@>d402c3*/9; /*@>d402c1*/k/*@>d402dc*/++) {
        /*@>d3ee74*/nz/*@>d3ee73*/[/*@>d3ee76*/i] += /*@>d3fead*/x/*@>d3feaf*/[(/*@>d3fea9*/xpageoffset/*@>d3fea7*/ + /*@>d3feab*/k)/*@>d3fea6*/ + /*@>d3feac*/1];
    }
}
/*@>c66783*/if ((/*@>d3e982*/(real_T)/*@>d3fe92*/nz/*@>d3fe94*/[/*@>d3fe91*/0]/*@>d3e981*/ + /*@>d3e987*/(real_T)/*@>d3fe97*/nz/*@>d3fe99*/[/*@>d3fe96*/1])/*@>d3e911*/ + /*@>d3e914*/(real_T)/*@>d3fe9c*/nz/*@>d3fe9e*/[/*@>d3fe9b*/2]/*@>c6677b*/ != /*@>d3e3da*/0.0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S818>:1:20' TranslateError('The weights in ''medusa_frm_left_detent'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d3fb6e*/memcpy(&/*@>d3f77f*/d_data[/*@>d3f76f*/0], &/*@>d3f787*/f/*@>d3f788*/[/*@>d3f77c*/0], /*@>d3f77e*/76U/*@>d3f78b*/ * /*@>d3f78a*/sizeof(char_T));
    /*@>d3fa4f*/TranslateError(&/*@>d3f50f*/d_data/*@>d3f522*/[/*@>d3e3e4*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S818>:1:24' TOP = detentGain_Left.Value(:, 1:numLRIn); */
/*@>d3fb70*/memcpy(&/*@>d4000e*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d403a2*/TOP_f/*@>d3f720*/[/*@>d3f70f*/0], &/*@>d40014*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d403a5*/DetentLevel_Left_n./*@>d4038d*/Value[0], /*@>d3f71e*/30U/*@>d3f731*/ * /*@>d3f730*/sizeof(real_T));
/* '<S818>:1:25' if(~ MedusaFRMConfig.includeCAE) */
/* '<S818>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d3fb7b*/memset(&/*@>d40020*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d403a8*/TOP_CAE_ax/*@>d3f88a*/[/*@>d3f886*/0], /*@>d402a2*/0, /*@>d3f888*/10U/*@>d3f890*/ * /*@>d3f88f*/sizeof(real_T));
/* {E!d80}End of MATLAB Function: '<S805>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_3380(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(54, 0, fcnProtoType)>
%endfunction
