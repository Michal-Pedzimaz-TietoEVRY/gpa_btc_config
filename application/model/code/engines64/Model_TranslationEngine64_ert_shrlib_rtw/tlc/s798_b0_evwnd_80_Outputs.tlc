%implements s798_b0_evwnd_80_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T b;
int32_T nz[7];
int32_T i;
int32_T k;
char_T c_data[95];
char_T d_data[77];
boolean_T x[77];
static const char_T e[95] = %<(TLC_STR_CTX(87))>;
static const char_T f[77] = %<(TLC_STR_CTX(88))>;
%closefile localVarDecl
/* {S!d181}MATLAB Function: '<S889>/Trivial Translation' */
/* {S!d184}MATLAB Function: '<S889>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S889>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S919>:1' */
/* '<S919>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/SLC Tuning/Min Level Right/Trivial Translation': '<S918>:1' */
/* '<S918>:1:3' numLRIn = MedusaPremixConfig.LR_in; */
/* '<S918>:1:4' NumCAEWeights = MedusaPremixConfig.NumTailComp.LR; */
/* '<S918>:1:6' NumRows = MedusaPremixConfig.LR_out; */
/* '<S918>:1:7' NumColumns = numLRIn + NumCAEWeights; */
/* '<S918>:1:8' if(~ MedusaPremixConfig.includeCAE) */
/* '<S918>:1:9' NumColumns = numLRIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S918>:1:13' if(minGain_Right.Size(1) ~= NumRows || minGain_Right.Size(2) ~= NumColumns) */
/*@>c68234*/if ((/*@>d85e6b*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d8625e*/MinLevel_Right./*@>d86255*/Size/*@>d85ceb*/[/*@>d85ce4*/0]/*@>c6822e*/ != /*@>d8431b*/11.0)/*@>d860db*/ || (/*@>d85e71*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d86261*/MinLevel_Right./*@>d86258*/Size/*@>d85cf4*/[/*@>d85ced*/1]/*@>c68230*/ != /*@>d8431c*/7.0)) {
    /* '<S918>:1:14' TranslateError('The parameter ''medusa_premix_right_min'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d859bb*/memcpy(&/*@>d85628*/c_data[/*@>d85618*/0], &/*@>d85630*/e/*@>d85631*/[/*@>d85625*/0], /*@>d85627*/95U/*@>d85634*/ * /*@>d85633*/sizeof(char_T));
    /*@>d858a5*/TranslateError(&/*@>d852fb*/c_data/*@>d8530e*/[/*@>d84323*/0], /*@>d84324*/11.0, /*@>d84325*/7.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S918>:1:18' checkValues = (minGain_Right.Value < 0); */
/*@>d8386c*/for (/*@>d8617f*/i = /*@>d8617e*/0; /*@>d86189*/i < /*@>d86187*/77; /*@>d86185*/i/*@>d8618d*/++) {
    /*@>d84379*/x/*@>d8385e*/[/*@>d84377*/i]/*@>d8385f*/ = (/*@>d85e77*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d86264*/MinLevel_Right./*@>d8625b*/Value/*@>d85cfe*/[/*@>d85cf7*/i]/*@>d8384e*/ < /*@>d84365*/0.0);
}
/* '<S918>:1:19' if(sum(sum(checkValues))) */
/*@>c682a9*/for (/*@>d8615d*/i = /*@>d8615c*/0; /*@>d86167*/i < /*@>d86165*/7; /*@>d86163*/i/*@>d8618e*/++) {
    int32_T xpageoffset;
    /*@>d84332*/xpageoffset/*@>c6829e*/ = /*@>d84346*/i/*@>d84406*/ * /*@>d84331*/11;
    /*@>d84384*/nz/*@>d84057*/[/*@>d84386*/i]/*@>c682a2*/ = /*@>d85d07*/x/*@>d85d09*/[/*@>d85d06*/xpageoffset];
/*@>c682ad*/    for (/*@>d8616e*/k = /*@>d8616d*/0; /*@>d86178*/k < /*@>d86176*/10; /*@>d86174*/k/*@>d8618f*/++) {
        /*@>d84cab*/nz/*@>d84caa*/[/*@>d84cad*/i] += /*@>d85d1a*/x/*@>d85d1c*/[(/*@>d85d16*/xpageoffset/*@>d85d14*/ + /*@>d85d18*/k)/*@>d85d13*/ + /*@>d85d19*/1];
    }
}
/*@>d84339*/b/*@>c682c2*/ = /*@>d85d01*/nz/*@>d85d03*/[/*@>d85d00*/0];
/*@>c682cb*/for (/*@>d8614c*/i = /*@>d8614b*/0; /*@>d86156*/i < /*@>d86154*/6; /*@>d86152*/i/*@>d86191*/++) {
    /*@>d84342*/b/*@>d86192*/ += /*@>d8467a*/(real_T)/*@>d85d0f*/nz/*@>d85d11*/[/*@>d85d0d*/i/*@>d85d0b*/ + /*@>d85d0e*/1];
}
/*@>c6823a*/if (/*@>d8431d*/b/*@>c68233*/ != /*@>d8431f*/0.0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S918>:1:20' TranslateError('The weights in ''medusa_premix_right_min'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d859bd*/memcpy(&/*@>d855c5*/d_data[/*@>d855b5*/0], &/*@>d855cd*/f/*@>d855ce*/[/*@>d855c2*/0], /*@>d855c4*/77U/*@>d855d1*/ * /*@>d855d0*/sizeof(char_T));
    /*@>d858a9*/TranslateError(&/*@>d85359*/d_data/*@>d8536c*/[/*@>d84329*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S918>:1:24' TOP = minGain_Right.Value(:, 1:numLRIn); */
/*@>d859bf*/memcpy(&/*@>d85e83*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d86267*/TOP/*@>d85566*/[/*@>d85555*/0], &/*@>d85e89*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d8626a*/MinLevel_Right./*@>d86252*/Value[0], /*@>d85564*/77U/*@>d85577*/ * /*@>d85576*/sizeof(real_T));
/* '<S918>:1:25' if(~ MedusaPremixConfig.includeCAE) */
/* '<S918>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d859ca*/memset(&/*@>d85e95*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d8626d*/TOP_CAE/*@>d856d8*/[/*@>d856d4*/0], /*@>d86144*/0, /*@>d856d6*/33U/*@>d856de*/ * /*@>d856dd*/sizeof(real_T));
/* {E!d184}End of MATLAB Function: '<S889>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_4161(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(80, 0, fcnProtoType)>
%endfunction
