%implements s798_b0_evwnd_79_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T b;
int32_T nz[7];
int32_T i;
int32_T k;
char_T c_data[94];
char_T d_data[76];
boolean_T x[77];
static const char_T e[94] = %<(TLC_STR_CTX(85))>;
static const char_T f[76] = %<(TLC_STR_CTX(86))>;
%closefile localVarDecl
/* {S!d177}MATLAB Function: '<S888>/Trivial Translation' */
/* {S!d180}MATLAB Function: '<S888>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S888>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S916>:1' */
/* '<S916>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/SLC Tuning/Min Level Left/Trivial Translation': '<S915>:1' */
/* '<S915>:1:3' numLRIn = MedusaPremixConfig.LR_in; */
/* '<S915>:1:4' NumCAEWeights = MedusaPremixConfig.NumTailComp.LR; */
/* '<S915>:1:6' NumRows = MedusaPremixConfig.LR_out; */
/* '<S915>:1:7' NumColumns = numLRIn + NumCAEWeights; */
/* '<S915>:1:8' if(~ MedusaPremixConfig.includeCAE) */
/* '<S915>:1:9' NumColumns = numLRIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S915>:1:13' if(minGain_Left.Size(1) ~= NumRows || minGain_Left.Size(2) ~= NumColumns) */
/*@>c680f1*/if ((/*@>d828eb*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d82cde*/MinLevel_Left./*@>d82cd5*/Size/*@>d8276b*/[/*@>d82764*/0]/*@>c680eb*/ != /*@>d80d9b*/11.0)/*@>d82b5b*/ || (/*@>d828f1*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d82ce1*/MinLevel_Left./*@>d82cd8*/Size/*@>d82774*/[/*@>d8276d*/1]/*@>c680ed*/ != /*@>d80d9c*/7.0)) {
    /* '<S915>:1:14' TranslateError('The parameter ''medusa_premix_left_min'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d8243b*/memcpy(&/*@>d820a8*/c_data[/*@>d82098*/0], &/*@>d820b0*/e/*@>d820b1*/[/*@>d820a5*/0], /*@>d820a7*/94U/*@>d820b4*/ * /*@>d820b3*/sizeof(char_T));
    /*@>d82325*/TranslateError(&/*@>d81d7b*/c_data/*@>d81d8e*/[/*@>d80da3*/0], /*@>d80da4*/11.0, /*@>d80da5*/7.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S915>:1:18' checkValues = (minGain_Left.Value < 0); */
/*@>d802ec*/for (/*@>d82bff*/i = /*@>d82bfe*/0; /*@>d82c09*/i < /*@>d82c07*/77; /*@>d82c05*/i/*@>d82c0d*/++) {
    /*@>d80df9*/x/*@>d802de*/[/*@>d80df7*/i]/*@>d802df*/ = (/*@>d828f7*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d82ce4*/MinLevel_Left./*@>d82cdb*/Value/*@>d8277e*/[/*@>d82777*/i]/*@>d802ce*/ < /*@>d80de5*/0.0);
}
/* '<S915>:1:19' if(sum(sum(checkValues))) */
/*@>c68166*/for (/*@>d82bdd*/i = /*@>d82bdc*/0; /*@>d82be7*/i < /*@>d82be5*/7; /*@>d82be3*/i/*@>d82c0e*/++) {
    int32_T xpageoffset;
    /*@>d80db2*/xpageoffset/*@>c6815b*/ = /*@>d80dc6*/i/*@>d80e86*/ * /*@>d80db1*/11;
    /*@>d80e04*/nz/*@>d80ad7*/[/*@>d80e06*/i]/*@>c6815f*/ = /*@>d82787*/x/*@>d82789*/[/*@>d82786*/xpageoffset];
/*@>c6816a*/    for (/*@>d82bee*/k = /*@>d82bed*/0; /*@>d82bf8*/k < /*@>d82bf6*/10; /*@>d82bf4*/k/*@>d82c0f*/++) {
        /*@>d8172b*/nz/*@>d8172a*/[/*@>d8172d*/i] += /*@>d8279a*/x/*@>d8279c*/[(/*@>d82796*/xpageoffset/*@>d82794*/ + /*@>d82798*/k)/*@>d82793*/ + /*@>d82799*/1];
    }
}
/*@>d80db9*/b/*@>c6817f*/ = /*@>d82781*/nz/*@>d82783*/[/*@>d82780*/0];
/*@>c68188*/for (/*@>d82bcc*/i = /*@>d82bcb*/0; /*@>d82bd6*/i < /*@>d82bd4*/6; /*@>d82bd2*/i/*@>d82c11*/++) {
    /*@>d80dc2*/b/*@>d82c12*/ += /*@>d810fa*/(real_T)/*@>d8278f*/nz/*@>d82791*/[/*@>d8278d*/i/*@>d8278b*/ + /*@>d8278e*/1];
}
/*@>c680f7*/if (/*@>d80d9d*/b/*@>c680f0*/ != /*@>d80d9f*/0.0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S915>:1:20' TranslateError('The weights in ''medusa_premix_left_min'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d8243d*/memcpy(&/*@>d82045*/d_data[/*@>d82035*/0], &/*@>d8204d*/f/*@>d8204e*/[/*@>d82042*/0], /*@>d82044*/76U/*@>d82051*/ * /*@>d82050*/sizeof(char_T));
    /*@>d82329*/TranslateError(&/*@>d81dd9*/d_data/*@>d81dec*/[/*@>d80da9*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S915>:1:24' TOP = minGain_Left.Value(:, 1:numLRIn); */
/*@>d8243f*/memcpy(&/*@>d82903*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d82ce7*/TOP_m/*@>d81fe6*/[/*@>d81fd5*/0], &/*@>d82909*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d82cea*/MinLevel_Left./*@>d82cd2*/Value[0], /*@>d81fe4*/77U/*@>d81ff7*/ * /*@>d81ff6*/sizeof(real_T));
/* '<S915>:1:25' if(~ MedusaPremixConfig.includeCAE) */
/* '<S915>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d8244a*/memset(&/*@>d82915*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d82ced*/TOP_CAE_b/*@>d82158*/[/*@>d82154*/0], /*@>d82bc4*/0, /*@>d82156*/33U/*@>d8215e*/ * /*@>d8215d*/sizeof(real_T));
/* {E!d180}End of MATLAB Function: '<S888>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_4153(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(79, 0, fcnProtoType)>
%endfunction
