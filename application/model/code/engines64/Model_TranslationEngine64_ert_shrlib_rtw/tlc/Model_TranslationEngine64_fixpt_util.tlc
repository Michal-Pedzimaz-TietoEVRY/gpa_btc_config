%function CGIRBlockRegisterFixPointFunctions() void
%if !ISFIELD(FixPtUtils,"div_s32")
%assign tmpRet = SETFIELD(FixPtUtils,"div_s32",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int32_T div_s32(int32_T numerator, int32_T denominator);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int32_T div_s32(int32_T numerator, int32_T denominator)
{
    int32_T quotient;
    if (denominator == 0) {
        quotient = numerator >= 0 ? MAX_int32_T : MIN_int32_T;
        /* Divide by zero handler */    } else {
        uint32_T tempAbsQuotient;
        tempAbsQuotient = (numerator < 0 ? ~(uint32_T)numerator + 1U : (uint32_T)numerator) / (denominator < 0 ? ~(uint32_T)denominator + 1U : (uint32_T)denominator);
        quotient = (numerator < 0) != (denominator < 0) ? -(int32_T)tempAbsQuotient : (int32_T)tempAbsQuotient;
    }
    return quotient;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("div_s32",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("div_s32", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("div_s32", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"div_s32")


%endfunction


