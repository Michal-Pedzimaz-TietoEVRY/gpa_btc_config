%implements s798_b0_evwnd_78_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
int32_T xpageoffset;
char_T c_data[92];
char_T d_data[74];
int8_T nz[10];
boolean_T x[20];
static const char_T e[92] = %<(TLC_STR_CTX(83))>;
static const char_T f[74] = %<(TLC_STR_CTX(84))>;
%closefile localVarDecl
/* {S!d173}MATLAB Function: '<S887>/Trivial Translation' */
/* {S!d176}MATLAB Function: '<S887>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S887>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S913>:1' */
/* '<S913>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/SLC Tuning/Min Level CS/Trivial Translation': '<S912>:1' */
/* '<S912>:1:3' numCSIn = MedusaPremixConfig.CS_in; */
/* '<S912>:1:4' NumCAEWeights = MedusaPremixConfig.NumTailComp.CS; */
/* '<S912>:1:6' NumRows = MedusaPremixConfig.CS_out; */
/* '<S912>:1:7' NumColumns = numCSIn + NumCAEWeights; */
/* '<S912>:1:8' if(~ MedusaPremixConfig.includeCAE) */
/* '<S912>:1:9' NumColumns = numCSIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S912>:1:13' if(minGain_CS.Size(1) ~= NumRows || minGain_CS.Size(2) ~= NumColumns) */
/*@>c67fb8*/if ((/*@>d7f36c*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f755*/MinLevel_CS./*@>d7f74c*/Size/*@>d7f1f5*/[/*@>d7f1ee*/0]/*@>c67fb2*/ != /*@>d7d895*/2.0)/*@>d7f5eb*/ || (/*@>d7f372*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f758*/MinLevel_CS./*@>d7f74f*/Size/*@>d7f1fe*/[/*@>d7f1f7*/1]/*@>c67fb4*/ != /*@>d7d896*/10.0)) {
    /* '<S912>:1:14' TranslateError('The parameter ''medusa_premix_cs_min'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d7eee6*/memcpy(&/*@>d7eb45*/c_data[/*@>d7eb35*/0], &/*@>d7eb4d*/e/*@>d7eb4e*/[/*@>d7eb42*/0], /*@>d7eb44*/92U/*@>d7eb51*/ * /*@>d7eb50*/sizeof(char_T));
    /*@>d7edd0*/TranslateError(&/*@>d7e81a*/c_data/*@>d7e82d*/[/*@>d7d89d*/0], /*@>d7d89e*/2.0, /*@>d7d89f*/10.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S912>:1:18' checkValues = (minGain_CS.Value < 0); */
/*@>d7cdb3*/for (/*@>d7f67d*/i = /*@>d7f67c*/0; /*@>d7f687*/i < /*@>d7f685*/20; /*@>d7f683*/i/*@>d7f68b*/++) {
    /*@>d7d8dc*/x/*@>d7cda5*/[/*@>d7d8da*/i]/*@>d7cda6*/ = (/*@>d7f378*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f75b*/MinLevel_CS./*@>d7f752*/Value/*@>d7f208*/[/*@>d7f201*/i]/*@>d7cd95*/ < /*@>d7d8ca*/0.0);
}
/* '<S912>:1:19' if(sum(sum(checkValues))) */
/*@>c6802c*/for (/*@>d7f66c*/i = /*@>d7f66b*/0; /*@>d7f676*/i < /*@>d7f674*/10; /*@>d7f672*/i/*@>d7f68c*/++) {
    /*@>d7d8ac*/xpageoffset/*@>c68022*/ = /*@>d7d8bb*/i/*@>d7d96d*/ << /*@>d7d96c*/1;
    /*@>d7d926*/nz/*@>d7d5f8*/[/*@>d7d928*/i] = (int8_T)(/*@>d7f213*/x/*@>d7f215*/[/*@>d7f211*/xpageoffset/*@>d7f20f*/ + /*@>d7f212*/1]/*@>d7ddbf*/ + /*@>d7f219*/x/*@>d7f21b*/[/*@>d7f218*/xpageoffset]);
}
/*@>d7d8ae*/xpageoffset/*@>c6803f*/ = /*@>d7f20b*/nz/*@>d7f20d*/[/*@>d7f20a*/0];
/*@>c68048*/for (/*@>d7f65b*/i = /*@>d7f65a*/0; /*@>d7f665*/i < /*@>d7f663*/9; /*@>d7f661*/i/*@>d7f68d*/++) {
    /*@>d7d8b7*/xpageoffset/*@>d7f68e*/ += /*@>d7f221*/nz/*@>d7f223*/[/*@>d7f21f*/i/*@>d7f21d*/ + /*@>d7f220*/1];
}
/*@>c67fbe*/if (/*@>d7d897*/xpageoffset/*@>c67fb7*/ != /*@>d7d899*/0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S912>:1:20' TranslateError('The weights in ''medusa_premix_cs_min'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d7eee8*/memcpy(&/*@>d7eae3*/d_data[/*@>d7ead3*/0], &/*@>d7eaeb*/f/*@>d7eaec*/[/*@>d7eae0*/0], /*@>d7eae2*/74U/*@>d7eaef*/ * /*@>d7eaee*/sizeof(char_T));
    /*@>d7edd4*/TranslateError(&/*@>d7e878*/d_data/*@>d7e88b*/[/*@>d7d8a3*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S912>:1:24' TOP = minGain_CS.Value(:, 1:numCSIn); */
/*@>d7eeea*/memcpy(&/*@>d7f384*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f75e*/TOP_o/*@>d7ea84*/[/*@>d7ea73*/0], &/*@>d7f38a*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f761*/MinLevel_CS./*@>d7f749*/Value[0], /*@>d7ea82*/20U/*@>d7ea95*/ * /*@>d7ea94*/sizeof(real_T));
/* '<S912>:1:25' if(~ MedusaPremixConfig.includeCAE) */
/* '<S912>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d7f390*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f764*/TOP_CAE_m/*@>d7d6c0*/[/*@>d7d934*/0]/*@>d7d6bf*/ = /*@>d7d933*/0.0;
/*@>d7f396*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f767*/TOP_CAE_m/*@>d7d6c9*/[/*@>d7d938*/1]/*@>d7d6c8*/ = /*@>d7d937*/0.0;
/*@>d7f39c*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f76a*/TOP_CAE_m/*@>d7d6d2*/[/*@>d7d93c*/2]/*@>d7d6d1*/ = /*@>d7d93b*/0.0;
/*@>d7f3a2*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d7f76d*/TOP_CAE_m/*@>d7d6db*/[/*@>d7d940*/3]/*@>d7d6da*/ = /*@>d7d93f*/0.0;
/* {E!d176}End of MATLAB Function: '<S887>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_4145(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(78, 0, fcnProtoType)>
%endfunction
