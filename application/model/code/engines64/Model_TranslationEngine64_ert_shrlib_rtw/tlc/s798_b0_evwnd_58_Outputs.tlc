%implements s798_b0_evwnd_58_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T nz[3];
int32_T i;
int32_T k;
char_T c_data[91];
char_T d_data[73];
boolean_T x[30];
static const char_T e[91] = %<(TLC_STR_CTX(54))>;
static const char_T f[73] = %<(TLC_STR_CTX(55))>;
%closefile localVarDecl
/* {S!d93}MATLAB Function: '<S809>/Trivial Translation' */
/* {S!d96}MATLAB Function: '<S809>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S809>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S831>:1' */
/* '<S831>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/SLC Tuning/Max Level Left/Trivial Translation': '<S830>:1' */
/* '<S830>:1:3' numLRIn = MedusaFRMConfig.LR_in; */
/* '<S830>:1:4' NumCAEWeights = MedusaFRMConfig.NumTailComp.LR; */
/* '<S830>:1:6' NumRows = MedusaFRMConfig.LR_out; */
/* '<S830>:1:7' NumColumns = numLRIn + NumCAEWeights; */
/* '<S830>:1:8' if(~ MedusaFRMConfig.includeCAE) */
/* '<S830>:1:9' NumColumns = numLRIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S830>:1:13' if(maxGain_Left.Size(1) ~= NumRows || maxGain_Left.Size(2) ~= NumColumns) */
/*@>c66b64*/if ((/*@>d4a5d3*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4a976*/MaxLevel_Left_k./*@>d4a96d*/Size/*@>d4a459*/[/*@>d4a452*/0]/*@>c66b5d*/ != /*@>d489b3*/10.0)/*@>d4a81a*/ || (/*@>d4a5d9*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4a979*/MaxLevel_Left_k./*@>d4a970*/Size/*@>d4a462*/[/*@>d4a45b*/1]/*@>c66b5f*/ != /*@>d489b4*/3.0)) {
    /* '<S830>:1:14' TranslateError('The parameter ''medusa_frm_left_max'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d4a149*/memcpy(&/*@>d49dbd*/c_data[/*@>d49dad*/0], &/*@>d49dc5*/e/*@>d49dc6*/[/*@>d49dba*/0], /*@>d49dbc*/91U/*@>d49dc9*/ * /*@>d49dc8*/sizeof(char_T));
    /*@>d4a028*/TranslateError(&/*@>d49a8e*/c_data/*@>d49aa1*/[/*@>d489bb*/0], /*@>d489bc*/10.0, /*@>d489bd*/3.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S830>:1:18' checkValues = (maxGain_Left.Value < 0); */
/*@>d47f39*/for (/*@>d4a8a9*/i = /*@>d4a8a8*/0; /*@>d4a8b3*/i < /*@>d4a8b1*/30; /*@>d4a8af*/i/*@>d4a8b7*/++) {
    /*@>d48a08*/x/*@>d47f2b*/[/*@>d48a06*/i]/*@>d47f2c*/ = (/*@>d4a5df*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4a97c*/MaxLevel_Left_k./*@>d4a973*/Value/*@>d4a46c*/[/*@>d4a465*/i]/*@>d47f1b*/ < /*@>d489f4*/0.0);
}
/* '<S830>:1:19' if(sum(sum(checkValues))) */
/*@>c66bd9*/for (/*@>d4a887*/i = /*@>d4a886*/0; /*@>d4a891*/i < /*@>d4a88f*/3; /*@>d4a88d*/i/*@>d4a8b8*/++) {
    int32_T xpageoffset;
    /*@>d489ca*/xpageoffset/*@>c66bce*/ = /*@>d489d5*/i/*@>d48aa8*/ * /*@>d489c9*/10;
    /*@>d48a13*/nz/*@>d486bc*/[/*@>d48a15*/i]/*@>c66bd2*/ = /*@>d4a47f*/x/*@>d4a481*/[/*@>d4a47e*/xpageoffset];
/*@>c66bdd*/    for (/*@>d4a898*/k = /*@>d4a897*/0; /*@>d4a8a2*/k < /*@>d4a8a0*/9; /*@>d4a89e*/k/*@>d4a8b9*/++) {
        /*@>d49451*/nz/*@>d49450*/[/*@>d49453*/i] += /*@>d4a48a*/x/*@>d4a48c*/[(/*@>d4a486*/xpageoffset/*@>d4a484*/ + /*@>d4a488*/k)/*@>d4a483*/ + /*@>d4a489*/1];
    }
}
/*@>c66b6a*/if ((/*@>d48f5f*/(real_T)/*@>d4a46f*/nz/*@>d4a471*/[/*@>d4a46e*/0]/*@>d48f5e*/ + /*@>d48f64*/(real_T)/*@>d4a474*/nz/*@>d4a476*/[/*@>d4a473*/1])/*@>d48eee*/ + /*@>d48ef1*/(real_T)/*@>d4a479*/nz/*@>d4a47b*/[/*@>d4a478*/2]/*@>c66b62*/ != /*@>d489b7*/0.0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S830>:1:20' TranslateError('The weights in ''medusa_frm_left_max'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d4a14b*/memcpy(&/*@>d49d5c*/d_data[/*@>d49d4c*/0], &/*@>d49d64*/f/*@>d49d65*/[/*@>d49d59*/0], /*@>d49d5b*/73U/*@>d49d68*/ * /*@>d49d67*/sizeof(char_T));
    /*@>d4a02c*/TranslateError(&/*@>d49aec*/d_data/*@>d49aff*/[/*@>d489c1*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S830>:1:24' TOP = maxGain_Left.Value(:, 1:numLRIn); */
/*@>d4a14d*/memcpy(&/*@>d4a5eb*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4a97f*/TOP_d4/*@>d49cfd*/[/*@>d49cec*/0], &/*@>d4a5f1*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4a982*/MaxLevel_Left_k./*@>d4a96a*/Value[0], /*@>d49cfb*/30U/*@>d49d0e*/ * /*@>d49d0d*/sizeof(real_T));
/* '<S830>:1:25' if(~ MedusaFRMConfig.includeCAE) */
/* '<S830>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d4a158*/memset(&/*@>d4a5fd*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d4a985*/TOP_CAE_gk/*@>d49e67*/[/*@>d49e63*/0], /*@>d4a87f*/0, /*@>d49e65*/10U/*@>d49e6d*/ * /*@>d49e6c*/sizeof(real_T));
/* {E!d96}End of MATLAB Function: '<S809>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_3410(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(58, 0, fcnProtoType)>
%endfunction
