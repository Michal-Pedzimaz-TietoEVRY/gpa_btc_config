%implements s798_b0_evwnd_62_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T nz[3];
int32_T i;
int32_T k;
char_T c_data[92];
char_T d_data[74];
boolean_T x[30];
static const char_T e[92] = %<(TLC_STR_CTX(62))>;
static const char_T f[74] = %<(TLC_STR_CTX(63))>;
%closefile localVarDecl
/* {S!d109}MATLAB Function: '<S813>/Trivial Translation' */
/* {S!d112}MATLAB Function: '<S813>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S813>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S843>:1' */
/* '<S843>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/SLC Tuning/Min Level Right/Trivial Translation': '<S842>:1' */
/* '<S842>:1:3' numLRIn = MedusaFRMConfig.LR_in; */
/* '<S842>:1:4' NumCAEWeights = MedusaFRMConfig.NumTailComp.LR; */
/* '<S842>:1:6' NumRows = MedusaFRMConfig.LR_out; */
/* '<S842>:1:7' NumColumns = numLRIn + NumCAEWeights; */
/* '<S842>:1:8' if(~ MedusaFRMConfig.includeCAE) */
/* '<S842>:1:9' NumColumns = numLRIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S842>:1:13' if(minGain_Right.Size(1) ~= NumRows || minGain_Right.Size(2) ~= NumColumns) */
/*@>c67068*/if ((/*@>d57c22*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d57fc5*/MinLevel_Right_e./*@>d57fbc*/Size/*@>d57aa8*/[/*@>d57aa1*/0]/*@>c67061*/ != /*@>d56002*/10.0)/*@>d57e69*/ || (/*@>d57c28*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d57fc8*/MinLevel_Right_e./*@>d57fbf*/Size/*@>d57ab1*/[/*@>d57aaa*/1]/*@>c67063*/ != /*@>d56003*/3.0)) {
    /* '<S842>:1:14' TranslateError('The parameter ''medusa_frm_right_min'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d57798*/memcpy(&/*@>d5740c*/c_data[/*@>d573fc*/0], &/*@>d57414*/e/*@>d57415*/[/*@>d57409*/0], /*@>d5740b*/92U/*@>d57418*/ * /*@>d57417*/sizeof(char_T));
    /*@>d57677*/TranslateError(&/*@>d570dd*/c_data/*@>d570f0*/[/*@>d5600a*/0], /*@>d5600b*/10.0, /*@>d5600c*/3.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S842>:1:18' checkValues = (minGain_Right.Value < 0); */
/*@>d55588*/for (/*@>d57ef8*/i = /*@>d57ef7*/0; /*@>d57f02*/i < /*@>d57f00*/30; /*@>d57efe*/i/*@>d57f06*/++) {
    /*@>d56057*/x/*@>d5557a*/[/*@>d56055*/i]/*@>d5557b*/ = (/*@>d57c2e*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d57fcb*/MinLevel_Right_e./*@>d57fc2*/Value/*@>d57abb*/[/*@>d57ab4*/i]/*@>d5556a*/ < /*@>d56043*/0.0);
}
/* '<S842>:1:19' if(sum(sum(checkValues))) */
/*@>c670dd*/for (/*@>d57ed6*/i = /*@>d57ed5*/0; /*@>d57ee0*/i < /*@>d57ede*/3; /*@>d57edc*/i/*@>d57f07*/++) {
    int32_T xpageoffset;
    /*@>d56019*/xpageoffset/*@>c670d2*/ = /*@>d56024*/i/*@>d560f7*/ * /*@>d56018*/10;
    /*@>d56062*/nz/*@>d55d0b*/[/*@>d56064*/i]/*@>c670d6*/ = /*@>d57ace*/x/*@>d57ad0*/[/*@>d57acd*/xpageoffset];
/*@>c670e1*/    for (/*@>d57ee7*/k = /*@>d57ee6*/0; /*@>d57ef1*/k < /*@>d57eef*/9; /*@>d57eed*/k/*@>d57f08*/++) {
        /*@>d56aa0*/nz/*@>d56a9f*/[/*@>d56aa2*/i] += /*@>d57ad9*/x/*@>d57adb*/[(/*@>d57ad5*/xpageoffset/*@>d57ad3*/ + /*@>d57ad7*/k)/*@>d57ad2*/ + /*@>d57ad8*/1];
    }
}
/*@>c6706e*/if ((/*@>d565ae*/(real_T)/*@>d57abe*/nz/*@>d57ac0*/[/*@>d57abd*/0]/*@>d565ad*/ + /*@>d565b3*/(real_T)/*@>d57ac3*/nz/*@>d57ac5*/[/*@>d57ac2*/1])/*@>d5653d*/ + /*@>d56540*/(real_T)/*@>d57ac8*/nz/*@>d57aca*/[/*@>d57ac7*/2]/*@>c67066*/ != /*@>d56006*/0.0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S842>:1:20' TranslateError('The weights in ''medusa_frm_right_min'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d5779a*/memcpy(&/*@>d573ab*/d_data[/*@>d5739b*/0], &/*@>d573b3*/f/*@>d573b4*/[/*@>d573a8*/0], /*@>d573aa*/74U/*@>d573b7*/ * /*@>d573b6*/sizeof(char_T));
    /*@>d5767b*/TranslateError(&/*@>d5713b*/d_data/*@>d5714e*/[/*@>d56010*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S842>:1:24' TOP = minGain_Right.Value(:, 1:numLRIn); */
/*@>d5779c*/memcpy(&/*@>d57c3a*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d57fce*/TOP_da/*@>d5734c*/[/*@>d5733b*/0], &/*@>d57c40*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d57fd1*/MinLevel_Right_e./*@>d57fb9*/Value[0], /*@>d5734a*/30U/*@>d5735d*/ * /*@>d5735c*/sizeof(real_T));
/* '<S842>:1:25' if(~ MedusaFRMConfig.includeCAE) */
/* '<S842>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d577a7*/memset(&/*@>d57c4c*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d57fd4*/TOP_CAE_j/*@>d574b6*/[/*@>d574b2*/0], /*@>d57ece*/0, /*@>d574b4*/10U/*@>d574bc*/ * /*@>d574bb*/sizeof(real_T));
/* {E!d112}End of MATLAB Function: '<S813>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_3442(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(62, 0, fcnProtoType)>
%endfunction
