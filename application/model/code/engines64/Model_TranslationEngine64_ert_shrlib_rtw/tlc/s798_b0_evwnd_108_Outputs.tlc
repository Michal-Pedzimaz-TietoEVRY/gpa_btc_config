%implements s798_b0_evwnd_108_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T FRNonHRDelaySamples[18];
real_T b_rem[18];
real_T FRHRDrvDelaySamples;
real_T FRHRPaxDelaySamples;
real_T c_rem;
int32_T FREQDelaySamples[22];
int32_T DRNonHRDelaySamples[18];
int32_T b_FRNonHRDelaySamples[18];
int32_T b_FRHRDrvDelaySamples;
int32_T b_FRHRPaxDelaySamples;
int32_T b_FRNonHRDelaySamples_0;
int32_T b_a;
int32_T f_k;
int32_T nz;
char_T d_data[58];
char_T c_data[55];
char_T e_data[51];
char_T g_data[46];
char_T b_data[40];
char_T i_data[34];
char_T f_data[18];
char_T h_data[14];
boolean_T b_x[22];
boolean_T x[18];
boolean_T y;
static const char_T n[40] = %<(TLC_STR_CTX(92))>;
static const char_T o[55] = %<(TLC_STR_CTX(93))>;
static const char_T p[58] = %<(TLC_STR_CTX(94))>;
static const char_T q[51] = %<(TLC_STR_CTX(95))>;
static const char_T r[18] = %<(TLC_STR_CTX(96))>;
static const char_T s[46] = %<(TLC_STR_CTX(97))>;
static const char_T t[14] = %<(TLC_STR_CTX(98))>;
static const char_T u[14] = %<(TLC_STR_CTX(99))>;
static const char_T v[34] = %<(TLC_STR_CTX(100))>;
boolean_T exitg1;
%closefile localVarDecl
/* {S!d763}MATLAB Function: '<S1035>/translation' */
/* {S!d770}MATLAB Function: '<S1035>/translation' incorporates:
 *  S-Function (TuneVarMEX): '<S1034>/Tune Variable'
 *  S-Function (TuneVarMEX): '<S1034>/Tune Variable1'
 *  S-Function (TuneVarMEX): '<S1034>/Tune Variable4'
 *  S-Function (TuneVarMEX): '<S1034>/Tune Variable5'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S1038>:1' */
/* '<S1038>:1:3' f(); */
/* [Param:DecimationFactor] */
/* [Param:maxFullRateHoligramDelay] */
/* [Param:maxFullRateSpeakerDelay] */
/* [Param:numHeadrestComps] */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 6/Speaker Delay Tune/Output Delay Translation with Headrest/translation': '<S1037>:1' */
/* '<S1037>:1:9' nonHRDelaySamples = tuneNonHRDelaySamples.Value; */
/*@>de5cac*/memcpy(&/*@>de4c53*/FRNonHRDelaySamples/*@>de4c54*/[/*@>de4c43*/0], &/*@>de756f*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bb5*/NonHeadrestSpeakerDelaySamples./*@>de8baf*/Value[0], /*@>de4c52*/18U/*@>de4c65*/ * /*@>de4c64*/sizeof(real_T));
/* '<S1037>:1:10' HRDrvDelaySamples = tuneHRDrvDelaySamples.Value; */
/* '<S1037>:1:11' HRPaxDelaySamples = tuneHRPaxDelaySamples.Value; */
/* '<S1037>:1:12' FREQDelaySamples = int32(tuneFREQDelaySamples.Value); */
/*@>ddad93*/for (/*@>de8725*/nz = /*@>de8724*/0; /*@>de872f*/nz < /*@>de872d*/22; /*@>de872b*/nz/*@>de8733*/++) {
    /*@>dde3c9*/FREQDelaySamples/*@>ddd3e0*/[/*@>dde3c7*/nz]/*@>ddad86*/ = /*@>dde6df*/(int32_T)%<SLibCG_DumpSSCode("/*@[de8485*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d3c*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8d3b*/FRHoligramDelaySamples./*@>de8d3a*/Value/*@>de8d39*/[/*@>de8d3f*/nz]"], 108, 1, 6)),"/*@]*/")>;
}
/*  Get delay upper bounds */
/* '<S1037>:1:15' maxFREQDelay = maxFullRateHoligramDelay; */
/* '<S1037>:1:16' maxFRSpkrDelay = maxFullRateSpeakerDelay; */
/*  Compute delay values in samples */
/* '<S1037>:1:19' DEC = DecimationFactor; */
/*  sampleRate = sampleRate; */
/* '<S1037>:1:21' FRHRDrvDelaySamples = round(HRDrvDelaySamples); */
/*@>dde2d3*/FRHRDrvDelaySamples/*@>c6955e*/ = %<SLibCG_DumpSSCode("/*@[de8440*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d4b*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8d4a*/HeadrestDrvSpeakerDelaySamples.Value"], 108, 1, 3)),"/*@]*/")>;
/* '<S1037>:1:22' FRHRPaxDelaySamples = round(HRPaxDelaySamples); */
/*@>dde2d5*/FRHRPaxDelaySamples/*@>c69561*/ = %<SLibCG_DumpSSCode("/*@[de8457*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d59*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8d58*/HeadrestPaxSpeakerDelaySamples.Value"], 108, 1, 4)),"/*@]*/")>;
/* '<S1037>:1:23' FRNonHRDelaySamples = round(nonHRDelaySamples); */
/*  Check whether speaker delays are multiple of 4, and if not round them up  */
/*  to the nearest multiple */
/* '<S1037>:1:27' rem = ceil(FRNonHRDelaySamples/4)*4 - FRNonHRDelaySamples; */
/* '<S1037>:1:28' FRNonHRDelaySamples = int32(FRNonHRDelaySamples + rem); */
/* '<S1037>:1:29' DRNonHRDelaySamples = int32(FRNonHRDelaySamples/DEC); */
/*@>c69565*/for (/*@>de8714*/b_FRHRDrvDelaySamples = /*@>de8713*/0; /*@>de871e*/b_FRHRDrvDelaySamples < /*@>de871c*/18; /*@>de871a*/b_FRHRDrvDelaySamples/*@>de8734*/++) {
    real_T b_rem_0;
    c_rem/*@>c6956b*/ = %<SLibCG_DumpSSCode("/*@[de846e*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d66*/FRNonHRDelaySamples/*@>de8d65*/[/*@>de8d67*/b_FRHRDrvDelaySamples]"], 108, 1, 5)),"/*@]*/")>;
    b_rem_0/*@>ddae8d*/ = /*@>de5763*/ceil(c_rem/*@>ddfea1*/ / /*@>ddfea4*/4.0)/*@>dde6f7*/ * /*@>dde3ab*/4.0/*@>ddae6d*/ - c_rem;
    b_FRNonHRDelaySamples_0/*@>ddaf4a*/ = /*@>dde6f3*/(int32_T)(c_rem/*@>ddaf21*/ + b_rem_0);
    /*@>dde3d4*/DRNonHRDelaySamples/*@>ddd414*/[/*@>dde3d6*/b_FRHRDrvDelaySamples]/*@>c69392*/ = /*@>ddf2cf*/(int32_T)%<SLibCG_DumpSSCode("/*@[de8429*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d72*/(real_T)b_FRNonHRDelaySamples_0/*@>de8d71*/ / /*@>de8d74*/4.0"], 108, 1, 2)),"/*@]*/")>;
    /*@>dde611*/b_rem/*@>ddd426*/[/*@>dde613*/b_FRHRDrvDelaySamples] = b_rem_0;
    /*@>dde623*/b_FRNonHRDelaySamples/*@>ddd42f*/[/*@>dde625*/b_FRHRDrvDelaySamples] = b_FRNonHRDelaySamples_0;
    /*@>de1864*/FRNonHRDelaySamples/*@>de1863*/[/*@>de1866*/b_FRHRDrvDelaySamples] = c_rem;
}
/* '<S1037>:1:30' if any(rem ~= 0) */
/*@>dde2de*/y/*@>c6957a*/ = /*@>dde2e0*/false;
/*@>dde2e1*/b_FRHRDrvDelaySamples/*@>c6958b*/ = /*@>de84f1*/0;
exitg1 = false;
while/*@<c69593*/ ((!exitg1) && (/*@>dde2e4*/b_FRHRDrvDelaySamples/*@>c69592*/ < /*@>dde2e6*/18)) {
    /*@>c69587*/if (/*@>de70b2*/b_rem/*@>de70b4*/[/*@>de70b1*/b_FRHRDrvDelaySamples]/*@>dd881f*/ != /*@>dde35d*/0.0) {
        /*@>dde2ec*/y/*@>c6957c*/ = /*@>dde2ee*/true;
        exitg1 = true;
    } else {
        /*@>dde2ea*/b_FRHRDrvDelaySamples/*@>de8736*/++;
    }
}
/*@>c6933d*/if (/*@>dde2dc*/y) {
    /* '<S1037>:1:31' TranslateError('Speaker delays must be a multiple of 4.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb119*/    for (/*@>de8703*/nz = /*@>de8702*/0; /*@>de870d*/nz < /*@>de870b*/40; /*@>de8709*/nz/*@>de8737*/++) {
        /*@>de3785*/b_data[/*@>dde3f8*/nz]/*@>ddb10c*/ = /*@>de70b8*/n/*@>de70ba*/[/*@>de70b7*/nz];
    }
    /*@>de5767*/TranslateError(&/*@>de376e*/b_data/*@>de3781*/[/*@>dde282*/0]);
}
/* '<S1037>:1:34' rem = ceil(FRHRDrvDelaySamples/4)*4 - FRHRDrvDelaySamples; */
/*@>dde262*/c_rem/*@>c69316*/ = /*@>de5769*/ceil(/*@>dde32e*/FRHRDrvDelaySamples/*@>c696ac*/ / /*@>dde330*/4.0)/*@>dde6cc*/ * /*@>dde25f*/4.0/*@>c6932d*/ - /*@>dde260*/FRHRDrvDelaySamples;
/* '<S1037>:1:35' FRHRDrvDelaySamples = int32(FRHRDrvDelaySamples + rem); */
/*@>dde268*/b_FRHRDrvDelaySamples/*@>c69319*/ = /*@>dde6c8*/(int32_T)(/*@>dde264*/FRHRDrvDelaySamples/*@>c6932e*/ + /*@>dde266*/c_rem);
/* '<S1037>:1:36' DRHRDrvDelaySamples = int32(FRHRDrvDelaySamples/DEC); */
/*@>dde31b*/b_FRNonHRDelaySamples_0/*@>c69389*/ = /*@>ddf2ee*/(int32_T)%<SLibCG_DumpSSCode("/*@[de83fb*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d7f*/(real_T)/*@>de8d80*/b_FRHRDrvDelaySamples/*@>de8d7e*/ / /*@>de8d81*/4.0"], 108, 1, 0)),"/*@]*/")>;
/* '<S1037>:1:37' if any(rem ~= 0) */
/*@>c69341*/if (/*@>dde357*/c_rem/*@>dd7190*/ != /*@>dde359*/0.0) {
    /* '<S1037>:1:38' TranslateError('Driver headrest speaker delay must be a multiple of 4.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb2ae*/    for (/*@>de86f2*/nz = /*@>de86f1*/0; /*@>de86fc*/nz < /*@>de86fa*/55; /*@>de86f8*/nz/*@>de8738*/++) {
        /*@>de37f5*/c_data[/*@>dde427*/nz]/*@>ddb2a1*/ = /*@>de70d1*/o/*@>de70d3*/[/*@>de70d0*/nz];
    }
    /*@>de576d*/TranslateError(&/*@>de37de*/c_data/*@>de37f1*/[/*@>dde286*/0]);
}
/* '<S1037>:1:41' rem = ceil(FRHRPaxDelaySamples/4)*4 - FRHRPaxDelaySamples; */
/*@>dde26d*/c_rem/*@>c6931b*/ = /*@>de576f*/ceil(/*@>dde331*/FRHRPaxDelaySamples/*@>c696b0*/ / /*@>dde333*/4.0)/*@>dde6bb*/ * /*@>dde26a*/4.0/*@>c69331*/ - /*@>dde26b*/FRHRPaxDelaySamples;
/* '<S1037>:1:42' FRHRPaxDelaySamples = int32(FRHRPaxDelaySamples + rem); */
/*@>dde273*/b_FRHRPaxDelaySamples/*@>c6931e*/ = /*@>dde6b7*/(int32_T)(/*@>dde26f*/FRHRPaxDelaySamples/*@>c69332*/ + /*@>dde271*/c_rem);
/* '<S1037>:1:43' DRHRPaxDelaySamples = int32(FRHRPaxDelaySamples/DEC); */
/*@>dde31d*/b_a/*@>c6938c*/ = /*@>ddf2f9*/(int32_T)%<SLibCG_DumpSSCode("/*@[de8412*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>de8d8c*/(real_T)/*@>de8d8d*/b_FRHRPaxDelaySamples/*@>de8d8b*/ / /*@>de8d8e*/4.0"], 108, 1, 1)),"/*@]*/")>;
/* '<S1037>:1:44' if any(rem ~= 0) */
/*@>c69345*/if (/*@>dde35a*/c_rem/*@>dd71a0*/ != /*@>dde35c*/0.0) {
    /* '<S1037>:1:45' TranslateError('Passenger headrest speaker delay must be a multiple of 4.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb37f*/    for (/*@>de86e1*/nz = /*@>de86e0*/0; /*@>de86eb*/nz < /*@>de86e9*/58; /*@>de86e7*/nz/*@>de8739*/++) {
        /*@>de385b*/d_data[/*@>dde43b*/nz]/*@>ddb372*/ = /*@>de70ea*/p/*@>de70ec*/[/*@>de70e9*/nz];
    }
    /*@>de5773*/TranslateError(&/*@>de3844*/d_data/*@>de3857*/[/*@>dde28a*/0]);
}
/*  Check if delays are within bounds */
/* '<S1037>:1:49' checkDelay(FREQDelaySamples, maxFREQDelay, 'Medusa HFEQ delay'); */
/*  Check if delays are within bounds */
/* '<S1037>:1:67' if(sum(delayValue < 0)) */
/*@>ddb043*/for (/*@>de86d0*/nz = /*@>de86cf*/0; /*@>de86da*/nz < /*@>de86d8*/22; /*@>de86d6*/nz/*@>de873a*/++) {
    /*@>dde3e7*/b_x/*@>ddd495*/[/*@>dde3e5*/nz]/*@>ddb036*/ = (/*@>de70c3*/FREQDelaySamples/*@>de70c5*/[/*@>de70c2*/nz]/*@>ddb021*/ < /*@>dde3ac*/0);
}
/*@>dde2ef*/nz/*@>c695bd*/ = /*@>de70bd*/b_x/*@>de70bf*/[/*@>de70bc*/0];
/*@>c695c1*/for (/*@>de86bf*/f_k = /*@>de86be*/0; /*@>de86c9*/f_k < /*@>de86c7*/21; /*@>de86c5*/f_k/*@>de873b*/++) {
    /*@>dde2f8*/nz/*@>de873c*/ += /*@>de70cb*/b_x/*@>de70cd*/[/*@>de70c9*/f_k/*@>de70c7*/ + /*@>de70ca*/1];
}
/*@>c693f8*/if (/*@>dde326*/nz/*@>c693f5*/ != /*@>dde28b*/0) {
    /* '<S1037>:1:68' TranslateError('Value of %<"\%s must be greater than or equal to zero.\', name);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb4c3*/    for (/*@>de86ae*/nz = /*@>de86ad*/0; /*@>de86b8*/nz < /*@>de86b6*/51; /*@>de86b4*/nz/*@>de873d*/++) {
        /*@>de38a7*/e_data[/*@>dde460*/nz]/*@>ddb4b6*/ = /*@>de70f0*/q/*@>de70f2*/[/*@>de70ef*/nz];
    }
/*@>ddb66a*/    for (/*@>de869d*/nz = /*@>de869c*/0; /*@>de86a7*/nz < /*@>de86a5*/18; /*@>de86a3*/nz/*@>de873e*/++) {
        /*@>de3927*/f_data[/*@>dde48e*/nz]/*@>ddb65d*/ = /*@>de70f6*/r/*@>de70f8*/[/*@>de70f5*/nz];
    }
    /*@>de5775*/TranslateError(&/*@>de38fa*/e_data/*@>de390d*/[/*@>dde292*/0], &/*@>de3910*/f_data/*@>de3923*/[/*@>dde296*/0]);
}
/* '<S1037>:1:71' if(sum(delayValue > upper)) */
/*@>ddb191*/for (/*@>de868c*/nz = /*@>de868b*/0; /*@>de8696*/nz < /*@>de8694*/22; /*@>de8692*/nz/*@>de873f*/++) {
    /*@>dde40e*/b_x/*@>ddd4de*/[/*@>dde40c*/nz]/*@>ddb184*/ = (/*@>de70dc*/FREQDelaySamples/*@>de70de*/[/*@>de70db*/nz]/*@>ddb16f*/ > /*@>dde3ad*/45);
}
/*@>dde2fa*/nz/*@>c695d3*/ = /*@>de70d6*/b_x/*@>de70d8*/[/*@>de70d5*/0];
/*@>c695d7*/for (/*@>de867b*/f_k = /*@>de867a*/0; /*@>de8685*/f_k < /*@>de8683*/21; /*@>de8681*/f_k/*@>de8740*/++) {
    /*@>dde303*/nz/*@>de8741*/ += /*@>de70e4*/b_x/*@>de70e6*/[/*@>de70e2*/f_k/*@>de70e0*/ + /*@>de70e3*/1];
}
/*@>c693fa*/if (/*@>dde328*/nz/*@>c693f7*/ != /*@>dde28c*/0) {
    /* '<S1037>:1:72' TranslateError('Value of %<"\%s must be less than or equal to \%d.\', name, upper);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb720*/    for (/*@>de866a*/nz = /*@>de8669*/0; /*@>de8674*/nz < /*@>de8672*/46; /*@>de8670*/nz/*@>de8742*/++) {
        /*@>de3995*/g_data[/*@>dde4a1*/nz]/*@>ddb713*/ = /*@>de710f*/s/*@>de7111*/[/*@>de710e*/nz];
    }
/*@>ddb943*/    for (/*@>de8659*/nz = /*@>de8658*/0; /*@>de8663*/nz < /*@>de8661*/18; /*@>de865f*/nz/*@>de8743*/++) {
        /*@>de3a88*/f_data[/*@>dde4d4*/nz]/*@>ddb936*/ = /*@>de7115*/r/*@>de7117*/[/*@>de7114*/nz];
    }
    /*@>de5777*/TranslateError(&/*@>de3a5b*/g_data/*@>de3a6e*/[/*@>dde29a*/0], &/*@>de3a71*/f_data/*@>de3a84*/[/*@>dde29e*/0], /*@>dde29f*/45);
}
/* '<S1037>:1:50' checkDelay(FRHRDrvDelaySamples, maxFRSpkrDelay, 'h01/h0r delay'); */
/*  Check if delays are within bounds */
/* '<S1037>:1:67' if(sum(delayValue < 0)) */
/*@>c69409*/if (/*@>dde334*/b_FRHRDrvDelaySamples/*@>c696b4*/ < /*@>dde336*/0) {
    /* '<S1037>:1:68' TranslateError('Value of %<"\%s must be greater than or equal to zero.\', name);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb854*/    for (/*@>de8648*/nz = /*@>de8647*/0; /*@>de8652*/nz < /*@>de8650*/51; /*@>de864e*/nz/*@>de8744*/++) {
        /*@>de3a16*/e_data[/*@>dde4c0*/nz]/*@>ddb847*/ = /*@>de711b*/q/*@>de711d*/[/*@>de711a*/nz];
    }
/*@>ddbbbd*/    for (/*@>de8637*/nz = /*@>de8636*/0; /*@>de8641*/nz < /*@>de863f*/14; /*@>de863d*/nz/*@>de8745*/++) {
        /*@>de3b4a*/h_data[/*@>dde51e*/nz]/*@>ddbbb0*/ = /*@>de712c*/t/*@>de712e*/[/*@>de712b*/nz];
    }
    /*@>de5779*/TranslateError(&/*@>de3b1d*/e_data/*@>de3b30*/[/*@>dde2a3*/0], &/*@>de3b33*/h_data/*@>de3b46*/[/*@>dde2a7*/0]);
}
/* '<S1037>:1:71' if(sum(delayValue > upper)) */
/*@>c6940b*/if (/*@>dde337*/b_FRHRDrvDelaySamples/*@>c696b8*/ > /*@>dde339*/1324) {
    /* '<S1037>:1:72' TranslateError('Value of %<"\%s must be less than or equal to \%d.\', name, upper);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddb9f1*/    for (/*@>de8626*/nz = /*@>de8625*/0; /*@>de8630*/nz < /*@>de862e*/46; /*@>de862c*/nz/*@>de8746*/++) {
        /*@>de3ad8*/g_data[/*@>dde4e8*/nz]/*@>ddb9e4*/ = /*@>de713a*/s/*@>de713c*/[/*@>de7139*/nz];
    }
/*@>ddbf4d*/    for (/*@>de8615*/nz = /*@>de8614*/0; /*@>de861f*/nz < /*@>de861d*/14; /*@>de861b*/nz/*@>de8747*/++) {
        /*@>de3c07*/h_data[/*@>dde56d*/nz]/*@>ddbf40*/ = /*@>de7140*/t/*@>de7142*/[/*@>de713f*/nz];
    }
    /*@>de577b*/TranslateError(&/*@>de3bda*/g_data/*@>de3bed*/[/*@>dde2ab*/0], &/*@>de3bf0*/h_data/*@>de3c03*/[/*@>dde2af*/0], /*@>dde2b0*/1324);
}
/* '<S1037>:1:51' checkDelay(FRHRPaxDelaySamples, maxFRSpkrDelay, 'h1l/h1r delay'); */
/*  Check if delays are within bounds */
/* '<S1037>:1:67' if(sum(delayValue < 0)) */
/*@>c6940f*/if (/*@>dde33a*/b_FRHRPaxDelaySamples/*@>c696bc*/ < /*@>dde33c*/0) {
    /* '<S1037>:1:68' TranslateError('Value of %<"\%s must be greater than or equal to zero.\', name);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddbe5e*/    for (/*@>de8604*/nz = /*@>de8603*/0; /*@>de860e*/nz < /*@>de860c*/51; /*@>de860a*/nz/*@>de8748*/++) {
        /*@>de3b94*/e_data[/*@>dde559*/nz]/*@>ddbe51*/ = /*@>de7146*/q/*@>de7148*/[/*@>de7145*/nz];
    }
/*@>ddc08b*/    for (/*@>de85f3*/nz = /*@>de85f2*/0; /*@>de85fd*/nz < /*@>de85fb*/14; /*@>de85f9*/nz/*@>de8749*/++) {
        /*@>de3c9e*/h_data[/*@>dde58f*/nz]/*@>ddc07e*/ = /*@>de714c*/u/*@>de714e*/[/*@>de714b*/nz];
    }
    /*@>de577d*/TranslateError(&/*@>de3c71*/e_data/*@>de3c84*/[/*@>dde2b4*/0], &/*@>de3c87*/h_data/*@>de3c9a*/[/*@>dde2b8*/0]);
}
/* '<S1037>:1:71' if(sum(delayValue > upper)) */
/*@>c69411*/if (/*@>dde33d*/b_FRHRPaxDelaySamples/*@>c696c0*/ > /*@>dde33f*/1324) {
    /* '<S1037>:1:72' TranslateError('Value of %<"\%s must be less than or equal to \%d.\', name, upper);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddbfdc*/    for (/*@>de85e2*/nz = /*@>de85e1*/0; /*@>de85ec*/nz < /*@>de85ea*/46; /*@>de85e8*/nz/*@>de874a*/++) {
        /*@>de3c3a*/g_data[/*@>dde57e*/nz]/*@>ddbfcf*/ = /*@>de7152*/s/*@>de7154*/[/*@>de7151*/nz];
    }
/*@>ddc19a*/    for (/*@>de85d1*/nz = /*@>de85d0*/0; /*@>de85db*/nz < /*@>de85d9*/14; /*@>de85d7*/nz/*@>de874b*/++) {
        /*@>de3d00*/h_data[/*@>dde5a6*/nz]/*@>ddc18d*/ = /*@>de7158*/u/*@>de715a*/[/*@>de7157*/nz];
    }
    /*@>de577f*/TranslateError(&/*@>de3cd3*/g_data/*@>de3ce6*/[/*@>dde2bc*/0], &/*@>de3ce9*/h_data/*@>de3cfc*/[/*@>dde2c0*/0], /*@>dde2c1*/1324);
}
/* '<S1037>:1:52' checkDelay(FRNonHRDelaySamples, maxFRSpkrDelay, 'Medusa non-headrest speaker delay'); */
/*  Check if delays are within bounds */
/* '<S1037>:1:67' if(sum(delayValue < 0)) */
/*@>ddb430*/for (/*@>de85c0*/nz = /*@>de85bf*/0; /*@>de85ca*/nz < /*@>de85c8*/18; /*@>de85c6*/nz/*@>de874c*/++) {
    /*@>dde452*/x/*@>ddd59c*/[/*@>dde450*/nz]/*@>ddb423*/ = (/*@>de7101*/b_FRNonHRDelaySamples/*@>de7103*/[/*@>de7100*/nz]/*@>ddb40e*/ < /*@>dde3ae*/0);
}
/*@>dde305*/nz/*@>c695e9*/ = /*@>de70fb*/x/*@>de70fd*/[/*@>de70fa*/0];
/*@>c695ed*/for (/*@>de85af*/f_k = /*@>de85ae*/0; /*@>de85b9*/f_k < /*@>de85b7*/17; /*@>de85b5*/f_k/*@>de874d*/++) {
    /*@>dde30e*/nz/*@>de874e*/ += /*@>de7109*/x/*@>de710b*/[/*@>de7107*/f_k/*@>de7105*/ + /*@>de7108*/1];
}
/*@>c69419*/if (/*@>dde32a*/nz/*@>c69416*/ != /*@>dde28d*/0) {
    /* '<S1037>:1:68' TranslateError('Value of %<"\%s must be greater than or equal to zero.\', name);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddc20a*/    for (/*@>de859e*/nz = /*@>de859d*/0; /*@>de85a8*/nz < /*@>de85a6*/51; /*@>de85a4*/nz/*@>de874f*/++) {
        /*@>de3d6a*/e_data[/*@>dde5b4*/nz]/*@>ddc1fd*/ = /*@>de716f*/q/*@>de7171*/[/*@>de716e*/nz];
    }
/*@>ddc337*/    for (/*@>de858d*/nz = /*@>de858c*/0; /*@>de8597*/nz < /*@>de8595*/34; /*@>de8593*/nz/*@>de8750*/++) {
        /*@>de3de8*/i_data[/*@>dde5ce*/nz]/*@>ddc32a*/ = /*@>de7184*/v/*@>de7186*/[/*@>de7183*/nz];
    }
    /*@>de5781*/TranslateError(&/*@>de3dbb*/e_data/*@>de3dce*/[/*@>dde2c5*/0], &/*@>de3dd1*/i_data/*@>de3de4*/[/*@>dde2c9*/0]);
}
/* '<S1037>:1:71' if(sum(delayValue > upper)) */
/*@>ddb5fb*/for (/*@>de857c*/nz = /*@>de857b*/0; /*@>de8586*/nz < /*@>de8584*/18; /*@>de8582*/nz/*@>de8751*/++) {
    /*@>dde482*/x/*@>ddd5e2*/[/*@>dde480*/nz]/*@>ddb5ee*/ = (/*@>de7126*/b_FRNonHRDelaySamples/*@>de7128*/[/*@>de7125*/nz]/*@>ddb5d9*/ > /*@>dde3af*/1324);
}
/*@>dde310*/nz/*@>c695ff*/ = /*@>de7120*/x/*@>de7122*/[/*@>de711f*/0];
/*@>c69603*/for (/*@>de856b*/f_k = /*@>de856a*/0; /*@>de8575*/f_k < /*@>de8573*/17; /*@>de8571*/f_k/*@>de8752*/++) {
    /*@>dde319*/nz/*@>de8753*/ += /*@>de7134*/x/*@>de7136*/[/*@>de7132*/f_k/*@>de7130*/ + /*@>de7133*/1];
}
/*@>c6941b*/if (/*@>dde32c*/nz/*@>c69418*/ != /*@>dde28e*/0) {
    /* '<S1037>:1:72' TranslateError('Value of %<"\%s must be less than or equal to \%d.\', name, upper);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>ddc3a7*/    for (/*@>de855a*/nz = /*@>de8559*/0; /*@>de8564*/nz < /*@>de8562*/46; /*@>de8560*/nz/*@>de8754*/++) {
        /*@>de3e30*/g_data[/*@>dde5dc*/nz]/*@>ddc39a*/ = /*@>de718a*/s/*@>de718c*/[/*@>de7189*/nz];
    }
/*@>ddc475*/    for (/*@>de8549*/nz = /*@>de8548*/0; /*@>de8553*/nz < /*@>de8551*/34; /*@>de854f*/nz/*@>de8755*/++) {
        /*@>de3ea3*/i_data[/*@>dde5f0*/nz]/*@>ddc468*/ = /*@>de7190*/v/*@>de7192*/[/*@>de718f*/nz];
    }
    /*@>de5783*/TranslateError(&/*@>de3e76*/g_data/*@>de3e89*/[/*@>dde2cd*/0], &/*@>de3e8c*/i_data/*@>de3e9f*/[/*@>dde2d1*/0], /*@>dde2d2*/1324);
}
/*  Assign values to TOPs */
/* '<S1037>:1:55' HRcomps = int32(ones(1,numHeadrestComps)); */
/* '<S1037>:1:56' HRDrvDelay = DRHRDrvDelaySamples * HRcomps; */
/* '<S1037>:1:57' HRPaxDelay = DRHRPaxDelaySamples * HRcomps; */
/* '<S1037>:1:58' DRDelay = [DRNonHRDelaySamples, HRDrvDelay, HRPaxDelay]; */
/*@>de5cae*/memcpy(&/*@>de758d*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bc1*/DRDelay/*@>de4778*/[/*@>de4767*/0], &/*@>de477f*/DRNonHRDelaySamples/*@>de4780*/[/*@>de4774*/0], /*@>de4776*/18U/*@>de4783*/ * /*@>de4782*/sizeof(int32_T));
/*@>ddbac4*/for (/*@>de8538*/nz = /*@>de8537*/0; /*@>de8542*/nz < /*@>de8540*/6; /*@>de853e*/nz/*@>de8756*/++) {
    /*@>de7593*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bc4*/DRDelay/*@>ddbaad*/[/*@>dde506*/nz/*@>ddbab2*/ + /*@>dde508*/18]/*@>ddbab7*/ = /*@>dde4f7*/b_FRNonHRDelaySamples_0;
    /*@>de7599*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bc7*/DRDelay/*@>ddbad8*/[/*@>dde510*/nz/*@>ddbadd*/ + /*@>dde512*/24]/*@>ddbae2*/ = /*@>dde4f9*/b_a;
}
/* '<S1037>:1:59' FRSpkrDelay = FREQDelaySamples + [FRNonHRDelaySamples, FRHRDrvDelaySamples, ... */
/* '<S1037>:1:60'     FRHRPaxDelaySamples, FRHRDrvDelaySamples, FRHRPaxDelaySamples]; */
for (nz = 0; nz <= 12; nz += 4) {
    __m128i tmp;
    __m128i tmp_0;
    /* {S!d765}MATLAB Function: '<S1035>/translation' */
    /* {S!d772}MATLAB Function: '<S1035>/translation' */
    tmp = _mm_loadu_si128((const __m128i *)&/*@>de1ad3*/FREQDelaySamples[/*@>de1ad2*/nz]);
    tmp_0 = _mm_loadu_si128((const __m128i *)&/*@>de1af0*/b_FRNonHRDelaySamples[/*@>de1aef*/nz]);
    _mm_storeu_si128(/*@>de28a1*/(__m128i *)&/*@>de75b1*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bd0*/FRSpkrDelay/*@>de1b11*/[/*@>de1b14*/nz], _mm_add_epi32(tmp, tmp_0));
}
/* {S!d767}MATLAB Function: '<S1035>/translation' */
/* {S!d774}MATLAB Function: '<S1035>/translation' */
/*@>ddbdad*/for (/*@>de8518*/nz = 16; /*@>de8522*/nz < 18; /*@>de851e*/nz/*@>de8758*/++) {
    /*@>de75ab*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bcd*/FRSpkrDelay/*@>ddbd98*/[/*@>dde53e*/nz]/*@>ddbda0*/ = /*@>de7163*/FREQDelaySamples/*@>de7165*/[/*@>de7162*/nz]/*@>ddbcf1*/ + /*@>de7169*/b_FRNonHRDelaySamples/*@>de716b*/[/*@>de7168*/nz];
}
/*@>de75a5*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bca*/FRSpkrDelay/*@>ddbdba*/[/*@>dde547*/18]/*@>ddbdc1*/ = /*@>de715d*/FREQDelaySamples/*@>de715f*/[/*@>de715c*/18]/*@>ddbd17*/ + /*@>dde275*/b_FRHRDrvDelaySamples;
/*@>de75b7*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bd3*/FRSpkrDelay/*@>ddbdcb*/[/*@>dde54a*/19]/*@>ddbdd2*/ = /*@>de7174*/FREQDelaySamples/*@>de7176*/[/*@>de7173*/19]/*@>ddbd34*/ + /*@>dde277*/b_FRHRPaxDelaySamples;
/*@>de75bd*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bd6*/FRSpkrDelay/*@>ddbddc*/[/*@>dde54d*/20]/*@>ddbde3*/ = /*@>de7179*/FREQDelaySamples/*@>de717b*/[/*@>de7178*/20]/*@>ddbd51*/ + /*@>dde279*/b_FRHRDrvDelaySamples;
/*@>de75c3*/Model_TranslationEngine64_Medusa5H1Part6_B./*@>de8bd9*/FRSpkrDelay/*@>ddbded*/[/*@>dde550*/21]/*@>ddbdf4*/ = /*@>de717e*/FREQDelaySamples/*@>de7180*/[/*@>de717d*/21]/*@>ddbd6e*/ + /*@>dde27b*/b_FRHRPaxDelaySamples;
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_4193(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(108, 1, fcnProtoType)>
%endfunction
