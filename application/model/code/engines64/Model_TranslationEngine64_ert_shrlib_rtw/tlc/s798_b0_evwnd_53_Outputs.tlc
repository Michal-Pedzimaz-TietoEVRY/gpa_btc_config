%implements s798_b0_evwnd_53_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
int32_T xpageoffset;
char_T c_data[92];
char_T d_data[74];
int8_T nz[6];
boolean_T x[12];
static const char_T e[92] = %<(TLC_STR_CTX(46))>;
static const char_T f[74] = %<(TLC_STR_CTX(47))>;
%closefile localVarDecl
/* {S!d73}MATLAB Function: '<S804>/Trivial Translation' */
/* {S!d76}MATLAB Function: '<S804>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S804>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S816>:1' */
/* '<S816>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/SLC Tuning/Detent Level CS/Trivial Translation': '<S815>:1' */
/* '<S815>:1:3' numCSIn = MedusaFRMConfig.CS_in; */
/* '<S815>:1:4' NumCAEWeights = MedusaFRMConfig.NumTailComp.CS; */
/* '<S815>:1:6' NumRows = MedusaFRMConfig.CS_out; */
/* '<S815>:1:7' NumColumns = numCSIn + NumCAEWeights; */
/* '<S815>:1:8' if(~ MedusaFRMConfig.includeCAE) */
/* '<S815>:1:9' NumColumns = numCSIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S815>:1:13' if(detentGain_CS.Size(1) ~= NumRows || detentGain_CS.Size(2) ~= NumColumns) */
/*@>c66643*/if ((/*@>d3c9ca*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdb3*/DetentLevel_CS_j./*@>d3cdaa*/Size/*@>d3c853*/[/*@>d3c84c*/0]/*@>c6663d*/ != /*@>d3af01*/2.0)/*@>d3cc49*/ || (/*@>d3c9d0*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdb6*/DetentLevel_CS_j./*@>d3cdad*/Size/*@>d3c85c*/[/*@>d3c855*/1]/*@>c6663f*/ != /*@>d3af02*/6.0)) {
    /* '<S815>:1:14' TranslateError('The parameter ''medusa_frm_cs_detent'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d3c544*/memcpy(&/*@>d3c1a3*/c_data[/*@>d3c193*/0], &/*@>d3c1ab*/e/*@>d3c1ac*/[/*@>d3c1a0*/0], /*@>d3c1a2*/92U/*@>d3c1af*/ * /*@>d3c1ae*/sizeof(char_T));
    /*@>d3c42e*/TranslateError(&/*@>d3be78*/c_data/*@>d3be8b*/[/*@>d3af09*/0], /*@>d3af0a*/2.0, /*@>d3af0b*/6.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S815>:1:18' checkValues = (detentGain_CS.Value < 0); */
/*@>d3a485*/for (/*@>d3ccdb*/i = /*@>d3ccda*/0; /*@>d3cce5*/i < /*@>d3cce3*/12; /*@>d3cce1*/i/*@>d3cce9*/++) {
    /*@>d3af48*/x/*@>d3a477*/[/*@>d3af46*/i]/*@>d3a478*/ = (/*@>d3c9d6*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdb9*/DetentLevel_CS_j./*@>d3cdb0*/Value/*@>d3c866*/[/*@>d3c85f*/i]/*@>d3a467*/ < /*@>d3af36*/0.0);
}
/* '<S815>:1:19' if(sum(sum(checkValues))) */
/*@>c666b7*/for (/*@>d3ccca*/i = /*@>d3ccc9*/0; /*@>d3ccd4*/i < /*@>d3ccd2*/6; /*@>d3ccd0*/i/*@>d3ccea*/++) {
    /*@>d3af18*/xpageoffset/*@>c666ad*/ = /*@>d3af27*/i/*@>d3afd9*/ << /*@>d3afd8*/1;
    /*@>d3af92*/nz/*@>d3ac64*/[/*@>d3af94*/i] = (int8_T)(/*@>d3c871*/x/*@>d3c873*/[/*@>d3c86f*/xpageoffset/*@>d3c86d*/ + /*@>d3c870*/1]/*@>d3b41d*/ + /*@>d3c877*/x/*@>d3c879*/[/*@>d3c876*/xpageoffset]);
}
/*@>d3af1a*/xpageoffset/*@>c666ca*/ = /*@>d3c869*/nz/*@>d3c86b*/[/*@>d3c868*/0];
/*@>c666d3*/for (/*@>d3ccb9*/i = /*@>d3ccb8*/0; /*@>d3ccc3*/i < /*@>d3ccc1*/5; /*@>d3ccbf*/i/*@>d3cceb*/++) {
    /*@>d3af23*/xpageoffset/*@>d3ccec*/ += /*@>d3c87f*/nz/*@>d3c881*/[/*@>d3c87d*/i/*@>d3c87b*/ + /*@>d3c87e*/1];
}
/*@>c66649*/if (/*@>d3af03*/xpageoffset/*@>c66642*/ != /*@>d3af05*/0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S815>:1:20' TranslateError('The weights in ''medusa_frm_cs_detent'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d3c546*/memcpy(&/*@>d3c141*/d_data[/*@>d3c131*/0], &/*@>d3c149*/f/*@>d3c14a*/[/*@>d3c13e*/0], /*@>d3c140*/74U/*@>d3c14d*/ * /*@>d3c14c*/sizeof(char_T));
    /*@>d3c432*/TranslateError(&/*@>d3bed6*/d_data/*@>d3bee9*/[/*@>d3af0f*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S815>:1:24' TOP = detentGain_CS.Value(:, 1:numCSIn); */
/*@>d3c548*/memcpy(&/*@>d3c9e2*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdbc*/TOP_kf/*@>d3c0e2*/[/*@>d3c0d1*/0], &/*@>d3c9e8*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdbf*/DetentLevel_CS_j./*@>d3cda7*/Value[0], /*@>d3c0e0*/12U/*@>d3c0f3*/ * /*@>d3c0f2*/sizeof(real_T));
/* '<S815>:1:25' if(~ MedusaFRMConfig.includeCAE) */
/* '<S815>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d3c9ee*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdc2*/TOP_CAE_er/*@>d3ad2c*/[/*@>d3afa0*/0]/*@>d3ad2b*/ = /*@>d3af9f*/0.0;
/*@>d3c9f4*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdc5*/TOP_CAE_er/*@>d3ad35*/[/*@>d3afa4*/1]/*@>d3ad34*/ = /*@>d3afa3*/0.0;
/*@>d3c9fa*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdc8*/TOP_CAE_er/*@>d3ad3e*/[/*@>d3afa8*/2]/*@>d3ad3d*/ = /*@>d3afa7*/0.0;
/*@>d3ca00*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d3cdcb*/TOP_CAE_er/*@>d3ad47*/[/*@>d3afac*/3]/*@>d3ad46*/ = /*@>d3afab*/0.0;
/* {E!d76}End of MATLAB Function: '<S804>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_3372(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(53, 0, fcnProtoType)>
%endfunction
