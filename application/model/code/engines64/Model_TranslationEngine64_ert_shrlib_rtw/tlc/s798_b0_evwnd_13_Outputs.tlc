%implements s798_b0_evwnd_13_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

char_T b_data[68];
static const char_T c[68] = %<(TLC_STR_CTX(5))>;
%closefile localVarDecl
/*  Checks if the parameter satisfies dimensionality requirements */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/Fade Tuning/Backward Downmix Max/Trivial Translation': '<S784>:1' */
/* '<S784>:1:4' if(numel(BackwardDownmixMax.Value) ~= 1) */
/*  Checks if the parameter value follows bound requirements */
/* '<S784>:1:9' if((BackwardDownmixMax.Value < 0) || (BackwardDownmixMax.Value > 1)) */
/*@>c65ace*/if ((rtu_BackwardDownmixMax->Value/*@>c65acb*/ < /*@>cbfce1*/0.0)/*@>c65b04*/ || (rtu_BackwardDownmixMax->Value/*@>c65acc*/ > /*@>cbfce2*/1.0)) {
    /* '<S784>:1:10' TranslateError('The value of ''medusa_backward_downmix_max'' must be between 0 and 1.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>cc041b*/memcpy(&/*@>cc02ba*/b_data[/*@>cc02aa*/0], &/*@>cc02c2*/c/*@>cc02c3*/[/*@>cc02b7*/0], /*@>cc02b9*/68U/*@>cc02c6*/ * /*@>cc02c5*/sizeof(char_T));
    /*@>cc03a5*/TranslateError(&/*@>cc01a1*/b_data/*@>cc01b4*/[/*@>cbfce6*/0]);
}
/* '<S784>:1:13' TOP = BackwardDownmixMax.Value; */
/*@>cc0571*/localB->/*@>cc06ba*/TOP/*@>c65aca*/ = rtu_BackwardDownmixMax->Value;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[13].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(13, 0, 0)>
%endif
%if SLibCG_ArgAccessed(13, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(13, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_TranslationEngine64_TrivialTranslation(\
%assign comma = ""
%if SLibCG_ArgAccessed(13, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_TranslationEngine64_TrivialTranslation", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const bus_double_1_1 *rtu_BackwardDownmixMax\
%assign comma = ", "
%<comma>B_TrivialTranslation_Model_TranslationEngine64_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(13, 0, fcnProtoType)>
%endfunction
