%implements s798_b0_evwnd_68_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T b;
int32_T nz[7];
int32_T i;
int32_T k;
char_T c_data[99];
char_T d_data[81];
boolean_T x[77];
static const char_T e[99] = %<(TLC_STR_CTX(69))>;
static const char_T f[81] = %<(TLC_STR_CTX(70))>;
%closefile localVarDecl
/* {S!d133}MATLAB Function: '<S856>/Trivial Translation' */
/* {S!d136}MATLAB Function: '<S856>/Trivial Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S856>/Tune Variable'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S873>:1' */
/* '<S873>:1:3' f(); */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/Fade Tuning/Downmix Weights Right/Trivial Translation': '<S872>:1' */
/* '<S872>:1:3' numLRIn = MedusaPremixConfig.LR_in; */
/* '<S872>:1:4' NumCAEWeights = MedusaPremixConfig.NumTailComp.LR; */
/* '<S872>:1:6' NumRows = MedusaPremixConfig.LR_out; */
/* '<S872>:1:7' NumColumns = numLRIn + NumCAEWeights; */
/* '<S872>:1:8' if(~ MedusaPremixConfig.includeCAE) */
/* '<S872>:1:9' NumColumns = numLRIn; */
/*  Checks if the parameter satisfies dimensionality requirements */
/* '<S872>:1:13' if(downmix_wts_Right.Size(1) ~= NumRows || downmix_wts_Right.Size(2) ~= NumColumns) */
/*@>c67685*/if ((/*@>d66da6*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d67199*/DownmixWeights_Right./*@>d67190*/Size/*@>d66c26*/[/*@>d66c1f*/0]/*@>c6767f*/ != /*@>d65256*/11.0)/*@>d67016*/ || (/*@>d66dac*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d6719c*/DownmixWeights_Right./*@>d67193*/Size/*@>d66c2f*/[/*@>d66c28*/1]/*@>c67681*/ != /*@>d65257*/7.0)) {
    /* '<S872>:1:14' TranslateError('The parameter ''medusa_premix_downmix_right'' must be a matrix consisting of %<"\%d rows and \%d columns.\', NumRows, NumColumns);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d668f6*/memcpy(&/*@>d66563*/c_data[/*@>d66553*/0], &/*@>d6656b*/e/*@>d6656c*/[/*@>d66560*/0], /*@>d66562*/99U/*@>d6656f*/ * /*@>d6656e*/sizeof(char_T));
    /*@>d667e0*/TranslateError(&/*@>d66236*/c_data/*@>d66249*/[/*@>d6525e*/0], /*@>d6525f*/11.0, /*@>d65260*/7.0);
}
/*  Checks if the parameter values follow bound requirements */
/* '<S872>:1:18' checkValues = (downmix_wts_Right.Value < 0); */
/*@>d647a7*/for (/*@>d670ba*/i = /*@>d670b9*/0; /*@>d670c4*/i < /*@>d670c2*/77; /*@>d670c0*/i/*@>d670c8*/++) {
    /*@>d652b4*/x/*@>d64799*/[/*@>d652b2*/i]/*@>d6479a*/ = (/*@>d66db2*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d6719f*/DownmixWeights_Right./*@>d67196*/Value/*@>d66c39*/[/*@>d66c32*/i]/*@>d64789*/ < /*@>d652a0*/0.0);
}
/* '<S872>:1:19' if(sum(sum(checkValues))) */
/*@>c676fa*/for (/*@>d67098*/i = /*@>d67097*/0; /*@>d670a2*/i < /*@>d670a0*/7; /*@>d6709e*/i/*@>d670c9*/++) {
    int32_T xpageoffset;
    /*@>d6526d*/xpageoffset/*@>c676ef*/ = /*@>d65281*/i/*@>d65341*/ * /*@>d6526c*/11;
    /*@>d652bf*/nz/*@>d64f92*/[/*@>d652c1*/i]/*@>c676f3*/ = /*@>d66c42*/x/*@>d66c44*/[/*@>d66c41*/xpageoffset];
/*@>c676fe*/    for (/*@>d670a9*/k = /*@>d670a8*/0; /*@>d670b3*/k < /*@>d670b1*/10; /*@>d670af*/k/*@>d670ca*/++) {
        /*@>d65be6*/nz/*@>d65be5*/[/*@>d65be8*/i] += /*@>d66c55*/x/*@>d66c57*/[(/*@>d66c51*/xpageoffset/*@>d66c4f*/ + /*@>d66c53*/k)/*@>d66c4e*/ + /*@>d66c54*/1];
    }
}
/*@>d65274*/b/*@>c67713*/ = /*@>d66c3c*/nz/*@>d66c3e*/[/*@>d66c3b*/0];
/*@>c6771c*/for (/*@>d67087*/i = /*@>d67086*/0; /*@>d67091*/i < /*@>d6708f*/6; /*@>d6708d*/i/*@>d670cc*/++) {
    /*@>d6527d*/b/*@>d670cd*/ += /*@>d655b5*/(real_T)/*@>d66c4a*/nz/*@>d66c4c*/[/*@>d66c48*/i/*@>d66c46*/ + /*@>d66c49*/1];
}
/*@>c6768b*/if (/*@>d65258*/b/*@>c67684*/ != /*@>d6525a*/0.0) {
    /*  Results in 0 if all values in the matrix respect the bound requirements */
    /* '<S872>:1:20' TranslateError('The weights in ''medusa_premix_downmix_right'' must be greater than or equal to 0.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d668f8*/memcpy(&/*@>d66500*/d_data[/*@>d664f0*/0], &/*@>d66508*/f/*@>d66509*/[/*@>d664fd*/0], /*@>d664ff*/81U/*@>d6650c*/ * /*@>d6650b*/sizeof(char_T));
    /*@>d667e4*/TranslateError(&/*@>d66294*/d_data/*@>d662a7*/[/*@>d65264*/0]);
}
/*  Assigning the parameter values to respective tuneTOPS */
/* '<S872>:1:24' TOP = downmix_wts_Right.Value(:, 1:numLRIn); */
/*@>d668fa*/memcpy(&/*@>d66dbe*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d671a2*/TOP_ho/*@>d664a1*/[/*@>d66490*/0], &/*@>d66dc4*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d671a5*/DownmixWeights_Right./*@>d6718d*/Value[0], /*@>d6649f*/77U/*@>d664b2*/ * /*@>d664b1*/sizeof(real_T));
/* '<S872>:1:25' if(~ MedusaPremixConfig.includeCAE) */
/* '<S872>:1:26' TOP_CAE = zeros(NumRows, NumCAEWeights); */
/*@>d66905*/memset(&/*@>d66dd0*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d671a8*/TOP_CAE_g/*@>d66613*/[/*@>d6660f*/0], /*@>d6707f*/0, /*@>d66611*/33U/*@>d66619*/ * /*@>d66618*/sizeof(real_T));
/* {E!d136}End of MATLAB Function: '<S856>/Trivial Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_3625(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(68, 0, fcnProtoType)>
%endfunction
