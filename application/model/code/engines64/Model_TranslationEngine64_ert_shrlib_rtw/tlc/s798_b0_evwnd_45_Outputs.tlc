%implements s798_b0_evwnd_45_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T actualBassDelay;
int32_T actualBassDelayDec;
char_T h_data[90];
char_T f_data[85];
char_T g_data[80];
char_T b_data[70];
char_T c_data[68];
char_T d_data[65];
char_T e_data[63];
static const char_T i[70] = %<(TLC_STR_CTX(33))>;
static const char_T j[68] = %<(TLC_STR_CTX(34))>;
static const char_T k[65] = %<(TLC_STR_CTX(35))>;
static const char_T l[63] = %<(TLC_STR_CTX(36))>;
static const char_T m[85] = %<(TLC_STR_CTX(37))>;
static const char_T n[80] = %<(TLC_STR_CTX(38))>;
static const char_T o[90] = %<(TLC_STR_CTX(39))>;
%closefile localVarDecl
/* {S!d41}MATLAB Function: '<S758>/translation' */
/* {S!d44}MATLAB Function: '<S758>/translation' incorporates:
 *  S-Function (TuneVarMEX): '<S753>/Tune Variable'
 *  S-Function (TuneVarMEX): '<S753>/Tune Variable1'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S761>:1' */
/* '<S761>:1:3' f(); */
/* [Param:DEC] */
/* [Param:maxWiggleDelayDec] */
/* [Param:maxNearWiggleDelayDec] */
/* [Param:FDPDelay] */
/* [Param:bandSplitDelay] */
/* [Param:maxBassDelayFull] */
/* [Param:maxBassDelayDec] */
/* [Param:maxAlignmentDelay] */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Delay Tuning/Delay Translation/translation': '<S760>:1' */
/*  Alignment Delay Translation */
/*  This translation computes the alignment delay values for bass and */
/*  decimated-rate upmixed components */
/*  Error Check for incoming tune values */
/* '<S760>:1:21' if(wiggleDelay.Value < 0) */
/*@>c65f8c*/if (/*@>d2dbaf*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e242*/DeciRateWiggleFilterDelaySamples1.Value/*@>c65f84*/ < /*@>d2a753*/0) {
    /* '<S760>:1:22' TranslateError('Value of ''Medusa Wiggle Delay'' must be greater than or equal to zero.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d2d25b*/memcpy(&/*@>d2cab7*/b_data[/*@>d2caa7*/0], &/*@>d2cabf*/i/*@>d2cac0*/[/*@>d2cab4*/0], /*@>d2cab6*/70U/*@>d2cac3*/ * /*@>d2cac2*/sizeof(char_T));
    /*@>d2cfd5*/TranslateError(&/*@>d2c25b*/b_data/*@>d2c26e*/[/*@>d2a76e*/0]);
}
/* '<S760>:1:25' if(nearWiggleDelay.Value < 0) */
/*@>c65f8e*/if (/*@>d2dbb5*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e245*/DeciRateNearWiggleFilterDelaySamples1.Value/*@>c65f85*/ < /*@>d2a754*/0) {
    /* '<S760>:1:26' TranslateError('Value of ''NEAR Wiggle Delay'' must be greater than or equal to zero.'); */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d2d25d*/memcpy(&/*@>d2ca5c*/c_data[/*@>d2ca4c*/0], &/*@>d2ca64*/j/*@>d2ca65*/[/*@>d2ca59*/0], /*@>d2ca5b*/68U/*@>d2ca68*/ * /*@>d2ca67*/sizeof(char_T));
    /*@>d2cfd9*/TranslateError(&/*@>d2c2ac*/c_data/*@>d2c2bf*/[/*@>d2a772*/0]);
}
/* '<S760>:1:29' if(wiggleDelay.Value > maxWiggleDelayDec) */
/*@>c65f90*/if (/*@>d2dbbb*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e248*/DeciRateWiggleFilterDelaySamples1.Value/*@>c65f86*/ > /*@>d2a755*/166) {
    /* '<S760>:1:30' TranslateError('Value of ''Medusa Wiggle Delay'' must be less than or equal to %<"\%d.\', maxWiggleDelayDec);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d2d25f*/memcpy(&/*@>d2ca01*/d_data[/*@>d2c9f1*/0], &/*@>d2ca09*/k/*@>d2ca0a*/[/*@>d2c9fe*/0], /*@>d2ca00*/65U/*@>d2ca0d*/ * /*@>d2ca0c*/sizeof(char_T));
    /*@>d2cfdd*/TranslateError(&/*@>d2c319*/d_data/*@>d2c32c*/[/*@>d2a776*/0], /*@>d2a777*/166);
}
/* '<S760>:1:33' if(nearWiggleDelay.Value > maxNearWiggleDelayDec) */
/*@>c65f92*/if (/*@>d2dbc1*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e24b*/DeciRateNearWiggleFilterDelaySamples1.Value/*@>c65f87*/ > /*@>d2a756*/166) {
    /* '<S760>:1:34' TranslateError('Value of ''NEAR Wiggle Delay'' must be less than or equal to %<"\%d.\', maxNearWiggleDelayDec);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
/*@>d29c88*/    for (/*@>d2e149*/actualBassDelay = /*@>d2e148*/0; /*@>d2e153*/actualBassDelay < /*@>d2e151*/63; /*@>d2e14f*/actualBassDelay/*@>d2e157*/++) {
        /*@>d2c362*/e_data[/*@>d2a851*/actualBassDelay]/*@>d29c7b*/ = /*@>d2d9e0*/l/*@>d2d9e2*/[/*@>d2d9df*/actualBassDelay];
    }
    /*@>d2cfdf*/TranslateError(&/*@>d2c34b*/e_data/*@>d2c35e*/[/*@>d2a77b*/0], /*@>d2a77c*/166);
}
/*  Computing the alignment delay values for bass and mid-range paths */
/*  Medusa wiggle filter latency */
/* '<S760>:1:39' wiggleDelayDec = int32(round(wiggleDelay.Value)); */
/* '<S760>:1:40' wiggleDelayFull = int32(wiggleDelayDec * DEC); */
/*  NEAR wiggle filter latency */
/* '<S760>:1:43' NEARWiggleDelayDec = int32(round(nearWiggleDelay.Value)); */
/* '<S760>:1:44' NEARWiggleDelayFull = int32(NEARWiggleDelayDec * DEC); */
/*  Compute the bass alignment delay (applies to bass components) */
/* '<S760>:1:47' actualBassDelay = FDPDelay + bandSplitDelay/2 + wiggleDelayFull + NEARWiggleDelayFull; */
/*@>d2a758*/actualBassDelay/*@>c65f79*/ = ((/*@>d2dbc7*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e24e*/DeciRateWiggleFilterDelaySamples1.Value/*@>d2a908*/ << /*@>d2af76*/2)/*@>c65fc4*/ + (/*@>d2dbcd*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e251*/DeciRateNearWiggleFilterDelaySamples1.Value/*@>d2a910*/ << /*@>d2af78*/2))/*@>c65fc5*/ + /*@>d2a757*/1603;
/* '<S760>:1:48' actualBassDelayDec = int32(floor(single(actualBassDelay)/DEC)); */
/*@>d2a75a*/actualBassDelayDec/*@>c65f7a*/ = /*@>d2ac38*/(int32_T)/*@>d2cfe1*/floorf(/*@>c660e1*/(real32_T)/*@>d2a798*/actualBassDelay/*@>c660df*/ / /*@>d2a797*/4.0F);
/* '<S760>:1:49' actualBassDelayFull = actualBassDelay - actualBassDelayDec*DEC; */
/*@>d2a75e*/actualBassDelay/*@>d2e158*/ -= /*@>d2a794*/actualBassDelayDec/*@>d2a8fd*/ << /*@>d2af7a*/2;
/*  Compute the mid-range alignment delay (applies to decimated-rate upmixed components) */
/* '<S760>:1:52' actualAlignmentDelay = wiggleDelayDec; */
/*  Error check for outgoing alignment delay values */
/* '<S760>:1:55' if(actualBassDelayFull > maxBassDelayFull) */
/*@>c65f9d*/if (/*@>d2a760*/actualBassDelay/*@>c65f89*/ > /*@>d2a762*/3) {
    /* '<S760>:1:56' TranslateError('Value of ''Medusa Bass Delay'' on decimated-rate path exceeds the maximum value of %<"\%d.\', maxBassDelayFull);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d2d261*/memcpy(&/*@>d2c968*/f_data[/*@>d2c958*/0], &/*@>d2c970*/m/*@>d2c971*/[/*@>d2c965*/0], /*@>d2c967*/85U/*@>d2c974*/ * /*@>d2c973*/sizeof(char_T));
    /*@>d2cfe5*/TranslateError(&/*@>d2c3df*/f_data/*@>d2c3f2*/[/*@>d2a780*/0], /*@>d2a781*/3.0);
}
/* '<S760>:1:59' if(actualBassDelayDec > maxBassDelayDec) */
/*@>c65f9f*/if (/*@>d2a763*/actualBassDelayDec/*@>c65f8a*/ > /*@>d2a765*/733) {
    /* '<S760>:1:60' TranslateError('Value of ''Medusa Bass Delay'' on full-rate path exceeds the maximum value of %<"\%d.\', maxBassDelayDec);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d2d263*/memcpy(&/*@>d2c90d*/g_data[/*@>d2c8fd*/0], &/*@>d2c915*/n/*@>d2c916*/[/*@>d2c90a*/0], /*@>d2c90c*/80U/*@>d2c919*/ * /*@>d2c918*/sizeof(char_T));
    /*@>d2cfe9*/TranslateError(&/*@>d2c43d*/g_data/*@>d2c450*/[/*@>d2a785*/0], /*@>d2a786*/733);
}
/* '<S760>:1:63' if(actualAlignmentDelay > maxAlignmentDelay) */
/*@>c65fa1*/if (/*@>d2dbd3*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e254*/DeciRateWiggleFilterDelaySamples1.Value/*@>c65f8b*/ > /*@>d2a766*/166) {
    /* '<S760>:1:64' TranslateError('Value of ''Medusa Alignment Delay'' on decimated-rate path exceeds the maximum value of %<"\%d.\', maxAlignmentDelay);"> */
    /* TRANSLATEERROR (For use in Functions triggered by TranslationTrigger blocks.) */
    /* Print error message during tune data translation. */
    /*   Do not include a final newline as this behavior is already built in. */
    /*   Note that escape sequences such as '\n' will not work here. To emit */
    /*   special characters, pass them in as arguments to %<"\%c or \%s format"> */
    /*   specifiers. */
    /*    Copyright 2018-2019 Bose Corporation */
    /* 'TranslateError:10' coder.extrinsic('gcb') */
    /* 'TranslateError:11' coder.extrinsic('warning') */
    /* 'TranslateError:12' coder.allowpcode('plain'); */
    /*  enable code generation from p-file */
    /* 'TranslateError:14' if (coder.target('MATLAB')) */
    /* 'TranslateError:18' if (coder.target('Sfun')) */
    /* 'TranslateError:21' else */
    /* 'TranslateError:22' count = numel(varargin); */
    /* 'TranslateError:23' fixedArgs = varargin; */
    /* 'TranslateError:24' for i=1:count */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:26' fixedArgs{i} = [varargin{i} char(0)]; */
    /* 'TranslateError:25' if (ischar(varargin{i})) */
    /* 'TranslateError:29' coder.ceval('TranslateError',fixedArgs{:}); */
    /*@>d2d265*/memcpy(&/*@>d2c8b2*/h_data[/*@>d2c8a2*/0], &/*@>d2c8ba*/o/*@>d2c8bb*/[/*@>d2c8af*/0], /*@>d2c8b1*/90U/*@>d2c8be*/ * /*@>d2c8bd*/sizeof(char_T));
    /*@>d2cfed*/TranslateError(&/*@>d2c46e*/h_data/*@>d2c481*/[/*@>d2a78a*/0], /*@>d2a78b*/166);
}
/*  Assigning outputs */
/* '<S760>:1:68' bassDelayFull = actualBassDelayFull; */
/*@>d2dbd9*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e257*/bassDelayFull/*@>c65f80*/ = /*@>d2a767*/actualBassDelay;
/* '<S760>:1:69' bassDelayDec = actualBassDelayDec; */
/*@>d2dbdf*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e25a*/bassDelayDec/*@>c65f82*/ = /*@>d2a769*/actualBassDelayDec;
/* '<S760>:1:71' alignmentDelay = actualAlignmentDelay; */
/*@>d2dbe5*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e25d*/alignmentDelay/*@>c65f83*/ = /*@>d2dbeb*/Model_TranslationEngine64_Medusa5H1Part3_B./*@>d2e260*/DeciRateWiggleFilterDelaySamples1.Value;
/* {E!d44}End of MATLAB Function: '<S758>/translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_141_2888(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(45, 0, fcnProtoType)>
%endfunction
