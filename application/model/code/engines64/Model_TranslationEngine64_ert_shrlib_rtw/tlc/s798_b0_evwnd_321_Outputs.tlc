%implements s798_b0_evwnd_321_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
%closefile localVarDecl
/* {S!d2257}MATLAB Function: '<S1099>/Channel_Ramper_Translation' */
/* {S!d2260}MATLAB Function: '<S1099>/Channel_Ramper_Translation' incorporates:
 *  S-Function (TuneVarMEX): '<S1099>/TuneVarChannelRamperMap'
 */
/*  Invoke the function trigger output */
/* MATLAB Function 'TranslateTrigger/tfunc': '<S1105>:1' */
/* '<S1105>:1:3' f(); */
/*  %<"\% inputs"> */
/*  parameters */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/SleepingBeauty/SleepingBeauty/Enabled/FadeRamperFR/InnerLink/Channel_Ramper_Translation': '<S1100>:1' */
/*  Verifies if each channel is assigned to either the 'Front'(1) or 'Rear'(2) */
/*  groups.  */
/* '<S1100>:1:7' argName = 'Fade'; */
/*  Ensure each channel is present in the map */
/* '<S1100>:1:10' inputMapWidth = numel(TuneChanRampMap.Value); */
/* '<S1100>:1:11' if (inputMapWidth ~= channelCount) */
/*  Verify that the channels are assigned to valid group numbers */
/* '<S1100>:1:19' if (numel(unique(TuneChanRampMap.Value)) > MaskNumChannelGroups + 1) */
/*  Ensure that a value of 0 was not entered as a ramper */
/* '<S1100>:1:26' if (sum(TuneChanRampMap.Value == 0) > 0) */
/*  Output */
/* '<S1100>:1:33' ChanRampMap = int32(TuneChanRampMap.Value); */
/*@>f58520*/for (/*@>f59bf7*/i = /*@>f59bf6*/0; /*@>f59c01*/i < /*@>f59bff*/22; /*@>f59bfd*/i/*@>f59c05*/++) {
    /*@>f59a1d*/Model_TranslationEngine64_B./*@>f59c2f*/ChanRampMap_j/*@>f585a1*/[/*@>f58f00*/i]/*@>f5850f*/ = /*@>f58f07*/(int32_T)%<SLibCG_DumpSSCode("/*@[f59bb7*/",(SLibCGCallSubFcn("rt_roundd_snf", ["/*@>f59c4e*/Model_TranslationEngine64_B./*@>f59c4d*/ChannelToRamperMap_g./*@>f59c4c*/Value/*@>f59c4b*/[/*@>f59c51*/i]"], 321, 1, 0)),"/*@]*/")>;
}
/* {E!d2260}End of MATLAB Function: '<S1099>/Channel_Ramper_Translation' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void FuncTranslation_Model_176_136_99(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(321, 1, fcnProtoType)>
%endfunction
