%implements s1068_b0_g3vnd_23_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T k;
real32_T currentgain[77];
real32_T diff[77];
%closefile localVarDecl
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/Full Mixing Matrix_Left/Ramper/control': '<S1079>:1' */
/* '<S1079>:1:10' dim_rgain = size(Premix_currentGain_Left); */
/* '<S1079>:1:11' rgain_SILENT_GAIN_mat = (MedusaPremixConfig.rgain_SILENT_GAIN)*ones(dim_rgain); */
/*  Step 1: FREEZE the gain ramper so that we can perform calculations based */
/*  on the current gain value. */
/* '<S1079>:1:15' Premix_Freeze_Left(1) = true; */
/*  freeze the gain */
/*  Step 2: Nudge the gain values a bit if they are sitting at zero. */
/*  When this control set goes live, ensure that the current gain will move. */
/*  If current gain is zero, replace with a value very close to zero. What we */
/*  really want is a value which is on the edge of perception - not too small */
/*  or large. If the value is too small, we'll waste some of our ramp time */
/*  in perceived silence. If the value is too large, the audio will lurch */
/*  into perceptability at the start of the ramp. */
/* '<S1079>:1:24' currentgain = max(Premix_currentGain_Left, rgain_SILENT_GAIN_mat); */
/* '<S1079>:1:25' targetGain  = max(target_gains_linear, rgain_SILENT_GAIN_mat); */
/*  Step 3a: If a ramp time in milliseconds is provided, ignore the ramp */
/*  rate in dB/sec (if also provided), otherwise calculate a new ramp time */
/*  that matches the slope. */
/* '<S1079>:1:30' rampTime_ms = single(rampTime)*ones(dim_rgain); */
/*@>10bf441*/for (/*@>11838c0*/k = /*@>11838bf*/0; /*@>11838ca*/k < /*@>11838c8*/77; /*@>11838c6*/k/*@>11838ce*/++) {
    /*@>1181d82*/currentgain/*@>1180d75*/[/*@>1181d84*/k]/*@>10bf448*/ = /*@>1183070*/fmaxf(/*@>11833c4*/rtd_Premix_currentGain_Left/*@>11833c6*/[/*@>11833c2*/k], /*@>1181d69*/1.1920929E-7F);
    /*@>1181d8a*/rtd_Premix_rampCoeff_Left/*@>1180db3*/[/*@>1181d8c*/k]/*@>10bf454*/ = /*@>1183072*/fmaxf(/*@>11833cb*/rtu_target_gains_linear/*@>11833cd*/[/*@>11833c9*/k], /*@>1181d6a*/1.1920929E-7F);
    /*@>1181d94*/diff/*@>1180de4*/[/*@>1181d92*/k]/*@>1180de5*/ = /*@>1180dda*/(real32_T)/*@>1181d90*/rtu_rampTime;
}
/* '<S1079>:1:32' if(~rampTime) */
/*@>10bf3f3*/if (/*@>1181d74*/rtu_rampTime/*@>10bf420*/ == /*@>1181d5d*/0U) {
    /* '<S1079>:1:33' currentGain_db = 20*log10(currentgain); */
    /* '<S1079>:1:34' targetGain_db = 20*log10(targetGain); */
    /* '<S1079>:1:35' diff = abs(currentGain_db - targetGain_db); */
    /* '<S1079>:1:36' rampTime_ms = diff / single(rampRate) * 1000; */
/*@>1180e3d*/    for (/*@>11838af*/k = /*@>11838ae*/0; /*@>11838b9*/k < /*@>11838b7*/77; /*@>11838b5*/k/*@>11838cf*/++) {
        /*@>1181e02*/diff/*@>118170a*/[/*@>1181e04*/k] = /*@>118307a*/qhmath_div_f(/*@>1183078*/qhmath_abs_f(/*@>118228b*/20.0F/*@>118228a*/ * /*@>1183074*/qhmath_log10_f(/*@>11833d1*/currentgain/*@>11833d3*/[/*@>11833d0*/k])/*@>1182289*/ - /*@>118228f*/20.0F/*@>118228e*/ * /*@>1183076*/qhmath_log10_f(/*@>11833d8*/rtd_Premix_rampCoeff_Left/*@>11833da*/[/*@>11833d6*/k])), /*@>1182215*/(real32_T)/*@>1182217*/rtu_rampRate)/*@>1182210*/ * /*@>1182218*/1000.0F;
    }
}
/*  Step 3b: QUANTIZE the desired ramp time to our FrameSize. Also retrieve  */
/*  the whole number of frames required to best match requested ramp time. */
/*  Ensure that at least one frame is used. The frame size will therefore */
/*  determine the steepest ramp (i.e. within one frame you can go anywhere). */
/* '<S1079>:1:43' quantum_ms = 1000 * (MedusaPremixConfig.frame_size) / (MedusaPremixConfig.sample_rate_in_hertz); */
/* '<S1079>:1:44' numFrames = rampTime_ms / quantum_ms; */
/* '<S1079>:1:45' numFrames = max (1, round(numFrames)); */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S1079>:1:59' factor = log( targetGain ./ currentgain ); */
/* '<S1079>:1:60' RampCoef = exp(factor ./ numFrames); */
/*  Output control signals */
/* '<S1079>:1:63' Premix_frameCount_Left  = int32(numFrames); */
/* '<S1079>:1:64' Premix_rampCoeff_Left   = single(RampCoef); */
/* '<S1079>:1:65' Premix_targetGain_Left  = target_gains_linear; */
/* '<S1079>:1:66' Premix_currentGain_Left = currentgain; */
/*@>1180f18*/for (/*@>118389e*/k = /*@>118389d*/0; /*@>11838a8*/k < /*@>11838a6*/77; /*@>11838a4*/k/*@>11838d0*/++) {
    real32_T currentgain_0;
    real32_T diff_0;
    real32_T numFrames;
    currentgain_0 = /*@>11833de*/currentgain/*@>11833e0*/[/*@>11833dd*/k];
    diff_0/*@>10bf481*/ = /*@>118307e*/roundf(/*@>118307c*/qhmath_div_f(/*@>11833e4*/diff/*@>11833e6*/[/*@>11833e3*/k], /*@>1182882*/0.722222209F));
    numFrames/*@>10bf48d*/ = /*@>1183080*/fmaxf(/*@>1181d68*/1.0F, diff_0);
    /*@>1181dba*/rtd_Premix_rampCoeff_Left/*@>118112d*/[/*@>1181db8*/k]/*@>118112e*/ = /*@>1183082*/qhmath_div_f(/*@>11833eb*/rtd_Premix_rampCoeff_Left/*@>11833ed*/[/*@>11833e9*/k], currentgain_0);
    /*@>1181dc0*/rtd_Premix_rampCoeff_Left/*@>1181175*/[/*@>1181dc2*/k]/*@>10bf496*/ = /*@>1183084*/qhmath_log_f(/*@>11833f2*/rtd_Premix_rampCoeff_Left/*@>11833f4*/[/*@>11833f0*/k]);
    /*@>1181dca*/rtd_Premix_rampCoeff_Left/*@>11811c1*/[/*@>1181dc8*/k]/*@>11811c2*/ = /*@>1183086*/qhmath_div_f(/*@>11833f9*/rtd_Premix_rampCoeff_Left/*@>11833fb*/[/*@>11833f7*/k], numFrames);
    /*@>1181dd0*/rtd_Premix_rampCoeff_Left/*@>1181209*/[/*@>1181dd2*/k]/*@>10bf49f*/ = /*@>1183088*/qhmath_exp_f(/*@>1183400*/rtd_Premix_rampCoeff_Left/*@>1183402*/[/*@>11833fe*/k]);
    /*@>1181dd6*/rtd_Premix_frameCount_Left/*@>1181241*/[/*@>1181dd4*/k]/*@>1181242*/ = /*@>1181e41*/(int32_T)/*@>118308a*/roundf(numFrames);
    /*@>1181ddc*/rtd_Premix_targetGain_Left/*@>1181289*/[/*@>1181dde*/k]/*@>11805d4*/ = /*@>1183407*/rtu_target_gains_linear/*@>1183409*/[/*@>1183405*/k];
    /*@>1181de2*/rtd_Premix_currentGain_Left/*@>11812bc*/[/*@>1181de0*/k]/*@>11812bd*/ = currentgain_0;
    /*@>11827b8*/diff/*@>11827b7*/[/*@>11827ba*/k] = diff_0;
}
/*  unfreeze the gain */
/* '<S1079>:1:69' Premix_Freeze_Left(1) = false; */
*rtd_Premix_Freeze_Left/*@>10bf3e2*/ = /*@>1181d5e*/false;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[23].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(23, 0, 0)>
%endif
%if SLibCG_ArgAccessed(23, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(23, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_control_p(\
%assign comma = ""
%if SLibCG_ArgAccessed(23, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_control_p", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const real32_T rtu_target_gains_linear[77]\
%assign comma = ", "
%<comma>uint32_T rtu_rampRate\
%assign comma = ", "
%<comma>uint32_T rtu_rampTime\
%assign comma = ", "
%<comma>boolean_T *rtd_Premix_Freeze_Left\
%assign comma = ", "
%<comma>real32_T rtd_Premix_currentGain_Left[77]\
%assign comma = ", "
%<comma>int32_T rtd_Premix_frameCount_Left[77]\
%assign comma = ", "
%<comma>real32_T rtd_Premix_rampCoeff_Left[77]\
%assign comma = ", "
%<comma>real32_T rtd_Premix_targetGain_Left[77]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(23, 0, fcnProtoType)>
%endfunction
