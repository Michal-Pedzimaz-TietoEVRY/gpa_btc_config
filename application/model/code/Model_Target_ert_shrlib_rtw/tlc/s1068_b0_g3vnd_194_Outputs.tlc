%implements s1068_b0_g3vnd_194_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T quantum_ms;
real32_T x;
%closefile localVarDecl
%assign _modelSS = ""

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[530], "Output",1)
/* {S!d1711}MATLAB Function: '<S2219>/calculate_ramp_rate' */
/* {S!d1716}MATLAB Function: '<S2219>/calculate_ramp_rate' */
/*  Invoke the function trigger output */
/* MATLAB Function 'RTC/REQ': '<S2228>:1' */
/* '<S2228>:1:3' go(); */
%if SLibCG_SystemFcnArgAccessed("Model_Target_calculate_ramp_rate",530,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCG_DumpSSCode("/*@[131d106*/",SLibCGIRGenReusableSysCall("Model_Target_calculate_ramp_rate", ["%<_modelSS>", "%<SLibCG_DumpSSCode("/*@[131d3a9*/",(SLibCG_BOCSC(533, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[131d3bb*/",(SLibCG_BOCSC(534, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[131d3cd*/",(SLibCG_BOCSC(539, 1, "", -1, "", 0)),"/*@]*/")>", "&/*@>131d3e1*/Model_Target_PostProcess_B./*@>131d3e0*/sf_calculate_ramp_rate_g"], 530, 5, 6, 1, 6, 916),"/*@]*/")>\
%assign ss = ::CompiledModel.System[530]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
/* {S!d1713}MATLAB Function: '<S2220>/get_ramp_coeffs' */
/* {S!d1718}MATLAB Function: '<S2220>/get_ramp_coeffs' incorporates:
 *  S-Function (AudioStats_MEX): '<S2220>/Audio Stats'
 */
/*@>131c38c*/x/*@>10c6c47*/ = /*@>131cdf8*/Model_Target_PostProcess_B./*@>131d332*/sf_calculate_ramp_rate_g./*@>131d32f*/ramptime;
/* MATLAB Function 'MuteRamper/get_ramp_coeffs': '<S2233>:1' */
/* '<S2233>:1:5' targetLinearGain = single(1.0); */
%<SLibCG_DumpSSCode("/*@[131d13f*/",SLibCG_SetCSCDW(387, 1, "", -1, "", 0, "/*@>131d3f4*/1.0F"),"/*@]*/")>\
/* '<S2233>:1:7' if muteSwitch */
/*@>10c6c4f*/if (%<SLibCG_DumpSSCode("/*@[131d121*/",(SLibCG_SE(SLibCG_BOCSC(532, 1, "", -1, "", 0))),"/*@]*/")>/*@>10c6c4b*/ != /*@>131c37e*/0U) {
    /* '<S2233>:1:8' targetLinearGain = single(max(0, silentGainLinear)); */
%<SLibCG_DumpSSCode("/*@[131d15b*/",SLibCG_SetCSCDW(387, 1, "", -1, "", 0, "/*@>131d406*/4.7315126E-7F"),"/*@]*/")>\
}
/*  %<"\% Nudge the gain values a bit if they are sitting at zero."> */
/*  %<"\% If current gain is zero, replace with a value very close to zero. What we"> */
/*  %<"\% really want is a value which is on the edge of perception - not too small"> */
/*  %<"\% or large. If the value is too small, we\'ll waste some of our ramp time"> */
/*  %<"\% in perceived silence. If the value is too large, the audio will lurch"> */
/*  %<"\% into perceptability at the start of the ramp."> */
/*  %<"\% So, \'max(currentGainValue, silentGainLinear)\' & \'max(TargetGain, silentGainLinear)\' are"> */
/*  %<"\% used in equations"> */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain difference between target and current value. */
/*  Equivalent ramp rate is therefore calculated as follows: */
/* '<S2233>:1:24' if (rampingRate_dBPerSec) */
/*@>10c6c5d*/if (/*@>131ce03*/Model_Target_PostProcess_B./*@>131d338*/sf_calculate_ramp_rate_g./*@>131d335*/rampRate/*@>10c6c4d*/ != /*@>131c381*/0.0F) {
    /* '<S2233>:1:25' currentGain_db = 20*log10(max(currentGainValue, silentGainLinear)); */
    /* '<S2233>:1:26' targetGain_db = 20*log10( targetLinearGain); */
    /* '<S2233>:1:27' diff = abs(currentGain_db - targetGain_db); */
    /* '<S2233>:1:28' rampingTime_ms = diff / single(rampingRate_dBPerSec) * 1000; */
    /*@>131c38a*/x/*@>10c6c7f*/ = /*@>131cb7b*/qhmath_div_f(/*@>131cb79*/qhmath_abs_f(/*@>131c3ab*/20.0F/*@>131c40a*/ * /*@>131cb75*/qhmath_log10_f(/*@>131cb73*/fmaxf(/*@>131ce09*/Model_Target_PostProcess_B./*@>131d33b*/DataStoreRead, /*@>131c3c4*/4.7315126E-7F))/*@>10c6ca6*/ - /*@>131c3ac*/20.0F/*@>131c40e*/ * /*@>131cb77*/qhmath_log10_f(%<SLibCG_DumpSSCode("/*@[131d175*/",(SLibCG_CSCDW(387, 1, "", -1, "", 0)),"/*@]*/")>)), /*@>131ce14*/Model_Target_PostProcess_B./*@>131d341*/sf_calculate_ramp_rate_g./*@>131d33e*/rampRate)/*@>131c3fd*/ * /*@>131c3ad*/1000.0F;
}
/* '<S2233>:1:31' quantum_ms = 1000 * frameSize / Fs_Hz; */
/*@>131c382*/quantum_ms/*@>10c6c84*/ = /*@>131cb7d*/qhmath_div_f(/*@>131c3c3*/32000.0F, %<SLibCG_DumpSSCode("/*@[131d197*/",(SLibCG_Expr(916, 0, 0, 1, "", -1, "", 0)),"/*@]*/")>);
/* '<S2233>:1:32' numFrames = rampingTime_ms / quantum_ms; */
/*  Do a ceil rather than a round to insure that we create enough */
/*  frames. i.e. a fraction of a frame is promoted to an addition frame */
/* '<S2233>:1:35' nFrames = max (1, ceil(numFrames)); */
%<SLibCG_DumpSSCode("/*@[131d20f*/",SLibCG_SetCSCDW(386, 1, "", -1, "", 0, "/*@>131d419*/fmaxf(/*@>131d41a*/1.0F, /*@>131d41c*/qhmath_ceil_f(/*@>131d41e*/qhmath_div_f(/*@>131d41f*/x, /*@>131d420*/quantum_ms)))"),"/*@]*/")>\
/* '<S2233>:1:36' quantized_rampTime_ms = nFrames * quantum_ms; */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S2233>:1:50' ramping_coeff= exp(log( targetLinearGain /max(currentGainValue, silentGainLinear) ) / (Fs_Hz * quantized_rampTime_ms / 1000)); */
/*@>131ce1a*/Model_Target_PostProcess_B./*@>131d344*/ramping_coeff/*@>10c6c88*/ = /*@>131cb8d*/qhmath_div_f(/*@>131cb89*/qhmath_log_f(/*@>131cb87*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[131d1f1*/",(SLibCG_CSCDW(387, 1, "", -1, "", 0)),"/*@]*/")>, /*@>131cb85*/fmaxf(/*@>131ce20*/Model_Target_PostProcess_B./*@>131d347*/DataStoreRead, /*@>131c3c5*/4.7315126E-7F))), /*@>131cb8b*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[131d1d5*/",(SLibCG_SE(SLibCG_CSCDW(386, 1, "", -1, "", 0))),"/*@]*/")>/*@>131c3e7*/ * /*@>131c3a4*/quantum_ms/*@>131c3e3*/ * %<SLibCG_DumpSSCode("/*@[131d1b9*/",(SLibCG_SE(SLibCG_Expr(916, 0, 0, 1, "", -1, "", 0))),"/*@]*/")>, /*@>131c3af*/1000.0F));
/*@>131ce26*/Model_Target_PostProcess_B./*@>131d34a*/ramping_coeff/*@>10c6c8e*/ = /*@>131cb8f*/qhmath_exp_f(/*@>131ce2c*/Model_Target_PostProcess_B./*@>131d34d*/ramping_coeff);
/* {E!d1718}End of MATLAB Function: '<S2220>/get_ramp_coeffs' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void HandleReqPostProcessMuteSet(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(194, 0, fcnProtoType)>
%endfunction
