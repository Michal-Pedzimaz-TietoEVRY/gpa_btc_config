%implements s1068_b0_g3vnd_62_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T y;
%closefile localVarDecl
/*@>11ff91a*/y/*@>10c432f*/ = /*@>11ff923*/rtu_data;
/*  %<"\% inputs"> */
/*  parameters */
/* MATLAB Function 'ModelPreAmp/PreAmpPart1/Bass/ramp parameters': '<S1536>:1' */
/*  Ramp time mentioned in the RTC message gets priority over the tune */
/*  variable. Boundary conditions are also included based on BDSP values. */
/*  If neither ramp time nor rate are given in the RTC message (i.e. both */
/*  = 0), then the ramp time in the Tune variable is taken as the default */
/*  value for that message. */
/* '<S1536>:1:11' ramptime = single(data); */
/* '<S1536>:1:12' rampRate = single(0); */
/*@>11fff2f*/localB->/*@>1200196*/rampRate/*@>10c4331*/ = /*@>11ff91e*/0.0F;
/* '<S1536>:1:14' if (rampRateRTC) */
/*@>10c433c*/if (/*@>11ff925*/rtu_rampRateRTC/*@>10c4333*/ != /*@>11ff910*/0U) {
    /* '<S1536>:1:15' rampRate = single(rampRateRTC); */
    /* '<S1536>:1:16' rampRate = max(rampRateBounds(1), rampRate); */
    /* '<S1536>:1:17' rampRate = min(rampRateBounds(2), rampRate); */
    /*@>11fff36*/localB->/*@>1200199*/rampRate/*@>10c4350*/ = /*@>11ffdb0*/fminf(/*@>10c4351*/(real32_T)/*@>11ffecf*/rtp_rampRateBounds/*@>11ffed1*/[/*@>11ffecd*/1], /*@>11ffdae*/fmaxf(/*@>10c4367*/(real32_T)/*@>11ffed5*/rtp_rampRateBounds/*@>11ffed7*/[/*@>11ffed3*/0], /*@>10c4377*/(real32_T)/*@>11ff929*/rtu_rampRateRTC));
}
/* '<S1536>:1:19' if (rampTimeRTC) */
/*@>10c433e*/if (/*@>11ff927*/rtu_rampTimeRTC/*@>10c4334*/ != /*@>11ff911*/0U) {
    /* '<S1536>:1:20' ramptime = single(rampTimeRTC); */
    /*@>11ff918*/y/*@>10c4332*/ = /*@>10c4335*/(real32_T)/*@>11ff92b*/rtu_rampTimeRTC;
}
/* '<S1536>:1:22' ramptime = max(rampTimeBounds(1), ramptime); */
/* '<S1536>:1:23' ramptime = min(rampTimeBounds(2), ramptime); */
/*@>11fff3d*/localB->/*@>120019c*/ramptime/*@>10c4353*/ = /*@>11ffdb4*/fminf(/*@>10c4354*/(real32_T)/*@>11ffedb*/rtp_rampTimeBounds/*@>11ffedd*/[/*@>11ffed9*/1], /*@>11ffdb2*/fmaxf(/*@>10c436e*/(real32_T)/*@>11ffee1*/rtp_rampTimeBounds/*@>11ffee3*/[/*@>11ffedf*/0], /*@>11ff91c*/y));
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[62].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(62, 0, 0)>
%endif
%if SLibCG_ArgAccessed(62, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(62, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_rampparameters_g(\
%assign comma = ""
%if SLibCG_ArgAccessed(62, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_rampparameters_g", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>real32_T rtu_data\
%assign comma = ", "
%<comma>uint32_T rtu_rampTimeRTC\
%assign comma = ", "
%<comma>uint32_T rtu_rampRateRTC\
%assign comma = ", "
%<comma>const real_T rtp_rampRateBounds[2]\
%assign comma = ", "
%<comma>const real_T rtp_rampTimeBounds[2]\
%assign comma = ", "
%<comma>B_rampparameters_Model_Target_k_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(62, 0, fcnProtoType)>
%endfunction
