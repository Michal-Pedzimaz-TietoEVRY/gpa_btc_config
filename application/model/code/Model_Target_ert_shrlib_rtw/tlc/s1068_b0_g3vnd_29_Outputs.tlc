%implements s1068_b0_g3vnd_29_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
int32_T tmp;
%closefile localVarDecl
/*  #codegen */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/Full Mixing Matrix_Left/Surround Level Control/Target Gain Computation': '<S973>:1' */
/*  If CAE is supported and enabled, replace the tail weights with their CAE counterparts */
/* '<S973>:1:6' if(MedusaFRMConfig.includeCAE == 1 && CAE_Enable == 1) */
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* '<S973>:1:20' targetGain = MedusaPremixGainComputation(minGain_Left, detentGain_Left, maxGain_Left, interpolation_method, surr_level, MedusaFRMConfig); */
/*  #codegen */
/*  Extracting the surround level indices correponding to the anchor */
/*  points from the specified Config Struct */
/* 'MedusaPremixGainComputation:5' midIndex = ceil(length(ConfigStruct.granularity)/2); */
/* 'MedusaPremixGainComputation:7' min_level = ConfigStruct.granularity(1); */
/* 'MedusaPremixGainComputation:8' detent_level = ConfigStruct.granularity(midIndex); */
/* 'MedusaPremixGainComputation:9' max_level = ConfigStruct.granularity(end); */
/*  Performing bound check on Surround Level value */
/* 'MedusaPremixGainComputation:12' surroundLevel = min(surroundLevel, max_level); */
/*@>119a9e8*/if (/*@>119a124*/rtu_surr_level/*@>10bd9b9*/ > /*@>119a11e*/255U) {
    /*@>119a9ec*/i/*@>119a9eb*/ = /*@>119be3d*/255;
} else {
    /*@>119a1a0*/i/*@>1199f4f*/ = /*@>119a4c8*/(int32_T)/*@>119a126*/rtu_surr_level;
}
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* 'MedusaPremixGainComputation:16' switch surroundLevel */
/*@>119a9f6*/if (/*@>119a6ef*/(uint32_T)/*@>119a6f1*/i/*@>119a6ee*/ == /*@>119a6f2*/0U) {
    /*@>119a9fa*/tmp/*@>119a9f9*/ = /*@>119be40*/0;
} else /*@>119a9fb*/if (/*@>119a6f6*/(uint32_T)/*@>119a6f8*/i/*@>119a6f5*/ == /*@>119a6f9*/128U) {
    /*@>119a9ff*/tmp/*@>119a9fe*/ = /*@>119be43*/1;
} else /*@>119aa00*/if (/*@>119a6fd*/(uint32_T)/*@>119a6ff*/i/*@>119a6fc*/ == /*@>119a700*/255U) {
    /*@>119aa04*/tmp/*@>119aa03*/ = /*@>119be49*/2;
} else {
    /*@>119a9ef*/tmp/*@>119a9f1*/ = /*@>119be46*/-1;
}
/*@>10bd8e4*/switch (/*@>119a9f3*/tmp) {
  case /*@>119a10a*/0:
    /* 'MedusaPremixGainComputation:17' case min_level */
    /* 'MedusaPremixGainComputation:18' targetGain = minGain; */
    /*@>119b73a*/memcpy(&/*@>119b371*/rtd_FRM_SLCGain_Left/*@>119b372*/[/*@>119b328*/0], &/*@>119b37b*/rtu_minGain_Left/*@>119b37c*/[/*@>119b335*/0], /*@>119b36f*/30U/*@>119b37f*/ * /*@>119b37e*/sizeof(real32_T));
    /*  when surround index corresponds to 'min' anchor point */
    break;
  case /*@>119a10b*/1:
    /* 'MedusaPremixGainComputation:19' case detent_level */
    /* 'MedusaPremixGainComputation:20' targetGain = detentGain; */
    /*@>119b73c*/memcpy(&/*@>119b392*/rtd_FRM_SLCGain_Left/*@>119b393*/[/*@>119b344*/0], &/*@>119b39c*/rtu_detentGain_Left/*@>119b39d*/[/*@>119b351*/0], /*@>119b390*/30U/*@>119b3a0*/ * /*@>119b39f*/sizeof(real32_T));
    /*  when surround index corresponds to 'detent' anchor point */
    break;
  case /*@>119a10c*/2:
    /* 'MedusaPremixGainComputation:21' case max_level */
    /* 'MedusaPremixGainComputation:22' targetGain = maxGain; */
    /*@>119b73e*/memcpy(&/*@>119b3b3*/rtd_FRM_SLCGain_Left/*@>119b3b4*/[/*@>119b360*/0], &/*@>119b3bd*/rtu_maxGain_Left/*@>119b3be*/[/*@>119b36d*/0], /*@>119b3b1*/30U/*@>119b3c1*/ * /*@>119b3c0*/sizeof(real32_T));
    /*  when surround index corresponds to 'max' anchor point */
    break;
  default: {
    real32_T position;
    /* 'MedusaPremixGainComputation:23' otherwise */
    /* 'MedusaPremixGainComputation:24' position = (single(surroundLevel) - min_level)/(max_level - min_level); */
    /*@>119a10f*/position/*@>10bd948*/ = /*@>119b608*/qhmath_div_f(/*@>119a4d7*/(real32_T)/*@>119a11c*/i, /*@>119a10e*/255.0F);
    /*  when surround index lies in between the anchor points */
    /* 'MedusaPremixGainComputation:25' if (interpolationMethod(1) == 0) */
    /*@>10bd8ec*/if (/*@>119a128*/rtu_interpolation_method/*@>10bd8e2*/ == /*@>119a10d*/0.0F) {
        /* 'MedusaPremixGainComputation:26' targetGain = (maxGain - minGain)*position + minGain; */
/*@>1198b1c*/        for (/*@>119be67*/i = /*@>119be66*/0; /*@>119be71*/i < /*@>119be6f*/30; /*@>119be6d*/i/*@>119be75*/++) {
            /*@>119a176*/rtd_FRM_SLCGain_Left/*@>11990c0*/[/*@>119a178*/i]/*@>1198af9*/ = (/*@>119b9d9*/rtu_maxGain_Left/*@>119b9db*/[/*@>119b9d7*/i]/*@>1198b03*/ - /*@>119b9e0*/rtu_minGain_Left/*@>119b9e2*/[/*@>119b9de*/i])/*@>119a1d4*/ * /*@>119a146*/position/*@>1198b01*/ + /*@>119b9e7*/rtu_minGain_Left/*@>119b9e9*/[/*@>119b9e5*/i];
        }
        /*  Linear Interpolation */
    } else {
        /* 'MedusaPremixGainComputation:27' else */
        /* 'MedusaPremixGainComputation:28' minGain_dB = 20*log10(max(minGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:29' maxGain_dB = 20*log10(max(maxGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:30' targetGain_dB = (maxGain_dB - minGain_dB)*position + minGain_dB; */
        /* 'MedusaPremixGainComputation:31' targetGain = 10.^(targetGain_dB/20); */
/*@>10bd95c*/        for (/*@>119be56*/i = /*@>119be55*/0; /*@>119be60*/i < /*@>119be5e*/30; /*@>119be5c*/i/*@>119be76*/++) {
            real32_T minGain_dB;
            minGain_dB/*@>1199143*/ = /*@>119a14d*/20.0F/*@>119a1c7*/ * /*@>119b60c*/qhmath_log10_f(/*@>119b60a*/fmaxf(/*@>119b9ee*/rtu_minGain_Left/*@>119b9f0*/[/*@>119b9ec*/i], /*@>119a7c7*/1.1920929E-7F));
            /*@>119a182*/rtd_FRM_SLCGain_Left/*@>11992e1*/[/*@>119a184*/i]/*@>10bd98f*/ = /*@>119b614*/qhmath_pow_f(/*@>119a11b*/10.0F, /*@>119b612*/qhmath_div_f((/*@>119a72d*/20.0F/*@>119a72c*/ * /*@>119b610*/qhmath_log10_f(/*@>119b60e*/fmaxf(/*@>119b9f5*/rtu_maxGain_Left/*@>119b9f7*/[/*@>119b9f3*/i], /*@>119a7d3*/1.1920929E-7F))/*@>119a72b*/ - minGain_dB)/*@>119a72a*/ * /*@>119a733*/position/*@>119a729*/ + minGain_dB, /*@>119a736*/20.0F));
        }
        /*  dB-Linear Interpolation */
    }
}
    break;
}
/* '<S973>:1:22' FRM_SLCGain_Left = targetGain; */
/*      gain_out = targetGain; */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[29].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(29, 0, 0)>
%endif
%if SLibCG_ArgAccessed(29, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(29, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_TargetGainComputation_ex(\
%assign comma = ""
%if SLibCG_ArgAccessed(29, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_TargetGainComputation_ex", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const real32_T rtu_minGain_Left[30]\
%assign comma = ", "
%<comma>const real32_T rtu_detentGain_Left[30]\
%assign comma = ", "
%<comma>const real32_T rtu_maxGain_Left[30]\
%assign comma = ", "
%<comma>real32_T rtu_interpolation_method\
%assign comma = ", "
%<comma>uint32_T rtu_surr_level\
%assign comma = ", "
%<comma>real32_T rtd_FRM_SLCGain_Left[30]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(29, 0, fcnProtoType)>
%endfunction
