%implements s1068_b0_g3vnd_478_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T quantum_ms;
real32_T x;
%closefile localVarDecl
%assign _modelSS = ""

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[530], "Output",2)
/* {S!d3657}MATLAB Function: '<S1884>/calculate_ramp_rate' */
/* {S!d3662}MATLAB Function: '<S1884>/calculate_ramp_rate' */
/*  Invoke the function trigger output */
/* MATLAB Function 'RTC/REQ': '<S1893>:1' */
/* '<S1893>:1:3' go(); */
%if SLibCG_SystemFcnArgAccessed("Model_Target_calculate_ramp_rate",530,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCG_DumpSSCode("/*@[14c1e41*/",SLibCGIRGenReusableSysCall("Model_Target_calculate_ramp_rate", ["%<_modelSS>", "%<SLibCG_DumpSSCode("/*@[14c2114*/",(SLibCG_BOCSC(58, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[14c2126*/",(SLibCG_BOCSC(59, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[14c2138*/",(SLibCG_BOCSC(162, 1, "", -1, "", 0)),"/*@]*/")>", "&/*@>14c214c*/Model_Target_B./*@>14c214b*/sf_calculate_ramp_rate_hu"], 530, 1, 6, 2, 6, 957),"/*@]*/")>\
%assign ss = ::CompiledModel.System[530]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
/* {S!d3659}MATLAB Function: '<S1885>/get_ramp_coeffs' */
/* {S!d3664}MATLAB Function: '<S1885>/get_ramp_coeffs' incorporates:
 *  DataStoreRead: '<S1885>/Data Store Read'
 *  S-Function (AudioStats_MEX): '<S1885>/Audio Stats'
 */
/*@>14c0e4a*/x/*@>10d5e3a*/ = /*@>14c19f9*/Model_Target_B./*@>14c20a3*/sf_calculate_ramp_rate_hu./*@>14c20a0*/ramptime;
/* MATLAB Function 'MuteRamper/get_ramp_coeffs': '<S1898>:1' */
/* '<S1898>:1:5' targetLinearGain = single(1.0); */
%<SLibCG_DumpSSCode("/*@[14c1e7a*/",SLibCG_SetCSCDW(184, 1, "", -1, "", 0, "/*@>14c215f*/1.0F"),"/*@]*/")>\
/* '<S1898>:1:7' if muteSwitch */
/*@>10d5e42*/if (%<SLibCG_DumpSSCode("/*@[14c1e5c*/",(SLibCG_SE(SLibCG_BOCSC(57, 1, "", -1, "", 0))),"/*@]*/")>/*@>10d5e3e*/ != /*@>14c0e3c*/0U) {
    /* '<S1898>:1:8' targetLinearGain = single(max(0, silentGainLinear)); */
%<SLibCG_DumpSSCode("/*@[14c1e96*/",SLibCG_SetCSCDW(184, 1, "", -1, "", 0, "/*@>14c2171*/4.7315126E-7F"),"/*@]*/")>\
}
/*  %<"\% Nudge the gain values a bit if they are sitting at zero."> */
/*  %<"\% If current gain is zero, replace with a value very close to zero. What we"> */
/*  %<"\% really want is a value which is on the edge of perception - not too small"> */
/*  %<"\% or large. If the value is too small, we\'ll waste some of our ramp time"> */
/*  %<"\% in perceived silence. If the value is too large, the audio will lurch"> */
/*  %<"\% into perceptability at the start of the ramp."> */
/*  %<"\% So, \'max(currentGainValue, silentGainLinear)\' & \'max(TargetGain, silentGainLinear)\' are"> */
/*  %<"\% used in equations"> */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain difference between target and current value. */
/*  Equivalent ramp rate is therefore calculated as follows: */
/* '<S1898>:1:24' if (rampingRate_dBPerSec) */
/*@>10d5e50*/if (/*@>14c1a04*/Model_Target_B./*@>14c20a9*/sf_calculate_ramp_rate_hu./*@>14c20a6*/rampRate/*@>10d5e40*/ != /*@>14c0e3f*/0.0F) {
    /* '<S1898>:1:25' currentGain_db = 20*log10(max(currentGainValue, silentGainLinear)); */
    /* '<S1898>:1:26' targetGain_db = 20*log10( targetLinearGain); */
    /* '<S1898>:1:27' diff = abs(currentGain_db - targetGain_db); */
    /* '<S1898>:1:28' rampingTime_ms = diff / single(rampingRate_dBPerSec) * 1000; */
    /*@>14c0e48*/x/*@>10d5e72*/ = /*@>14c1639*/qhmath_div_f(/*@>14c1637*/qhmath_abs_f(/*@>14c0e69*/20.0F/*@>14c0ec8*/ * /*@>14c1633*/qhmath_log10_f(/*@>14c1631*/fmaxf(%<SLibCG_DumpSSCode("/*@[14c1ecc*/",(SLibCG_CSCDW(182, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14c0e82*/4.7315126E-7F))/*@>10d5e99*/ - /*@>14c0e6a*/20.0F/*@>14c0ecc*/ * /*@>14c1635*/qhmath_log10_f(%<SLibCG_DumpSSCode("/*@[14c1eb0*/",(SLibCG_CSCDW(184, 1, "", -1, "", 0)),"/*@]*/")>)), /*@>14c1a0f*/Model_Target_B./*@>14c20af*/sf_calculate_ramp_rate_hu./*@>14c20ac*/rampRate)/*@>14c0ebb*/ * /*@>14c0e6b*/1000.0F;
}
/* '<S1898>:1:31' quantum_ms = 1000 * frameSize / Fs_Hz; */
/*@>14c0e40*/quantum_ms/*@>10d5e77*/ = /*@>14c163b*/qhmath_div_f(/*@>14c0e81*/32000.0F, %<SLibCG_DumpSSCode("/*@[14c1eee*/",(SLibCG_Expr(864, 192, 0, 1, "", -1, "", 0)),"/*@]*/")>);
/* '<S1898>:1:32' numFrames = rampingTime_ms / quantum_ms; */
/*  Do a ceil rather than a round to insure that we create enough */
/*  frames. i.e. a fraction of a frame is promoted to an addition frame */
/* '<S1898>:1:35' nFrames = max (1, ceil(numFrames)); */
%<SLibCG_DumpSSCode("/*@[14c1f82*/",SLibCG_SetCSCDW(183, 1, "", -1, "", 0, "/*@>14c2184*/fmaxf(/*@>14c2185*/1.0F, /*@>14c2187*/qhmath_ceil_f(/*@>14c2189*/qhmath_div_f(/*@>14c218a*/x, /*@>14c218b*/quantum_ms)))"),"/*@]*/")>\
/* '<S1898>:1:36' quantized_rampTime_ms = nFrames * quantum_ms; */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S1898>:1:50' ramping_coeff= exp(log( targetLinearGain /max(currentGainValue, silentGainLinear) ) / (Fs_Hz * quantized_rampTime_ms / 1000)); */
/*@>14c1a15*/Model_Target_B./*@>14c20b2*/ramping_coeff_b/*@>10d5e7b*/ = /*@>14c164b*/qhmath_div_f(/*@>14c1647*/qhmath_log_f(/*@>14c1645*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[14c1f64*/",(SLibCG_CSCDW(184, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14c1643*/fmaxf(%<SLibCG_DumpSSCode("/*@[14c1f48*/",(SLibCG_CSCDW(182, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14c0e83*/4.7315126E-7F))), /*@>14c1649*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[14c1f2c*/",(SLibCG_SE(SLibCG_CSCDW(183, 1, "", -1, "", 0))),"/*@]*/")>/*@>14c0ea5*/ * /*@>14c0e62*/quantum_ms/*@>14c0ea1*/ * %<SLibCG_DumpSSCode("/*@[14c1f10*/",(SLibCG_SE(SLibCG_Expr(864, 192, 0, 1, "", -1, "", 0))),"/*@]*/")>, /*@>14c0e6d*/1000.0F));
/*@>14c1a1b*/Model_Target_B./*@>14c20b5*/ramping_coeff_b/*@>10d5e81*/ = /*@>14c164d*/qhmath_exp_f(/*@>14c1a21*/Model_Target_B./*@>14c20b8*/ramping_coeff_b);
/* {E!d3664}End of MATLAB Function: '<S1885>/get_ramp_coeffs' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void HandleReqNearAnn1Ann1MuteSet(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(478, 0, fcnProtoType)>
%endfunction
