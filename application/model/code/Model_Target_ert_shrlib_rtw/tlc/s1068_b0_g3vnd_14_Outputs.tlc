%implements s1068_b0_g3vnd_14_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
%closefile localVarDecl
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/Full Mixing Matrix_Center Surround/Ramper/process': '<S959>:1' */
/* '<S959>:1:10' for i = 1:numel(FRM_currentGain_CS) */
/*@>10c0e7a*/for (/*@>116e089*/i = /*@>116e088*/0; /*@>116e093*/i < /*@>116e091*/12; /*@>116e08f*/i/*@>116e097*/++) {
    /* '<S959>:1:11' if (FRM_Freeze_CS(1) == false) */
    /*@>10c0e7c*/if (!/*@<10c0e88*/*/*@<116e0a0*/rtd_FRM_Freeze_CS) {
        /* '<S959>:1:12' if (FRM_frameCount_CS(i) == 0) */
        /*@>10c0e7d*/if (/*@>116ddf5*/rtd_FRM_frameCount_CS/*@>116ddf7*/[/*@>116ddf3*/i]/*@>10c0e70*/ == /*@>116d589*/0) {
            /*  The ramp is finished. Stop ramping and SNAP to the target */
            /* '<S959>:1:14' FRM_currentGain_CS(i) = FRM_targetGain_CS(i); */
            /*@>116d595*/rtd_FRM_currentGain_CS/*@>116d2a0*/[/*@>116d597*/i]/*@>10c0e64*/ = /*@>116ddfc*/rtd_FRM_targetGain_CS/*@>116ddfe*/[/*@>116ddfa*/i];
        } else {
            /* '<S959>:1:15' else */
            /*  The ramp is *NOT* frozen or done: gain is moving */
            /* '<S959>:1:17' FRM_currentGain_CS(i) = FRM_currentGain_CS(i)*FRM_rampCoeff_CS(i); */
            /*@>116d5a1*/rtd_FRM_currentGain_CS/*@>116d2fa*/[/*@>116d5a3*/i]/*@>116e098*/ *= /*@>116de0a*/rtd_FRM_rampCoeff_CS/*@>116de0c*/[/*@>116de08*/i];
            /* '<S959>:1:18' FRM_frameCount_CS(i) = FRM_frameCount_CS(i) - 1; */
            /*@>116d5a9*/rtd_FRM_frameCount_CS/*@>116d334*/[/*@>116d5ab*/i]/*@>116e099*/--;
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[14].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(14, 0, 0)>
%endif
%if SLibCG_ArgAccessed(14, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(14, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_process(\
%assign comma = ""
%if SLibCG_ArgAccessed(14, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_process", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const boolean_T *rtd_FRM_Freeze_CS\
%assign comma = ", "
%<comma>real32_T rtd_FRM_currentGain_CS[12]\
%assign comma = ", "
%<comma>int32_T rtd_FRM_frameCount_CS[12]\
%assign comma = ", "
%<comma>const real32_T rtd_FRM_rampCoeff_CS[12]\
%assign comma = ", "
%<comma>const real32_T rtd_FRM_targetGain_CS[12]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(14, 0, fcnProtoType)>
%endfunction
