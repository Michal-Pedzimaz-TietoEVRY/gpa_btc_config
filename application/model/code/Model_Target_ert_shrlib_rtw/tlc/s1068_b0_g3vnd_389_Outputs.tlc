%implements s1068_b0_g3vnd_389_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T quantum_ms;
real32_T x;
%closefile localVarDecl
%assign _modelSS = ""

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[530], "Output",2)
/* {S!d3195}MATLAB Function: '<S1389>/calculate_ramp_rate' */
/* {S!d3202}MATLAB Function: '<S1389>/calculate_ramp_rate' */
/*  Invoke the function trigger output */
/* MATLAB Function 'RTC/REQ': '<S1397>:1' */
/* '<S1397>:1:3' go(); */
%if SLibCG_SystemFcnArgAccessed("Model_Target_calculate_ramp_rate",530,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCG_DumpSSCode("/*@[1454a75*/",SLibCGIRGenReusableSysCall("Model_Target_calculate_ramp_rate", ["%<_modelSS>", "%<SLibCG_DumpSSCode("/*@[1454ec5*/",(SLibCG_BOCSC(84, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[1454ed7*/",(SLibCG_BOCSC(85, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[1454ee9*/",(SLibCG_BOCSC(267, 1, "", -1, "", 0)),"/*@]*/")>", "&/*@>1454efd*/Model_Target_B./*@>1454efc*/sf_calculate_ramp_rate"], 530, 0, 6, 2, 6, 957),"/*@]*/")>\
%assign ss = ::CompiledModel.System[530]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
/* {S!d3197}MATLAB Function: '<S1400>/get_ramp_coeffs' */
/* {S!d3204}MATLAB Function: '<S1400>/get_ramp_coeffs' incorporates:
 *  S-Function (AudioStats_MEX): '<S1400>/Audio Stats'
 */
/*@>1453110*/x/*@>10cb583*/ = /*@>14544bb*/Model_Target_B./*@>1454e2d*/sf_calculate_ramp_rate./*@>1454e2a*/ramptime;
/* MATLAB Function 'MuteRamper/get_ramp_coeffs': '<S1403>:1' */
/* '<S1403>:1:5' targetLinearGain = single(1.0); */
%<SLibCG_DumpSSCode("/*@[1454aca*/",SLibCG_SetCSCDW(214, 1, "", -1, "", 0, "/*@>1454f10*/1.0F"),"/*@]*/")>\
/* '<S1403>:1:7' if muteSwitch */
/*@>10cb58b*/if (%<SLibCG_DumpSSCode("/*@[1454a90*/",(SLibCG_SE(SLibCG_BOCSC(83, 1, "", -1, "", 0))),"/*@]*/")>/*@>10cb587*/ != /*@>1453102*/0U) {
    /* '<S1403>:1:8' targetLinearGain = single(max(0, silentGainLinear)); */
%<SLibCG_DumpSSCode("/*@[1454ae6*/",SLibCG_SetCSCDW(214, 1, "", -1, "", 0, "/*@>1454f22*/4.7315126E-7F"),"/*@]*/")>\
}
/*  %<"\% Nudge the gain values a bit if they are sitting at zero."> */
/*  %<"\% If current gain is zero, replace with a value very close to zero. What we"> */
/*  %<"\% really want is a value which is on the edge of perception - not too small"> */
/*  %<"\% or large. If the value is too small, we\'ll waste some of our ramp time"> */
/*  %<"\% in perceived silence. If the value is too large, the audio will lurch"> */
/*  %<"\% into perceptability at the start of the ramp."> */
/*  %<"\% So, \'max(currentGainValue, silentGainLinear)\' & \'max(TargetGain, silentGainLinear)\' are"> */
/*  %<"\% used in equations"> */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain difference between target and current value. */
/*  Equivalent ramp rate is therefore calculated as follows: */
/* '<S1403>:1:24' if (rampingRate_dBPerSec) */
/*@>10cb599*/if (/*@>14544c6*/Model_Target_B./*@>1454e33*/sf_calculate_ramp_rate./*@>1454e30*/rampRate/*@>10cb589*/ != /*@>1453105*/0.0F) {
    /* '<S1403>:1:25' currentGain_db = 20*log10(max(currentGainValue, silentGainLinear)); */
    /* '<S1403>:1:26' targetGain_db = 20*log10( targetLinearGain); */
    /* '<S1403>:1:27' diff = abs(currentGain_db - targetGain_db); */
    /* '<S1403>:1:28' rampingTime_ms = diff / single(rampingRate_dBPerSec) * 1000; */
    /*@>145310e*/x/*@>10cb5bb*/ = /*@>1453eec*/qhmath_div_f(/*@>1453eea*/qhmath_abs_f(/*@>145312f*/20.0F/*@>145321b*/ * /*@>1453ee6*/qhmath_log10_f(/*@>1453ee4*/fmaxf(/*@>14544cc*/Model_Target_B./*@>1454e36*/DataStoreRead_f3, /*@>1453187*/4.7315126E-7F))/*@>10cb5e2*/ - /*@>1453130*/20.0F/*@>145321f*/ * /*@>1453ee8*/qhmath_log10_f(%<SLibCG_DumpSSCode("/*@[1454b00*/",(SLibCG_CSCDW(214, 1, "", -1, "", 0)),"/*@]*/")>)), /*@>14544d7*/Model_Target_B./*@>1454e3c*/sf_calculate_ramp_rate./*@>1454e39*/rampRate)/*@>145320e*/ * /*@>1453131*/1000.0F;
}
/* '<S1403>:1:31' quantum_ms = 1000 * frameSize / Fs_Hz; */
/*@>1453106*/quantum_ms/*@>10cb5c0*/ = /*@>1453eee*/qhmath_div_f(/*@>1453186*/8000.0F, %<SLibCG_DumpSSCode("/*@[1454b22*/",(SLibCG_Expr(578, 3, 0, 1, "", -1, "", 0)),"/*@]*/")>);
/* '<S1403>:1:32' numFrames = rampingTime_ms / quantum_ms; */
/*  Do a ceil rather than a round to insure that we create enough */
/*  frames. i.e. a fraction of a frame is promoted to an addition frame */
/* '<S1403>:1:35' nFrames = max (1, ceil(numFrames)); */
%<SLibCG_DumpSSCode("/*@[1454b9a*/",SLibCG_SetCSCDW(213, 1, "", -1, "", 0, "/*@>1454f35*/fmaxf(/*@>1454f36*/1.0F, /*@>1454f38*/qhmath_ceil_f(/*@>1454f3a*/qhmath_div_f(/*@>1454f3b*/x, /*@>1454f3c*/quantum_ms)))"),"/*@]*/")>\
/* '<S1403>:1:36' quantized_rampTime_ms = nFrames * quantum_ms; */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S1403>:1:50' ramping_coeff= exp(log( targetLinearGain /max(currentGainValue, silentGainLinear) ) / (Fs_Hz * quantized_rampTime_ms / 1000)); */
/*@>14544dd*/Model_Target_B./*@>1454e3f*/ramping_coeff_m/*@>10cb5c4*/ = /*@>1453efe*/qhmath_div_f(/*@>1453efa*/qhmath_log_f(/*@>1453ef8*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[1454b7c*/",(SLibCG_CSCDW(214, 1, "", -1, "", 0)),"/*@]*/")>, /*@>1453ef6*/fmaxf(/*@>14544e3*/Model_Target_B./*@>1454e42*/DataStoreRead_f3, /*@>1453188*/4.7315126E-7F))), /*@>1453efc*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[1454b60*/",(SLibCG_SE(SLibCG_CSCDW(213, 1, "", -1, "", 0))),"/*@]*/")>/*@>14531f8*/ * /*@>1453128*/quantum_ms/*@>14531f4*/ * %<SLibCG_DumpSSCode("/*@[1454b44*/",(SLibCG_SE(SLibCG_Expr(578, 3, 0, 1, "", -1, "", 0))),"/*@]*/")>, /*@>1453133*/1000.0F));
/*@>14544e9*/Model_Target_B./*@>1454e45*/ramping_coeff_m/*@>10cb5ca*/ = /*@>1453f00*/qhmath_exp_f(/*@>14544ef*/Model_Target_B./*@>1454e48*/ramping_coeff_m);
/* {E!d3204}End of MATLAB Function: '<S1400>/get_ramp_coeffs' */

/* {S!d3199}MATLAB Function: '<S1413>/get_ramp_coeffs' */
/* {S!d3206}MATLAB Function: '<S1413>/get_ramp_coeffs' incorporates:
 *  S-Function (AudioStats_MEX): '<S1413>/Audio Stats'
 */
/*@>145314f*/x/*@>10cb626*/ = /*@>14544fa*/Model_Target_B./*@>1454e4e*/sf_calculate_ramp_rate./*@>1454e4b*/ramptime;
/* MATLAB Function 'MuteRamper/get_ramp_coeffs': '<S1416>:1' */
/* '<S1416>:1:5' targetLinearGain = single(1.0); */
%<SLibCG_DumpSSCode("/*@[1454bb6*/",SLibCG_SetCSCDW(217, 1, "", -1, "", 0, "/*@>1454f4e*/1.0F"),"/*@]*/")>\
/* '<S1416>:1:7' if muteSwitch */
/*@>10cb62e*/if (%<SLibCG_DumpSSCode("/*@[1454aac*/",(SLibCG_SE(SLibCG_BOCSC(83, 1, "", -1, "", 0))),"/*@]*/")>/*@>10cb62a*/ != /*@>1453141*/0U) {
    /* '<S1416>:1:8' targetLinearGain = single(max(0, silentGainLinear)); */
%<SLibCG_DumpSSCode("/*@[1454bd2*/",SLibCG_SetCSCDW(217, 1, "", -1, "", 0, "/*@>1454f60*/4.7315126E-7F"),"/*@]*/")>\
}
/*  %<"\% Nudge the gain values a bit if they are sitting at zero."> */
/*  %<"\% If current gain is zero, replace with a value very close to zero. What we"> */
/*  %<"\% really want is a value which is on the edge of perception - not too small"> */
/*  %<"\% or large. If the value is too small, we\'ll waste some of our ramp time"> */
/*  %<"\% in perceived silence. If the value is too large, the audio will lurch"> */
/*  %<"\% into perceptability at the start of the ramp."> */
/*  %<"\% So, \'max(currentGainValue, silentGainLinear)\' & \'max(TargetGain, silentGainLinear)\' are"> */
/*  %<"\% used in equations"> */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain difference between target and current value. */
/*  Equivalent ramp rate is therefore calculated as follows: */
/* '<S1416>:1:24' if (rampingRate_dBPerSec) */
/*@>10cb63c*/if (/*@>1454505*/Model_Target_B./*@>1454e54*/sf_calculate_ramp_rate./*@>1454e51*/rampRate/*@>10cb62c*/ != /*@>1453144*/0.0F) {
    /* '<S1416>:1:25' currentGain_db = 20*log10(max(currentGainValue, silentGainLinear)); */
    /* '<S1416>:1:26' targetGain_db = 20*log10( targetLinearGain); */
    /* '<S1416>:1:27' diff = abs(currentGain_db - targetGain_db); */
    /* '<S1416>:1:28' rampingTime_ms = diff / single(rampingRate_dBPerSec) * 1000; */
    /*@>145314d*/x/*@>10cb65e*/ = /*@>1453f0a*/qhmath_div_f(/*@>1453f08*/qhmath_abs_f(/*@>145316e*/20.0F/*@>14531d1*/ * /*@>1453f04*/qhmath_log10_f(/*@>1453f02*/fmaxf(/*@>145450b*/Model_Target_B./*@>1454e57*/DataStoreRead_b, /*@>145318b*/4.7315126E-7F))/*@>10cb685*/ - /*@>145316f*/20.0F/*@>14531d5*/ * /*@>1453f06*/qhmath_log10_f(%<SLibCG_DumpSSCode("/*@[1454bec*/",(SLibCG_CSCDW(217, 1, "", -1, "", 0)),"/*@]*/")>)), /*@>1454516*/Model_Target_B./*@>1454e5d*/sf_calculate_ramp_rate./*@>1454e5a*/rampRate)/*@>14531c4*/ * /*@>1453170*/1000.0F;
}
/* '<S1416>:1:31' quantum_ms = 1000 * frameSize / Fs_Hz; */
/*@>1453145*/quantum_ms/*@>10cb663*/ = /*@>1453f0c*/qhmath_div_f(/*@>145318a*/32000.0F, %<SLibCG_DumpSSCode("/*@[1454c0e*/",(SLibCG_Expr(578, 2, 0, 1, "", -1, "", 0)),"/*@]*/")>);
/* '<S1416>:1:32' numFrames = rampingTime_ms / quantum_ms; */
/*  Do a ceil rather than a round to insure that we create enough */
/*  frames. i.e. a fraction of a frame is promoted to an addition frame */
/* '<S1416>:1:35' nFrames = max (1, ceil(numFrames)); */
%<SLibCG_DumpSSCode("/*@[1454c86*/",SLibCG_SetCSCDW(216, 1, "", -1, "", 0, "/*@>1454f73*/fmaxf(/*@>1454f74*/1.0F, /*@>1454f76*/qhmath_ceil_f(/*@>1454f78*/qhmath_div_f(/*@>1454f79*/x, /*@>1454f7a*/quantum_ms)))"),"/*@]*/")>\
/* '<S1416>:1:36' quantized_rampTime_ms = nFrames * quantum_ms; */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S1416>:1:50' ramping_coeff= exp(log( targetLinearGain /max(currentGainValue, silentGainLinear) ) / (Fs_Hz * quantized_rampTime_ms / 1000)); */
/*@>145451c*/Model_Target_B./*@>1454e60*/ramping_coeff_l/*@>10cb667*/ = /*@>1453f1c*/qhmath_div_f(/*@>1453f18*/qhmath_log_f(/*@>1453f16*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[1454c68*/",(SLibCG_CSCDW(217, 1, "", -1, "", 0)),"/*@]*/")>, /*@>1453f14*/fmaxf(/*@>1454522*/Model_Target_B./*@>1454e63*/DataStoreRead_b, /*@>145318c*/4.7315126E-7F))), /*@>1453f1a*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[1454c4c*/",(SLibCG_SE(SLibCG_CSCDW(216, 1, "", -1, "", 0))),"/*@]*/")>/*@>14531ae*/ * /*@>1453167*/quantum_ms/*@>14531aa*/ * %<SLibCG_DumpSSCode("/*@[1454c30*/",(SLibCG_SE(SLibCG_Expr(578, 2, 0, 1, "", -1, "", 0))),"/*@]*/")>, /*@>1453172*/1000.0F));
/*@>1454528*/Model_Target_B./*@>1454e66*/ramping_coeff_l/*@>10cb66d*/ = /*@>1453f1e*/qhmath_exp_f(/*@>145452e*/Model_Target_B./*@>1454e69*/ramping_coeff_l);
/* {E!d3206}End of MATLAB Function: '<S1413>/get_ramp_coeffs' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void HandleReqPreAmpMuteControlSet(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(389, 0, fcnProtoType)>
%endfunction
