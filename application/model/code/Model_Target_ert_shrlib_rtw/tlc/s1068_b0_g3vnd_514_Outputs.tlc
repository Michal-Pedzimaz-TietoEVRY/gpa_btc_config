%implements s1068_b0_g3vnd_514_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T quantum_ms;
real32_T x;
%closefile localVarDecl
%assign _modelSS = ""

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[530], "Output",2)
/* {S!d3805}MATLAB Function: '<S2044>/calculate_ramp_rate' */
/* {S!d3810}MATLAB Function: '<S2044>/calculate_ramp_rate' */
/*  Invoke the function trigger output */
/* MATLAB Function 'RTC/REQ': '<S2053>:1' */
/* '<S2053>:1:3' go(); */
%if SLibCG_SystemFcnArgAccessed("Model_Target_calculate_ramp_rate",530,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCG_DumpSSCode("/*@[14d75b9*/",SLibCGIRGenReusableSysCall("Model_Target_calculate_ramp_rate", ["%<_modelSS>", "%<SLibCG_DumpSSCode("/*@[14d788c*/",(SLibCG_BOCSC(34, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[14d789e*/",(SLibCG_BOCSC(35, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[14d78b0*/",(SLibCG_BOCSC(192, 1, "", -1, "", 0)),"/*@]*/")>", "&/*@>14d78c4*/Model_Target_B./*@>14d78c3*/sf_calculate_ramp_rate_mf"], 530, 3, 6, 2, 6, 957),"/*@]*/")>\
%assign ss = ::CompiledModel.System[530]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
/* {S!d3807}MATLAB Function: '<S2045>/get_ramp_coeffs' */
/* {S!d3812}MATLAB Function: '<S2045>/get_ramp_coeffs' incorporates:
 *  DataStoreRead: '<S2045>/Data Store Read'
 *  S-Function (AudioStats_MEX): '<S2045>/Audio Stats'
 */
/*@>14d65c2*/x/*@>10d64d6*/ = /*@>14d7171*/Model_Target_B./*@>14d781b*/sf_calculate_ramp_rate_mf./*@>14d7818*/ramptime;
/* MATLAB Function 'MuteRamper/get_ramp_coeffs': '<S2058>:1' */
/* '<S2058>:1:5' targetLinearGain = single(1.0); */
%<SLibCG_DumpSSCode("/*@[14d75f2*/",SLibCG_SetCSCDW(190, 1, "", -1, "", 0, "/*@>14d78d7*/1.0F"),"/*@]*/")>\
/* '<S2058>:1:7' if muteSwitch */
/*@>10d64de*/if (%<SLibCG_DumpSSCode("/*@[14d75d4*/",(SLibCG_SE(SLibCG_BOCSC(33, 1, "", -1, "", 0))),"/*@]*/")>/*@>10d64da*/ != /*@>14d65b4*/0U) {
    /* '<S2058>:1:8' targetLinearGain = single(max(0, silentGainLinear)); */
%<SLibCG_DumpSSCode("/*@[14d760e*/",SLibCG_SetCSCDW(190, 1, "", -1, "", 0, "/*@>14d78e9*/4.7315126E-7F"),"/*@]*/")>\
}
/*  %<"\% Nudge the gain values a bit if they are sitting at zero."> */
/*  %<"\% If current gain is zero, replace with a value very close to zero. What we"> */
/*  %<"\% really want is a value which is on the edge of perception - not too small"> */
/*  %<"\% or large. If the value is too small, we\'ll waste some of our ramp time"> */
/*  %<"\% in perceived silence. If the value is too large, the audio will lurch"> */
/*  %<"\% into perceptability at the start of the ramp."> */
/*  %<"\% So, \'max(currentGainValue, silentGainLinear)\' & \'max(TargetGain, silentGainLinear)\' are"> */
/*  %<"\% used in equations"> */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain difference between target and current value. */
/*  Equivalent ramp rate is therefore calculated as follows: */
/* '<S2058>:1:24' if (rampingRate_dBPerSec) */
/*@>10d64ec*/if (/*@>14d717c*/Model_Target_B./*@>14d7821*/sf_calculate_ramp_rate_mf./*@>14d781e*/rampRate/*@>10d64dc*/ != /*@>14d65b7*/0.0F) {
    /* '<S2058>:1:25' currentGain_db = 20*log10(max(currentGainValue, silentGainLinear)); */
    /* '<S2058>:1:26' targetGain_db = 20*log10( targetLinearGain); */
    /* '<S2058>:1:27' diff = abs(currentGain_db - targetGain_db); */
    /* '<S2058>:1:28' rampingTime_ms = diff / single(rampingRate_dBPerSec) * 1000; */
    /*@>14d65c0*/x/*@>10d650e*/ = /*@>14d6db1*/qhmath_div_f(/*@>14d6daf*/qhmath_abs_f(/*@>14d65e1*/20.0F/*@>14d6640*/ * /*@>14d6dab*/qhmath_log10_f(/*@>14d6da9*/fmaxf(%<SLibCG_DumpSSCode("/*@[14d7644*/",(SLibCG_CSCDW(188, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14d65fa*/4.7315126E-7F))/*@>10d6535*/ - /*@>14d65e2*/20.0F/*@>14d6644*/ * /*@>14d6dad*/qhmath_log10_f(%<SLibCG_DumpSSCode("/*@[14d7628*/",(SLibCG_CSCDW(190, 1, "", -1, "", 0)),"/*@]*/")>)), /*@>14d7187*/Model_Target_B./*@>14d7827*/sf_calculate_ramp_rate_mf./*@>14d7824*/rampRate)/*@>14d6633*/ * /*@>14d65e3*/1000.0F;
}
/* '<S2058>:1:31' quantum_ms = 1000 * frameSize / Fs_Hz; */
/*@>14d65b8*/quantum_ms/*@>10d6513*/ = /*@>14d6db3*/qhmath_div_f(/*@>14d65f9*/32000.0F, %<SLibCG_DumpSSCode("/*@[14d7666*/",(SLibCG_Expr(864, 272, 0, 1, "", -1, "", 0)),"/*@]*/")>);
/* '<S2058>:1:32' numFrames = rampingTime_ms / quantum_ms; */
/*  Do a ceil rather than a round to insure that we create enough */
/*  frames. i.e. a fraction of a frame is promoted to an addition frame */
/* '<S2058>:1:35' nFrames = max (1, ceil(numFrames)); */
%<SLibCG_DumpSSCode("/*@[14d76fa*/",SLibCG_SetCSCDW(189, 1, "", -1, "", 0, "/*@>14d78fc*/fmaxf(/*@>14d78fd*/1.0F, /*@>14d78ff*/qhmath_ceil_f(/*@>14d7901*/qhmath_div_f(/*@>14d7902*/x, /*@>14d7903*/quantum_ms)))"),"/*@]*/")>\
/* '<S2058>:1:36' quantized_rampTime_ms = nFrames * quantum_ms; */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S2058>:1:50' ramping_coeff= exp(log( targetLinearGain /max(currentGainValue, silentGainLinear) ) / (Fs_Hz * quantized_rampTime_ms / 1000)); */
/*@>14d718d*/Model_Target_B./*@>14d782a*/ramping_coeff_i/*@>10d6517*/ = /*@>14d6dc3*/qhmath_div_f(/*@>14d6dbf*/qhmath_log_f(/*@>14d6dbd*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[14d76dc*/",(SLibCG_CSCDW(190, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14d6dbb*/fmaxf(%<SLibCG_DumpSSCode("/*@[14d76c0*/",(SLibCG_CSCDW(188, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14d65fb*/4.7315126E-7F))), /*@>14d6dc1*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[14d76a4*/",(SLibCG_SE(SLibCG_CSCDW(189, 1, "", -1, "", 0))),"/*@]*/")>/*@>14d661d*/ * /*@>14d65da*/quantum_ms/*@>14d6619*/ * %<SLibCG_DumpSSCode("/*@[14d7688*/",(SLibCG_SE(SLibCG_Expr(864, 272, 0, 1, "", -1, "", 0))),"/*@]*/")>, /*@>14d65e5*/1000.0F));
/*@>14d7193*/Model_Target_B./*@>14d782d*/ramping_coeff_i/*@>10d651d*/ = /*@>14d6dc5*/qhmath_exp_f(/*@>14d7199*/Model_Target_B./*@>14d7830*/ramping_coeff_i);
/* {E!d3812}End of MATLAB Function: '<S2045>/get_ramp_coeffs' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void HandleReqNearAnn3Ann3MuteSet(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(514, 0, fcnProtoType)>
%endfunction
