%implements s1068_b0_g3vnd_17_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T k;
real32_T currentgain[30];
real32_T diff[30];
%closefile localVarDecl
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Full-rate Mixer/Full-Rate Mixer with CAE & Fade Ramper/Full Mixing Matrix_Left/Ramper/control': '<S970>:1' */
/* '<S970>:1:10' dim_rgain = size(FRM_currentGain_Left); */
/* '<S970>:1:11' rgain_SILENT_GAIN_mat = (MedusaFRMConfig.rgain_SILENT_GAIN)*ones(dim_rgain); */
/*  Step 1: FREEZE the gain ramper so that we can perform calculations based */
/*  on the current gain value. */
/* '<S970>:1:15' FRM_Freeze_Left(1) = true; */
/*  freeze the gain */
/*  Step 2: Nudge the gain values a bit if they are sitting at zero. */
/*  When this control set goes live, ensure that the current gain will move. */
/*  If current gain is zero, replace with a value very close to zero. What we */
/*  really want is a value which is on the edge of perception - not too small */
/*  or large. If the value is too small, we'll waste some of our ramp time */
/*  in perceived silence. If the value is too large, the audio will lurch */
/*  into perceptability at the start of the ramp. */
/* '<S970>:1:24' currentgain = max(FRM_currentGain_Left, rgain_SILENT_GAIN_mat); */
/* '<S970>:1:25' targetGain  = max(target_gains_linear, rgain_SILENT_GAIN_mat); */
/*  Step 3a: If a ramp time in milliseconds is provided, ignore the ramp */
/*  rate in dB/sec (if also provided), otherwise calculate a new ramp time */
/*  that matches the slope. */
/* '<S970>:1:30' rampTime_ms = single(rampTime)*ones(dim_rgain); */
/*@>10bed5c*/for (/*@>117439b*/k = /*@>117439a*/0; /*@>11743a5*/k < /*@>11743a3*/30; /*@>11743a1*/k/*@>11743a9*/++) {
    /*@>117286b*/currentgain/*@>11718b0*/[/*@>117286d*/k]/*@>10bed63*/ = /*@>1173b4b*/fmaxf(/*@>1173e9f*/rtd_FRM_currentGain_Left/*@>1173ea1*/[/*@>1173e9d*/k], /*@>1172852*/1.1920929E-7F);
    /*@>1172873*/rtd_FRM_rampCoeff_Left/*@>11718ee*/[/*@>1172875*/k]/*@>10bed6f*/ = /*@>1173b4d*/fmaxf(/*@>1173ea6*/rtu_target_gains_linear/*@>1173ea8*/[/*@>1173ea4*/k], /*@>1172853*/1.1920929E-7F);
    /*@>117287d*/diff/*@>117191f*/[/*@>117287b*/k]/*@>1171920*/ = /*@>1171915*/(real32_T)/*@>1172879*/rtu_rampTime;
}
/* '<S970>:1:32' if(~rampTime) */
/*@>10bed0e*/if (/*@>117285d*/rtu_rampTime/*@>10bed3b*/ == /*@>1172846*/0U) {
    /* '<S970>:1:33' currentGain_db = 20*log10(currentgain); */
    /* '<S970>:1:34' targetGain_db = 20*log10(targetGain); */
    /* '<S970>:1:35' diff = abs(currentGain_db - targetGain_db); */
    /* '<S970>:1:36' rampTime_ms = diff / single(rampRate) * 1000; */
/*@>1171978*/    for (/*@>117438a*/k = /*@>1174389*/0; /*@>1174394*/k < /*@>1174392*/30; /*@>1174390*/k/*@>11743aa*/++) {
        /*@>11728eb*/diff/*@>1172245*/[/*@>11728ed*/k] = /*@>1173b55*/qhmath_div_f(/*@>1173b53*/qhmath_abs_f(/*@>1172d66*/20.0F/*@>1172d65*/ * /*@>1173b4f*/qhmath_log10_f(/*@>1173eac*/currentgain/*@>1173eae*/[/*@>1173eab*/k])/*@>1172d64*/ - /*@>1172d6a*/20.0F/*@>1172d69*/ * /*@>1173b51*/qhmath_log10_f(/*@>1173eb3*/rtd_FRM_rampCoeff_Left/*@>1173eb5*/[/*@>1173eb1*/k])), /*@>1172cf0*/(real32_T)/*@>1172cf2*/rtu_rampRate)/*@>1172ceb*/ * /*@>1172cf3*/1000.0F;
    }
}
/*  Step 3b: QUANTIZE the desired ramp time to our FrameSize. Also retrieve */
/*  the whole number of frames required to best match requested ramp time. */
/*  Ensure that at least one frame is used. The frame size will therefore */
/*  determine the steepest ramp (i.e. within one frame you can go anywhere). */
/* '<S970>:1:43' quantum_ms = 1000 * (MedusaFRMConfig.frame_size) / (MedusaFRMConfig.sample_rate_in_hertz); */
/* '<S970>:1:44' numFrames = rampTime_ms / quantum_ms; */
/* '<S970>:1:45' numFrames = max (1, round(numFrames)); */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S970>:1:59' factor = log( targetGain ./ currentgain ); */
/* '<S970>:1:60' RampCoef = exp(factor ./ numFrames); */
/*  Output control signals */
/* '<S970>:1:63' FRM_frameCount_Left  = int32(numFrames); */
/* '<S970>:1:64' FRM_rampCoeff_Left   = single(RampCoef); */
/* '<S970>:1:65' FRM_targetGain_Left  = target_gains_linear; */
/* '<S970>:1:66' FRM_currentGain_Left = currentgain; */
/*@>1171a53*/for (/*@>1174379*/k = /*@>1174378*/0; /*@>1174383*/k < /*@>1174381*/30; /*@>117437f*/k/*@>11743ab*/++) {
    real32_T currentgain_0;
    real32_T diff_0;
    real32_T numFrames;
    currentgain_0 = /*@>1173eb9*/currentgain/*@>1173ebb*/[/*@>1173eb8*/k];
    diff_0/*@>10bed9c*/ = /*@>1173b59*/roundf(/*@>1173b57*/qhmath_div_f(/*@>1173ebf*/diff/*@>1173ec1*/[/*@>1173ebe*/k], /*@>117335d*/0.722222209F));
    numFrames/*@>10beda8*/ = /*@>1173b5b*/fmaxf(/*@>1172851*/1.0F, diff_0);
    /*@>11728a3*/rtd_FRM_rampCoeff_Left/*@>1171c68*/[/*@>11728a1*/k]/*@>1171c69*/ = /*@>1173b5d*/qhmath_div_f(/*@>1173ec6*/rtd_FRM_rampCoeff_Left/*@>1173ec8*/[/*@>1173ec4*/k], currentgain_0);
    /*@>11728a9*/rtd_FRM_rampCoeff_Left/*@>1171cb0*/[/*@>11728ab*/k]/*@>10bedb1*/ = /*@>1173b5f*/qhmath_log_f(/*@>1173ecd*/rtd_FRM_rampCoeff_Left/*@>1173ecf*/[/*@>1173ecb*/k]);
    /*@>11728b3*/rtd_FRM_rampCoeff_Left/*@>1171cfc*/[/*@>11728b1*/k]/*@>1171cfd*/ = /*@>1173b61*/qhmath_div_f(/*@>1173ed4*/rtd_FRM_rampCoeff_Left/*@>1173ed6*/[/*@>1173ed2*/k], numFrames);
    /*@>11728b9*/rtd_FRM_rampCoeff_Left/*@>1171d44*/[/*@>11728bb*/k]/*@>10bedba*/ = /*@>1173b63*/qhmath_exp_f(/*@>1173edb*/rtd_FRM_rampCoeff_Left/*@>1173edd*/[/*@>1173ed9*/k]);
    /*@>11728bf*/rtd_FRM_frameCount_Left/*@>1171d7c*/[/*@>11728bd*/k]/*@>1171d7d*/ = /*@>117292a*/(int32_T)/*@>1173b65*/roundf(numFrames);
    /*@>11728c5*/rtd_FRM_targetGain_Left/*@>1171dc4*/[/*@>11728c7*/k]/*@>117110f*/ = /*@>1173ee2*/rtu_target_gains_linear/*@>1173ee4*/[/*@>1173ee0*/k];
    /*@>11728cb*/rtd_FRM_currentGain_Left/*@>1171df7*/[/*@>11728c9*/k]/*@>1171df8*/ = currentgain_0;
    /*@>1173293*/diff/*@>1173292*/[/*@>1173295*/k] = diff_0;
}
/*  unfreeze the gain */
/* '<S970>:1:69' FRM_Freeze_Left(1) = false; */
*rtd_FRM_Freeze_Left/*@>10becfd*/ = /*@>1172847*/false;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[17].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(17, 0, 0)>
%endif
%if SLibCG_ArgAccessed(17, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(17, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_control_m(\
%assign comma = ""
%if SLibCG_ArgAccessed(17, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_control_m", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const real32_T rtu_target_gains_linear[30]\
%assign comma = ", "
%<comma>uint32_T rtu_rampRate\
%assign comma = ", "
%<comma>uint32_T rtu_rampTime\
%assign comma = ", "
%<comma>boolean_T *rtd_FRM_Freeze_Left\
%assign comma = ", "
%<comma>real32_T rtd_FRM_currentGain_Left[30]\
%assign comma = ", "
%<comma>int32_T rtd_FRM_frameCount_Left[30]\
%assign comma = ", "
%<comma>real32_T rtd_FRM_rampCoeff_Left[30]\
%assign comma = ", "
%<comma>real32_T rtd_FRM_targetGain_Left[30]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(17, 0, fcnProtoType)>
%endfunction
