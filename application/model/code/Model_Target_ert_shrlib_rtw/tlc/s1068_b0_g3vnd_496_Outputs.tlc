%implements s1068_b0_g3vnd_496_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T quantum_ms;
real32_T x;
%closefile localVarDecl
%assign _modelSS = ""

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[530], "Output",2)
/* {S!d3731}MATLAB Function: '<S1964>/calculate_ramp_rate' */
/* {S!d3736}MATLAB Function: '<S1964>/calculate_ramp_rate' */
/*  Invoke the function trigger output */
/* MATLAB Function 'RTC/REQ': '<S1973>:1' */
/* '<S1973>:1:3' go(); */
%if SLibCG_SystemFcnArgAccessed("Model_Target_calculate_ramp_rate",530,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCG_DumpSSCode("/*@[14cc9fd*/",SLibCGIRGenReusableSysCall("Model_Target_calculate_ramp_rate", ["%<_modelSS>", "%<SLibCG_DumpSSCode("/*@[14cccd0*/",(SLibCG_BOCSC(46, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[14ccce2*/",(SLibCG_BOCSC(47, 1, "", -1, "", 0)),"/*@]*/")>", "%<SLibCG_DumpSSCode("/*@[14cccf4*/",(SLibCG_BOCSC(177, 1, "", -1, "", 0)),"/*@]*/")>", "&/*@>14ccd08*/Model_Target_B./*@>14ccd07*/sf_calculate_ramp_rate_eh"], 530, 2, 6, 2, 6, 957),"/*@]*/")>\
%assign ss = ::CompiledModel.System[530]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif

%endif
/* {S!d3733}MATLAB Function: '<S1965>/get_ramp_coeffs' */
/* {S!d3738}MATLAB Function: '<S1965>/get_ramp_coeffs' incorporates:
 *  DataStoreRead: '<S1965>/Data Store Read'
 *  S-Function (AudioStats_MEX): '<S1965>/Audio Stats'
 */
/*@>14cba06*/x/*@>10d61b2*/ = /*@>14cc5b5*/Model_Target_B./*@>14ccc5f*/sf_calculate_ramp_rate_eh./*@>14ccc5c*/ramptime;
/* MATLAB Function 'MuteRamper/get_ramp_coeffs': '<S1978>:1' */
/* '<S1978>:1:5' targetLinearGain = single(1.0); */
%<SLibCG_DumpSSCode("/*@[14cca36*/",SLibCG_SetCSCDW(187, 1, "", -1, "", 0, "/*@>14ccd1b*/1.0F"),"/*@]*/")>\
/* '<S1978>:1:7' if muteSwitch */
/*@>10d61ba*/if (%<SLibCG_DumpSSCode("/*@[14cca18*/",(SLibCG_SE(SLibCG_BOCSC(45, 1, "", -1, "", 0))),"/*@]*/")>/*@>10d61b6*/ != /*@>14cb9f8*/0U) {
    /* '<S1978>:1:8' targetLinearGain = single(max(0, silentGainLinear)); */
%<SLibCG_DumpSSCode("/*@[14cca52*/",SLibCG_SetCSCDW(187, 1, "", -1, "", 0, "/*@>14ccd2d*/4.7315126E-7F"),"/*@]*/")>\
}
/*  %<"\% Nudge the gain values a bit if they are sitting at zero."> */
/*  %<"\% If current gain is zero, replace with a value very close to zero. What we"> */
/*  %<"\% really want is a value which is on the edge of perception - not too small"> */
/*  %<"\% or large. If the value is too small, we\'ll waste some of our ramp time"> */
/*  %<"\% in perceived silence. If the value is too large, the audio will lurch"> */
/*  %<"\% into perceptability at the start of the ramp."> */
/*  %<"\% So, \'max(currentGainValue, silentGainLinear)\' & \'max(TargetGain, silentGainLinear)\' are"> */
/*  %<"\% used in equations"> */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain difference between target and current value. */
/*  Equivalent ramp rate is therefore calculated as follows: */
/* '<S1978>:1:24' if (rampingRate_dBPerSec) */
/*@>10d61c8*/if (/*@>14cc5c0*/Model_Target_B./*@>14ccc65*/sf_calculate_ramp_rate_eh./*@>14ccc62*/rampRate/*@>10d61b8*/ != /*@>14cb9fb*/0.0F) {
    /* '<S1978>:1:25' currentGain_db = 20*log10(max(currentGainValue, silentGainLinear)); */
    /* '<S1978>:1:26' targetGain_db = 20*log10( targetLinearGain); */
    /* '<S1978>:1:27' diff = abs(currentGain_db - targetGain_db); */
    /* '<S1978>:1:28' rampingTime_ms = diff / single(rampingRate_dBPerSec) * 1000; */
    /*@>14cba04*/x/*@>10d61ea*/ = /*@>14cc1f5*/qhmath_div_f(/*@>14cc1f3*/qhmath_abs_f(/*@>14cba25*/20.0F/*@>14cba84*/ * /*@>14cc1ef*/qhmath_log10_f(/*@>14cc1ed*/fmaxf(%<SLibCG_DumpSSCode("/*@[14cca88*/",(SLibCG_CSCDW(185, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14cba3e*/4.7315126E-7F))/*@>10d6211*/ - /*@>14cba26*/20.0F/*@>14cba88*/ * /*@>14cc1f1*/qhmath_log10_f(%<SLibCG_DumpSSCode("/*@[14cca6c*/",(SLibCG_CSCDW(187, 1, "", -1, "", 0)),"/*@]*/")>)), /*@>14cc5cb*/Model_Target_B./*@>14ccc6b*/sf_calculate_ramp_rate_eh./*@>14ccc68*/rampRate)/*@>14cba77*/ * /*@>14cba27*/1000.0F;
}
/* '<S1978>:1:31' quantum_ms = 1000 * frameSize / Fs_Hz; */
/*@>14cb9fc*/quantum_ms/*@>10d61ef*/ = /*@>14cc1f7*/qhmath_div_f(/*@>14cba3d*/32000.0F, %<SLibCG_DumpSSCode("/*@[14ccaaa*/",(SLibCG_Expr(864, 232, 0, 1, "", -1, "", 0)),"/*@]*/")>);
/* '<S1978>:1:32' numFrames = rampingTime_ms / quantum_ms; */
/*  Do a ceil rather than a round to insure that we create enough */
/*  frames. i.e. a fraction of a frame is promoted to an addition frame */
/* '<S1978>:1:35' nFrames = max (1, ceil(numFrames)); */
%<SLibCG_DumpSSCode("/*@[14ccb3e*/",SLibCG_SetCSCDW(186, 1, "", -1, "", 0, "/*@>14ccd40*/fmaxf(/*@>14ccd41*/1.0F, /*@>14ccd43*/qhmath_ceil_f(/*@>14ccd45*/qhmath_div_f(/*@>14ccd46*/x, /*@>14ccd47*/quantum_ms)))"),"/*@]*/")>\
/* '<S1978>:1:36' quantized_rampTime_ms = nFrames * quantum_ms; */
/*  In order to have the desired ramp time, the slope must vary dependent */
/*  on the gain differencebetween target and current value. */
/*  Ramper's coefficient is therefore calculated as follows: */
/*  */
/*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
/*  */
/*  therefore... */
/*  */
/*                      log(TargetGain/CurrentGain) */
/*    log(RampCoef) = ------------------------------ */
/*                         Fs*(RampTime_ms/1000) */
/*  */
/* '<S1978>:1:50' ramping_coeff= exp(log( targetLinearGain /max(currentGainValue, silentGainLinear) ) / (Fs_Hz * quantized_rampTime_ms / 1000)); */
/*@>14cc5d1*/Model_Target_B./*@>14ccc6e*/ramping_coeff_h/*@>10d61f3*/ = /*@>14cc207*/qhmath_div_f(/*@>14cc203*/qhmath_log_f(/*@>14cc201*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[14ccb20*/",(SLibCG_CSCDW(187, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14cc1ff*/fmaxf(%<SLibCG_DumpSSCode("/*@[14ccb04*/",(SLibCG_CSCDW(185, 1, "", -1, "", 0)),"/*@]*/")>, /*@>14cba3f*/4.7315126E-7F))), /*@>14cc205*/qhmath_div_f(%<SLibCG_DumpSSCode("/*@[14ccae8*/",(SLibCG_SE(SLibCG_CSCDW(186, 1, "", -1, "", 0))),"/*@]*/")>/*@>14cba61*/ * /*@>14cba1e*/quantum_ms/*@>14cba5d*/ * %<SLibCG_DumpSSCode("/*@[14ccacc*/",(SLibCG_SE(SLibCG_Expr(864, 232, 0, 1, "", -1, "", 0))),"/*@]*/")>, /*@>14cba29*/1000.0F));
/*@>14cc5d7*/Model_Target_B./*@>14ccc71*/ramping_coeff_h/*@>10d61f9*/ = /*@>14cc209*/qhmath_exp_f(/*@>14cc5dd*/Model_Target_B./*@>14ccc74*/ramping_coeff_h);
/* {E!d3738}End of MATLAB Function: '<S1965>/get_ramp_coeffs' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void HandleReqNearAnn2Ann2MuteSet(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(496, 0, fcnProtoType)>
%endfunction
