%implements s1068_b0_g3vnd_5_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T ramper;
real32_T quantum_ms;
real32_T targetGain;
%closefile localVarDecl
/*  Dimensions of target_gains_linear must match the number of rampers.  */
/*  */
/*  db_per_sec takes precidence: */
/*  If db_per_sec has a non-zero value then any ramp_times_ms values are */
/*  ignored and the db_per_sec is used to determine ramper timing. */
/*  */
/*  The dimension of ramp_times_ms is flexible and does not need to match the */
/*  ramper count. Its values are assigned to rampers in rotating order. If */
/*  there are 5 rampers and only two times provided, then rampers 1,3, and 5 */
/*  get the first ramp time and rampers 2 and 4 receive the second ramp time. */
/*  Any extra ramp times (beyond the number of rampers) are silently ignored. */
/* MATLAB Function 'Rgainy/ControlSubsystem/rgainy ramper control': '<S555>:1' */
/* '<S555>:1:20' rgain_SILENT_GAIN = RgainBusUtil.GetSilentGainLinear(); */
/*  Get the sizes of the provided target and time specifications */
/* '<S555>:1:23' numGains = numel(target_gains_linear); */
/* '<S555>:1:24' numTimes = numel(ramp_times_ms); */
/* '<S555>:1:25' numdbpersecs=numel(db_per_sec); */
/*  Step 1: FREEZE the gain ramper so that we can perform calculations based */
/*  on the current gain value. (This step is done outside on canvas now) */
/* '<S555>:1:30' for ramper=1:MaskNumRampers */
/*@>115ae1f*/targetGain/*@>10c7482*/ = /*@>115be78*/fmaxf(/*@>115ae50*/rtu_target_gains_linear, /*@>115ae2e*/5.0118723E-7F);
/*@>115ae1b*/quantum_ms/*@>10c7471*/ = /*@>115be7a*/qhmath_div_f(/*@>115ae42*/1000.0F/*@>115aea4*/ * /*@>115ae56*/rtu_frame_size, /*@>115ae58*/rtu_sample_rate_in_hertz);
%<SLibCG_DumpSSCode("/*@[115c5e1*/",SLibCG_SetCSCDW(9, 1, ".targetGain", -1, "", 0, "/*@>115c728*/rtu_target_gains_linear"),"/*@]*/")>\
/*@>10c7420*/for (/*@>115c6a3*/ramper = /*@>115c6a2*/0; /*@>115c6ad*/ramper < /*@>115c6ab*/1; /*@>115c6a9*/ramper/*@>115c6b1*/++) {
    real32_T currentGain;
    real32_T numFrames;
    /*  assign gains and ramp times */
    /* '<S555>:1:33' targetGain = single(target_gains_linear(mod(ramper-1,numGains)+1)); */
    /* '<S555>:1:34' ramp_ms    = single(ramp_times_ms      (mod(ramper-1,numTimes)+1)); */
    /*@>115ae28*/numFrames/*@>10c740e*/ = /*@>115ae4e*/rtu_ramp_times_ms;
    /* '<S555>:1:35' ramp_dbPerSec= single(db_per_sec      (mod(ramper-1,numdbpersecs)+1)); */
    /*  Step 2: Nudge the gain values a bit if they are sitting at zero. */
    /*  When this control set goes live, ensure that the current gain will move. */
    /*  If current gain is zero, replace with a value very close to zero. What we */
    /*  really want is a value which is on the edge of perception - not too small */
    /*  or large. If the value is too small, we'll waste some of our ramp time */
    /*  in perceived silence. If the value is too large, the audio will lurch */
    /*  into perceptability at the start of the ramp. */
    /* '<S555>:1:44' currentGain = max(Rampers(ramper).currentGain, rgain_SILENT_GAIN); */
    /*@>115ae1d*/currentGain/*@>10c747f*/ = /*@>115be7c*/fmaxf(%<SLibCG_DumpSSCode("/*@[115c619*/",(SLibCG_CSCDW(9, 1, ".currentGain", -1, "", 0)),"/*@]*/")>, /*@>115ae2d*/5.0118723E-7F);
    /* '<S555>:1:45' targetGain  = max(targetGain, rgain_SILENT_GAIN); */
    /*  Step 3a: If a slope in dB/second is provided, ignore the ramp time */
    /*  and instead calculate a new ramp time that matches the slope. */
    /* '<S555>:1:49' if (ramp_dbPerSec) */
    /*@>10c742c*/if (/*@>115ae52*/rtu_db_per_sec/*@>10c741a*/ != /*@>115ae0d*/0.0F) {
        /* '<S555>:1:50' currentGain_db = 20*log10(currentGain); */
        /* '<S555>:1:51' targetGain_db = 20*log10(targetGain); */
        /* '<S555>:1:52' diff = abs(currentGain_db - targetGain_db); */
        /* '<S555>:1:53' ramp_ms = diff / single(ramp_dbPerSec) * 1000; */
        /*@>115ae26*/numFrames/*@>10c746d*/ = /*@>115be84*/qhmath_div_f(/*@>115be82*/qhmath_abs_f(/*@>115ae3f*/20.0F/*@>115aeb5*/ * /*@>115be7e*/qhmath_log10_f(/*@>115ae37*/currentGain)/*@>10c749a*/ - /*@>115ae40*/20.0F/*@>115aeb9*/ * /*@>115be80*/qhmath_log10_f(/*@>115ae39*/targetGain)), /*@>115ae54*/rtu_db_per_sec)/*@>115aea8*/ * /*@>115ae41*/1000.0F;
    }
    /*  Step 3b: QUANTIZE the desired ramp time to our FrameSize. Also retrieve  */
    /*  the whole number of frames required to best match requested ramp time. */
    /*  Ensure that at least one frame is used. The frame size will therefore */
    /*  determine the steepest ramp (i.e. within one frame you can go anywhere). */
    /* '<S555>:1:60' quantum_ms = 1000 * frame_size / sample_rate_in_hertz; */
    /* '<S555>:1:61' numFrames = ramp_ms / quantum_ms; */
    /*  Do a ceil rather than a round to insure that we create enough */
    /*  frames. i.e. a fraction of a frame is promoted to an addition frame */
    /*  numFrames = max (1, round(numFrames)); */
    /* '<S555>:1:65' numFrames = max (1, ceil(numFrames)); */
    /*@>115ae21*/numFrames/*@>10c7485*/ = /*@>115be8a*/fmaxf(/*@>115ae43*/1.0F, /*@>115be88*/qhmath_ceil_f(/*@>115be86*/qhmath_div_f(/*@>115ae2f*/numFrames, /*@>115ae31*/quantum_ms)));
    /* '<S555>:1:66' quantized_rampTime_ms = numFrames * quantum_ms; */
    /*  In order to have the desired ramp time, the slope must vary dependent */
    /*  on the gain differencebetween target and current value. */
    /*  Ramper's coefficient is therefore calculated as follows: */
    /*  */
    /*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
    /*  */
    /*  therefore... */
    /*  */
    /*                      log(TargetGain/CurrentGain) */
    /*    log(RampCoef) = ------------------------------ */
    /*                         Fs*(RampTime_ms/1000) */
    /*  */
    /* '<S555>:1:80' factor = log( targetGain / currentGain ); */
    /* '<S555>:1:81' RampCoef = exp(factor / (sample_rate_in_hertz * quantized_rampTime_ms / 1000)); */
%<SLibCG_DumpSSCode("/*@[115c638*/",SLibCG_SetCSCDW(9, 1, ".rampCoeff", -1, "", 0, "/*@>115c73b*/qhmath_exp_f(/*@>115c73d*/qhmath_div_f(/*@>115c73f*/qhmath_log_f(/*@>115c741*/qhmath_div_f(/*@>115c742*/targetGain, /*@>115c743*/currentGain)), /*@>115c745*/qhmath_div_f(/*@>115c748*/numFrames/*@>115c747*/ * /*@>115c749*/quantum_ms/*@>115c746*/ * /*@>115c74a*/rtu_sample_rate_in_hertz, /*@>115c74b*/1000.0F)))"),"/*@]*/")>\
    /*  Output control signals */
    /* '<S555>:1:84' Rampers(ramper).frameCount  = int32(numFrames); */
%<SLibCG_DumpSSCode("/*@[115c5c4*/",SLibCG_SetCSCDW(9, 1, ".frameCount", -1, "", 0, "/*@>115c75d*/(int32_T)/*@>115c75e*/numFrames"),"/*@]*/")>\
    /* '<S555>:1:85' Rampers(ramper).rampCoeff   = single(RampCoef); */
    /* '<S555>:1:86' Rampers(ramper).targetGain  = target_gains_linear(ramper); */
    /* '<S555>:1:87' Rampers(ramper).currentGain = currentGain; */
%<SLibCG_DumpSSCode("/*@[115c5fe*/",SLibCG_SetCSCDW(9, 1, ".currentGain", -1, "", 0, "/*@>115c770*/currentGain"),"/*@]*/")>\
}
/*  Step 4: UNFREEZE the gain ramper (performed outside on canvas now) */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[5].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(5, 0, 0)>
%endif
%if SLibCG_ArgAccessed(5, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(5, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_rgainyrampercontrol(\
%assign comma = ""
%if SLibCG_ArgAccessed(5, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_rgainyrampercontrol", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>real32_T rtu_target_gains_linear\
%assign comma = ", "
%<comma>real32_T rtu_db_per_sec\
%assign comma = ", "
%<comma>real32_T rtu_ramp_times_ms\
%assign comma = ", "
%<comma>real32_T rtu_sample_rate_in_hertz\
%assign comma = ", "
%<comma>real32_T rtu_frame_size\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(5, 0, fcnProtoType)>
%endfunction
