%implements s1068_b0_g3vnd_89_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T ramper;
real32_T quantum_ms;
real32_T targetGain;
%closefile localVarDecl
/*  Dimensions of target_gains_linear must match the number of rampers.  */
/*  */
/*  db_per_sec takes precidence: */
/*  If db_per_sec has a non-zero value then any ramp_times_ms values are */
/*  ignored and the db_per_sec is used to determine ramper timing. */
/*  */
/*  The dimension of ramp_times_ms is flexible and does not need to match the */
/*  ramper count. Its values are assigned to rampers in rotating order. If */
/*  there are 5 rampers and only two times provided, then rampers 1,3, and 5 */
/*  get the first ramp time and rampers 2 and 4 receive the second ramp time. */
/*  Any extra ramp times (beyond the number of rampers) are silently ignored. */
/* MATLAB Function 'Rgainy/ControlSubsystem/rgainy ramper control': '<S2090>:1' */
/* '<S2090>:1:20' rgain_SILENT_GAIN = RgainBusUtil.GetSilentGainLinear(); */
/*  Get the sizes of the provided target and time specifications */
/* '<S2090>:1:23' numGains = numel(target_gains_linear); */
/* '<S2090>:1:24' numTimes = numel(ramp_times_ms); */
/* '<S2090>:1:25' numdbpersecs=numel(db_per_sec); */
/*  Step 1: FREEZE the gain ramper so that we can perform calculations based */
/*  on the current gain value. (This step is done outside on canvas now) */
/* '<S2090>:1:30' for ramper=1:MaskNumRampers */
/*@>1240768*/targetGain/*@>10cc958*/ = /*@>124172c*/fmaxf(/*@>1240799*/rtu_target_gains_linear, /*@>1240777*/5.0118723E-7F);
/*@>1240764*/quantum_ms/*@>10cc947*/ = /*@>124172e*/qhmath_div_f(/*@>124078b*/1000.0F/*@>12407ed*/ * /*@>124079f*/rtu_frame_size, /*@>12407a1*/rtu_sample_rate_in_hertz);
%<SLibCG_DumpSSCode("/*@[1241e80*/",SLibCG_SetCSCDW(2, 1, ".targetGain", -1, "", 0, "/*@>1241fc7*/rtu_target_gains_linear"),"/*@]*/")>\
/*@>10cc8f6*/for (/*@>1241f42*/ramper = /*@>1241f41*/0; /*@>1241f4c*/ramper < /*@>1241f4a*/1; /*@>1241f48*/ramper/*@>1241f50*/++) {
    real32_T currentGain;
    real32_T numFrames;
    /*  assign gains and ramp times */
    /* '<S2090>:1:33' targetGain = single(target_gains_linear(mod(ramper-1,numGains)+1)); */
    /* '<S2090>:1:34' ramp_ms    = single(ramp_times_ms      (mod(ramper-1,numTimes)+1)); */
    /*@>1240771*/numFrames/*@>10cc8e3*/ = /*@>10cc8ef*/(real32_T)/*@>1240797*/rtu_ramp_times_ms;
    /* '<S2090>:1:35' ramp_dbPerSec= single(db_per_sec      (mod(ramper-1,numdbpersecs)+1)); */
    /*  Step 2: Nudge the gain values a bit if they are sitting at zero. */
    /*  When this control set goes live, ensure that the current gain will move. */
    /*  If current gain is zero, replace with a value very close to zero. What we */
    /*  really want is a value which is on the edge of perception - not too small */
    /*  or large. If the value is too small, we'll waste some of our ramp time */
    /*  in perceived silence. If the value is too large, the audio will lurch */
    /*  into perceptability at the start of the ramp. */
    /* '<S2090>:1:44' currentGain = max(Rampers(ramper).currentGain, rgain_SILENT_GAIN); */
    /*@>1240766*/currentGain/*@>10cc955*/ = /*@>1241730*/fmaxf(%<SLibCG_DumpSSCode("/*@[1241eb8*/",(SLibCG_CSCDW(2, 1, ".currentGain", -1, "", 0)),"/*@]*/")>, /*@>1240776*/5.0118723E-7F);
    /* '<S2090>:1:45' targetGain  = max(targetGain, rgain_SILENT_GAIN); */
    /*  Step 3a: If a slope in dB/second is provided, ignore the ramp time */
    /*  and instead calculate a new ramp time that matches the slope. */
    /* '<S2090>:1:49' if (ramp_dbPerSec) */
    /*@>10cc902*/if (/*@>10cc96d*/(real32_T)/*@>124079b*/rtu_db_per_sec/*@>10cc8f0*/ != /*@>1240756*/0.0F) {
        /* '<S2090>:1:50' currentGain_db = 20*log10(currentGain); */
        /* '<S2090>:1:51' targetGain_db = 20*log10(targetGain); */
        /* '<S2090>:1:52' diff = abs(currentGain_db - targetGain_db); */
        /* '<S2090>:1:53' ramp_ms = diff / single(ramp_dbPerSec) * 1000; */
        /*@>124076f*/numFrames/*@>10cc943*/ = /*@>1241738*/qhmath_div_f(/*@>1241736*/qhmath_abs_f(/*@>1240788*/20.0F/*@>12407fe*/ * /*@>1241732*/qhmath_log10_f(/*@>1240780*/currentGain)/*@>10cc971*/ - /*@>1240789*/20.0F/*@>1240802*/ * /*@>1241734*/qhmath_log10_f(/*@>1240782*/targetGain)), /*@>10cc972*/(real32_T)/*@>124079d*/rtu_db_per_sec)/*@>12407f1*/ * /*@>124078a*/1000.0F;
    }
    /*  Step 3b: QUANTIZE the desired ramp time to our FrameSize. Also retrieve  */
    /*  the whole number of frames required to best match requested ramp time. */
    /*  Ensure that at least one frame is used. The frame size will therefore */
    /*  determine the steepest ramp (i.e. within one frame you can go anywhere). */
    /* '<S2090>:1:60' quantum_ms = 1000 * frame_size / sample_rate_in_hertz; */
    /* '<S2090>:1:61' numFrames = ramp_ms / quantum_ms; */
    /*  Do a ceil rather than a round to insure that we create enough */
    /*  frames. i.e. a fraction of a frame is promoted to an addition frame */
    /*  numFrames = max (1, round(numFrames)); */
    /* '<S2090>:1:65' numFrames = max (1, ceil(numFrames)); */
    /*@>124076a*/numFrames/*@>10cc95b*/ = /*@>124173e*/fmaxf(/*@>124078c*/1.0F, /*@>124173c*/qhmath_ceil_f(/*@>124173a*/qhmath_div_f(/*@>1240778*/numFrames, /*@>124077a*/quantum_ms)));
    /* '<S2090>:1:66' quantized_rampTime_ms = numFrames * quantum_ms; */
    /*  In order to have the desired ramp time, the slope must vary dependent */
    /*  on the gain differencebetween target and current value. */
    /*  Ramper's coefficient is therefore calculated as follows: */
    /*  */
    /*    TargetGain = CurrentGain *( RampCoef ^ (Fs*RampTime_ms/1000) ) */
    /*  */
    /*  therefore... */
    /*  */
    /*                      log(TargetGain/CurrentGain) */
    /*    log(RampCoef) = ------------------------------ */
    /*                         Fs*(RampTime_ms/1000) */
    /*  */
    /* '<S2090>:1:80' factor = log( targetGain / currentGain ); */
    /* '<S2090>:1:81' RampCoef = exp(factor / (sample_rate_in_hertz * quantized_rampTime_ms / 1000)); */
%<SLibCG_DumpSSCode("/*@[1241ed7*/",SLibCG_SetCSCDW(2, 1, ".rampCoeff", -1, "", 0, "/*@>1241fda*/qhmath_exp_f(/*@>1241fdc*/qhmath_div_f(/*@>1241fde*/qhmath_log_f(/*@>1241fe0*/qhmath_div_f(/*@>1241fe1*/targetGain, /*@>1241fe2*/currentGain)), /*@>1241fe4*/qhmath_div_f(/*@>1241fe7*/numFrames/*@>1241fe6*/ * /*@>1241fe8*/quantum_ms/*@>1241fe5*/ * /*@>1241fe9*/rtu_sample_rate_in_hertz, /*@>1241fea*/1000.0F)))"),"/*@]*/")>\
    /*  Output control signals */
    /* '<S2090>:1:84' Rampers(ramper).frameCount  = int32(numFrames); */
%<SLibCG_DumpSSCode("/*@[1241e63*/",SLibCG_SetCSCDW(2, 1, ".frameCount", -1, "", 0, "/*@>1241ffc*/(int32_T)/*@>1241ffd*/numFrames"),"/*@]*/")>\
    /* '<S2090>:1:85' Rampers(ramper).rampCoeff   = single(RampCoef); */
    /* '<S2090>:1:86' Rampers(ramper).targetGain  = target_gains_linear(ramper); */
    /* '<S2090>:1:87' Rampers(ramper).currentGain = currentGain; */
%<SLibCG_DumpSSCode("/*@[1241e9d*/",SLibCG_SetCSCDW(2, 1, ".currentGain", -1, "", 0, "/*@>124200f*/currentGain"),"/*@]*/")>\
}
/*  Step 4: UNFREEZE the gain ramper (performed outside on canvas now) */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[89].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(89, 0, 0)>
%endif
%if SLibCG_ArgAccessed(89, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(89, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_rgainyrampercontrol_o(\
%assign comma = ""
%if SLibCG_ArgAccessed(89, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_rgainyrampercontrol_o", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>real32_T rtu_target_gains_linear\
%assign comma = ", "
%<comma>real_T rtu_db_per_sec\
%assign comma = ", "
%<comma>real_T rtu_ramp_times_ms\
%assign comma = ", "
%<comma>real32_T rtu_sample_rate_in_hertz\
%assign comma = ", "
%<comma>real32_T rtu_frame_size\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(89, 0, fcnProtoType)>
%endfunction
