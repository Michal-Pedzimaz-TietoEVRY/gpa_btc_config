%implements s1068_b0_g3vnd_41_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
int32_T tmp;
%closefile localVarDecl
/*  #codegen */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/VLS Gains Computation/VLS Gains Pax/Gain Computation/Surround Level Control/Initialization and RMDL': '<S1174>:1' */
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* '<S1174>:1:10' gain = MedusaPremixGainComputation(minGain, detentGain, maxGain, interpolation_method, surr_level, configStruct); */
/*  #codegen */
/*  Extracting the surround level indices correponding to the anchor */
/*  points from the specified Config Struct */
/* 'MedusaPremixGainComputation:5' midIndex = ceil(length(ConfigStruct.granularity)/2); */
/* 'MedusaPremixGainComputation:7' min_level = ConfigStruct.granularity(1); */
/* 'MedusaPremixGainComputation:8' detent_level = ConfigStruct.granularity(midIndex); */
/* 'MedusaPremixGainComputation:9' max_level = ConfigStruct.granularity(end); */
/*  Performing bound check on Surround Level value */
/* 'MedusaPremixGainComputation:12' surroundLevel = min(surroundLevel, max_level); */
/*@>11ce508*/if (/*@>11cdb72*/rtu_surr_level/*@>10beb73*/ > /*@>11cdb6c*/255U) {
    /*@>11ce50c*/i/*@>11ce50b*/ = /*@>11cfcc2*/255;
} else {
    /*@>11cdc0a*/i/*@>11cd958*/ = /*@>11cdf61*/(int32_T)/*@>11cdb74*/rtu_surr_level;
}
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* 'MedusaPremixGainComputation:16' switch surroundLevel */
/*@>11ce516*/if (/*@>11ce1d3*/(uint32_T)/*@>11ce1d5*/i/*@>11ce1d2*/ == /*@>11ce1d6*/0U) {
    /*@>11ce51a*/tmp/*@>11ce519*/ = /*@>11cfcc5*/0;
} else /*@>11ce51b*/if (/*@>11ce1da*/(uint32_T)/*@>11ce1dc*/i/*@>11ce1d9*/ == /*@>11ce1dd*/128U) {
    /*@>11ce51f*/tmp/*@>11ce51e*/ = /*@>11cfcc8*/1;
} else /*@>11ce520*/if (/*@>11ce1e1*/(uint32_T)/*@>11ce1e3*/i/*@>11ce1e0*/ == /*@>11ce1e4*/255U) {
    /*@>11ce524*/tmp/*@>11ce523*/ = /*@>11cfcce*/2;
} else {
    /*@>11ce50f*/tmp/*@>11ce511*/ = /*@>11cfccb*/-1;
}
/*@>10beab0*/switch (/*@>11ce513*/tmp) {
  case /*@>11cdb58*/0:
    /* 'MedusaPremixGainComputation:17' case min_level */
    /* 'MedusaPremixGainComputation:18' targetGain = minGain; */
/*@>11cc5db*/    for (/*@>11cfd11*/i = /*@>11cfd10*/0; /*@>11cfd1b*/i < /*@>11cfd19*/12; /*@>11cfd17*/i/*@>11cfd44*/++) {
        /*@>11cdbb0*/rtd_VLSPax_currentGain/*@>11cc9a2*/[/*@>11cdbb2*/i]/*@>11cc5cb*/ = /*@>11cf716*/rtu_minGain/*@>11cf718*/[/*@>11cf714*/i];
    }
    /*  when surround index corresponds to 'min' anchor point */
    break;
  case /*@>11cdb59*/1:
    /* 'MedusaPremixGainComputation:19' case detent_level */
    /* 'MedusaPremixGainComputation:20' targetGain = detentGain; */
/*@>11cc5bd*/    for (/*@>11cfd00*/i = /*@>11cfcff*/0; /*@>11cfd0a*/i < /*@>11cfd08*/12; /*@>11cfd06*/i/*@>11cfd43*/++) {
        /*@>11cdbb8*/rtd_VLSPax_currentGain/*@>11cc9dc*/[/*@>11cdbba*/i]/*@>11cc5ad*/ = /*@>11cf71d*/rtu_detentGain/*@>11cf71f*/[/*@>11cf71b*/i];
    }
    /*  when surround index corresponds to 'detent' anchor point */
    break;
  case /*@>11cdb5a*/2:
    /* 'MedusaPremixGainComputation:21' case max_level */
    /* 'MedusaPremixGainComputation:22' targetGain = maxGain; */
/*@>11cc59f*/    for (/*@>11cfcef*/i = /*@>11cfcee*/0; /*@>11cfcf9*/i < /*@>11cfcf7*/12; /*@>11cfcf5*/i/*@>11cfd41*/++) {
        /*@>11cdbc0*/rtd_VLSPax_currentGain/*@>11cca16*/[/*@>11cdbc2*/i]/*@>11cc58f*/ = /*@>11cf724*/rtu_maxGain/*@>11cf726*/[/*@>11cf722*/i];
    }
    /*  when surround index corresponds to 'max' anchor point */
    break;
  default: {
    real32_T position;
    /* 'MedusaPremixGainComputation:23' otherwise */
    /* 'MedusaPremixGainComputation:24' position = (single(surroundLevel) - min_level)/(max_level - min_level); */
    /*@>11cdb5d*/position/*@>10beb14*/ = /*@>11cf276*/qhmath_div_f(/*@>11cdf70*/(real32_T)/*@>11cdb6a*/i, /*@>11cdb5c*/255.0F);
    /*  when surround index lies in between the anchor points */
    /* 'MedusaPremixGainComputation:25' if (interpolationMethod(1) == 0) */
    /*@>10beab8*/if (/*@>11cdb76*/rtu_interpolation_method/*@>10beaae*/ == /*@>11cdb5b*/0.0F) {
        /* 'MedusaPremixGainComputation:26' targetGain = (maxGain - minGain)*position + minGain; */
/*@>11cc60c*/        for (/*@>11cfd33*/i = /*@>11cfd32*/0; /*@>11cfd3d*/i < /*@>11cfd3b*/12; /*@>11cfd39*/i/*@>11cfd45*/++) {
            /*@>11cdbd0*/rtd_VLSPax_currentGain/*@>11cca97*/[/*@>11cdbd2*/i]/*@>11cc5e9*/ = (/*@>11cf72b*/rtu_maxGain/*@>11cf72d*/[/*@>11cf729*/i]/*@>11cc5f3*/ - /*@>11cf732*/rtu_minGain/*@>11cf734*/[/*@>11cf730*/i])/*@>11cdc40*/ * /*@>11cdba0*/position/*@>11cc5f1*/ + /*@>11cf739*/rtu_minGain/*@>11cf73b*/[/*@>11cf737*/i];
        }
        /*  Linear Interpolation */
    } else {
        /* 'MedusaPremixGainComputation:27' else */
        /* 'MedusaPremixGainComputation:28' minGain_dB = 20*log10(max(minGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:29' maxGain_dB = 20*log10(max(maxGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:30' targetGain_dB = (maxGain_dB - minGain_dB)*position + minGain_dB; */
        /* 'MedusaPremixGainComputation:31' targetGain = 10.^(targetGain_dB/20); */
/*@>10beb28*/        for (/*@>11cfd22*/i = /*@>11cfd21*/0; /*@>11cfd2c*/i < /*@>11cfd2a*/12; /*@>11cfd28*/i/*@>11cfd46*/++) {
            real32_T minGain_dB;
            minGain_dB/*@>11ccb3d*/ = /*@>11cdba7*/20.0F/*@>11cdc33*/ * /*@>11cf27a*/qhmath_log10_f(/*@>11cf278*/fmaxf(/*@>11cf740*/rtu_minGain/*@>11cf742*/[/*@>11cf73e*/i], /*@>11ce2b4*/1.1920929E-7F));
            /*@>11cdbec*/rtd_VLSPax_currentGain/*@>11cccd0*/[/*@>11cdbee*/i]/*@>10beb5b*/ = /*@>11cf282*/qhmath_pow_f(/*@>11cdb69*/10.0F, /*@>11cf280*/qhmath_div_f((/*@>11ce211*/20.0F/*@>11ce210*/ * /*@>11cf27e*/qhmath_log10_f(/*@>11cf27c*/fmaxf(/*@>11cf747*/rtu_maxGain/*@>11cf749*/[/*@>11cf745*/i], /*@>11ce2c0*/1.1920929E-7F))/*@>11ce20f*/ - minGain_dB)/*@>11ce20e*/ * /*@>11ce217*/position/*@>11ce20d*/ + minGain_dB, /*@>11ce21a*/20.0F));
        }
        /*  dB-Linear Interpolation */
    }
}
    break;
}
/*  Ramping doesn't take place during RMDL and cold start. Hence, gains */
/*  are directly pushed to mixing matrix */
/* '<S1174>:1:14' VLSPax_currentGain = gain; */
/* '<S1174>:1:15' VLSPax_targetGain = gain; */
/* '<S1174>:1:16' VLSPax_SLCGain = gain; */
/*  Resetting the frame count to zero to avoid unintentional ramping */
/* '<S1174>:1:19' VLSPax_frameCount = zeros(size(VLSPax_currentGain), 'int32'); */
/*@>11cc54b*/for (/*@>11cfcde*/i = /*@>11cfcdd*/0; /*@>11cfce8*/i < /*@>11cfce6*/12; /*@>11cfce4*/i/*@>11cfd42*/++) {
    /*@>11cdbdc*/rtd_VLSPax_targetGain/*@>11ccb0e*/[/*@>11cdbde*/i]/*@>11cc53b*/ = /*@>11cf74e*/rtd_VLSPax_currentGain/*@>11cf750*/[/*@>11cf74c*/i];
    /*@>11cdbe4*/rtd_VLSPax_SLCGain/*@>11ccbb8*/[/*@>11cdbe6*/i]/*@>11cc559*/ = /*@>11cf755*/rtd_VLSPax_currentGain/*@>11cf757*/[/*@>11cf753*/i];
    /*@>11cdb8c*/rtd_VLSPax_frameCount/*@>11cc578*/[/*@>11cdb8e*/i]/*@>11cc577*/ = /*@>11cfcd1*/0;
}
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[41].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(41, 0, 0)>
%endif
%if SLibCG_ArgAccessed(41, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(41, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_InitializationandRMDL_b(\
%assign comma = ""
%if SLibCG_ArgAccessed(41, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_InitializationandRMDL_b", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const real32_T rtu_minGain[12]\
%assign comma = ", "
%<comma>const real32_T rtu_detentGain[12]\
%assign comma = ", "
%<comma>const real32_T rtu_maxGain[12]\
%assign comma = ", "
%<comma>real32_T rtu_interpolation_method\
%assign comma = ", "
%<comma>uint32_T rtu_surr_level\
%assign comma = ", "
%<comma>real32_T rtd_VLSPax_SLCGain[12]\
%assign comma = ", "
%<comma>real32_T rtd_VLSPax_currentGain[12]\
%assign comma = ", "
%<comma>int32_T rtd_VLSPax_frameCount[12]\
%assign comma = ", "
%<comma>real32_T rtd_VLSPax_targetGain[12]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(41, 0, fcnProtoType)>
%endfunction
