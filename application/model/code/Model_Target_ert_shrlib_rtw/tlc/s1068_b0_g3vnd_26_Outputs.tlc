%implements s1068_b0_g3vnd_26_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
int32_T tmp;
%closefile localVarDecl
/*  #codegen */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/Full Mixing Matrix_Left/Surround Level Control/Target Gain Computation': '<S1082>:1' */
/*  If CAE is supported and enabled, replace the tail weights with their CAE counterparts */
/* '<S1082>:1:6' if(MedusaPremixConfig.includeCAE == 1 && CAE_Enable == 1) */
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* '<S1082>:1:20' targetGain = MedusaPremixGainComputation(minGain_Left, detentGain_Left, maxGain_Left, interpolation_method, surr_level, MedusaPremixConfig); */
/*  #codegen */
/*  Extracting the surround level indices correponding to the anchor */
/*  points from the specified Config Struct */
/* 'MedusaPremixGainComputation:5' midIndex = ceil(length(ConfigStruct.granularity)/2); */
/* 'MedusaPremixGainComputation:7' min_level = ConfigStruct.granularity(1); */
/* 'MedusaPremixGainComputation:8' detent_level = ConfigStruct.granularity(midIndex); */
/* 'MedusaPremixGainComputation:9' max_level = ConfigStruct.granularity(end); */
/*  Performing bound check on Surround Level value */
/* 'MedusaPremixGainComputation:12' surroundLevel = min(surroundLevel, max_level); */
/*@>118e5ba*/if (/*@>118dce8*/rtu_surr_level/*@>10bd569*/ > /*@>118dce2*/255U) {
    /*@>118e5be*/i/*@>118e5bd*/ = /*@>118fa0f*/255;
} else {
    /*@>118dd64*/i/*@>118db13*/ = /*@>118e09a*/(int32_T)/*@>118dcea*/rtu_surr_level;
}
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* 'MedusaPremixGainComputation:16' switch surroundLevel */
/*@>118e5c8*/if (/*@>118e2c1*/(uint32_T)/*@>118e2c3*/i/*@>118e2c0*/ == /*@>118e2c4*/0U) {
    /*@>118e5cc*/tmp/*@>118e5cb*/ = /*@>118fa12*/0;
} else /*@>118e5cd*/if (/*@>118e2c8*/(uint32_T)/*@>118e2ca*/i/*@>118e2c7*/ == /*@>118e2cb*/128U) {
    /*@>118e5d1*/tmp/*@>118e5d0*/ = /*@>118fa15*/1;
} else /*@>118e5d2*/if (/*@>118e2cf*/(uint32_T)/*@>118e2d1*/i/*@>118e2ce*/ == /*@>118e2d2*/255U) {
    /*@>118e5d6*/tmp/*@>118e5d5*/ = /*@>118fa1b*/2;
} else {
    /*@>118e5c1*/tmp/*@>118e5c3*/ = /*@>118fa18*/-1;
}
/*@>10bd494*/switch (/*@>118e5c5*/tmp) {
  case /*@>118dcce*/0:
    /* 'MedusaPremixGainComputation:17' case min_level */
    /* 'MedusaPremixGainComputation:18' targetGain = minGain; */
    /*@>118f30c*/memcpy(&/*@>118ef43*/rtd_Premix_SLCGain_Left/*@>118ef44*/[/*@>118eefa*/0], &/*@>118ef4d*/rtu_minGain_Left/*@>118ef4e*/[/*@>118ef07*/0], /*@>118ef41*/77U/*@>118ef51*/ * /*@>118ef50*/sizeof(real32_T));
    /*  when surround index corresponds to 'min' anchor point */
    break;
  case /*@>118dccf*/1:
    /* 'MedusaPremixGainComputation:19' case detent_level */
    /* 'MedusaPremixGainComputation:20' targetGain = detentGain; */
    /*@>118f30e*/memcpy(&/*@>118ef64*/rtd_Premix_SLCGain_Left/*@>118ef65*/[/*@>118ef16*/0], &/*@>118ef6e*/rtu_detentGain_Left/*@>118ef6f*/[/*@>118ef23*/0], /*@>118ef62*/77U/*@>118ef72*/ * /*@>118ef71*/sizeof(real32_T));
    /*  when surround index corresponds to 'detent' anchor point */
    break;
  case /*@>118dcd0*/2:
    /* 'MedusaPremixGainComputation:21' case max_level */
    /* 'MedusaPremixGainComputation:22' targetGain = maxGain; */
    /*@>118f310*/memcpy(&/*@>118ef85*/rtd_Premix_SLCGain_Left/*@>118ef86*/[/*@>118ef32*/0], &/*@>118ef8f*/rtu_maxGain_Left/*@>118ef90*/[/*@>118ef3f*/0], /*@>118ef83*/77U/*@>118ef93*/ * /*@>118ef92*/sizeof(real32_T));
    /*  when surround index corresponds to 'max' anchor point */
    break;
  default: {
    real32_T position;
    /* 'MedusaPremixGainComputation:23' otherwise */
    /* 'MedusaPremixGainComputation:24' position = (single(surroundLevel) - min_level)/(max_level - min_level); */
    /*@>118dcd3*/position/*@>10bd4f8*/ = /*@>118f1da*/qhmath_div_f(/*@>118e0a9*/(real32_T)/*@>118dce0*/i, /*@>118dcd2*/255.0F);
    /*  when surround index lies in between the anchor points */
    /* 'MedusaPremixGainComputation:25' if (interpolationMethod(1) == 0) */
    /*@>10bd49c*/if (/*@>118dcec*/rtu_interpolation_method/*@>10bd492*/ == /*@>118dcd1*/0.0F) {
        /* 'MedusaPremixGainComputation:26' targetGain = (maxGain - minGain)*position + minGain; */
/*@>118c678*/        for (/*@>118fa39*/i = /*@>118fa38*/0; /*@>118fa43*/i < /*@>118fa41*/77; /*@>118fa3f*/i/*@>118fa47*/++) {
            /*@>118dd3a*/rtd_Premix_SLCGain_Left/*@>118cc1c*/[/*@>118dd3c*/i]/*@>118c655*/ = (/*@>118f5ab*/rtu_maxGain_Left/*@>118f5ad*/[/*@>118f5a9*/i]/*@>118c65f*/ - /*@>118f5b2*/rtu_minGain_Left/*@>118f5b4*/[/*@>118f5b0*/i])/*@>118dd98*/ * /*@>118dd0a*/position/*@>118c65d*/ + /*@>118f5b9*/rtu_minGain_Left/*@>118f5bb*/[/*@>118f5b7*/i];
        }
        /*  Linear Interpolation */
    } else {
        /* 'MedusaPremixGainComputation:27' else */
        /* 'MedusaPremixGainComputation:28' minGain_dB = 20*log10(max(minGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:29' maxGain_dB = 20*log10(max(maxGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:30' targetGain_dB = (maxGain_dB - minGain_dB)*position + minGain_dB; */
        /* 'MedusaPremixGainComputation:31' targetGain = 10.^(targetGain_dB/20); */
/*@>10bd50c*/        for (/*@>118fa28*/i = /*@>118fa27*/0; /*@>118fa32*/i < /*@>118fa30*/77; /*@>118fa2e*/i/*@>118fa48*/++) {
            real32_T minGain_dB;
            minGain_dB/*@>118cc9f*/ = /*@>118dd11*/20.0F/*@>118dd8b*/ * /*@>118f1de*/qhmath_log10_f(/*@>118f1dc*/fmaxf(/*@>118f5c0*/rtu_minGain_Left/*@>118f5c2*/[/*@>118f5be*/i], /*@>118e399*/1.1920929E-7F));
            /*@>118dd46*/rtd_Premix_SLCGain_Left/*@>118ce3d*/[/*@>118dd48*/i]/*@>10bd53f*/ = /*@>118f1e6*/qhmath_pow_f(/*@>118dcdf*/10.0F, /*@>118f1e4*/qhmath_div_f((/*@>118e2ff*/20.0F/*@>118e2fe*/ * /*@>118f1e2*/qhmath_log10_f(/*@>118f1e0*/fmaxf(/*@>118f5c7*/rtu_maxGain_Left/*@>118f5c9*/[/*@>118f5c5*/i], /*@>118e3a5*/1.1920929E-7F))/*@>118e2fd*/ - minGain_dB)/*@>118e2fc*/ * /*@>118e305*/position/*@>118e2fb*/ + minGain_dB, /*@>118e308*/20.0F));
        }
        /*  dB-Linear Interpolation */
    }
}
    break;
}
/* '<S1082>:1:22' Premix_SLCGain_Left = targetGain; */
/*      gain_out = targetGain; */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[26].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(26, 0, 0)>
%endif
%if SLibCG_ArgAccessed(26, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(26, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_TargetGainComputation(\
%assign comma = ""
%if SLibCG_ArgAccessed(26, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_TargetGainComputation", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const real32_T rtu_minGain_Left[77]\
%assign comma = ", "
%<comma>const real32_T rtu_detentGain_Left[77]\
%assign comma = ", "
%<comma>const real32_T rtu_maxGain_Left[77]\
%assign comma = ", "
%<comma>real32_T rtu_interpolation_method\
%assign comma = ", "
%<comma>uint32_T rtu_surr_level\
%assign comma = ", "
%<comma>real32_T rtd_Premix_SLCGain_Left[77]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(26, 0, fcnProtoType)>
%endfunction
