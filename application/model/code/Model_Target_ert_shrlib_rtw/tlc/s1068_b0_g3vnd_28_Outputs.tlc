%implements s1068_b0_g3vnd_28_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
int32_T tmp;
%closefile localVarDecl
/*  #codegen */
/* MATLAB Function 'ModelPreAmp/DecRate/Medusa5H1/MedusaHoligram/Medusa5H1 Part 3/On/Premix/Premix with Mono-Surround & CAE with Fade Ramper/Full Mixing Matrix_Right/Surround Level Control/Target Gain Computation': '<S1094>:1' */
/*  If CAE is supported and enabled, replace the tail weights with their CAE counterparts */
/* '<S1094>:1:6' if(MedusaPremixConfig.includeCAE == 1 && CAE_Enable == 1) */
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* '<S1094>:1:20' targetGain = MedusaPremixGainComputation(minGain_Right, detentGain_Right, maxGain_Right, interpolation_method, surr_level, MedusaPremixConfig); */
/*  #codegen */
/*  Extracting the surround level indices correponding to the anchor */
/*  points from the specified Config Struct */
/* 'MedusaPremixGainComputation:5' midIndex = ceil(length(ConfigStruct.granularity)/2); */
/* 'MedusaPremixGainComputation:7' min_level = ConfigStruct.granularity(1); */
/* 'MedusaPremixGainComputation:8' detent_level = ConfigStruct.granularity(midIndex); */
/* 'MedusaPremixGainComputation:9' max_level = ConfigStruct.granularity(end); */
/*  Performing bound check on Surround Level value */
/* 'MedusaPremixGainComputation:12' surroundLevel = min(surroundLevel, max_level); */
/*@>11968d2*/if (/*@>1196000*/rtu_surr_level/*@>10bd849*/ > /*@>1195ffa*/255U) {
    /*@>11968d6*/i/*@>11968d5*/ = /*@>1197d27*/255;
} else {
    /*@>119607c*/i/*@>1195e2b*/ = /*@>11963b2*/(int32_T)/*@>1196002*/rtu_surr_level;
}
/*  Computing the 'surround' part of mixing gains depending on the surround */
/*  level index; The other part of mixing gain comes from 'fade downmix' */
/* 'MedusaPremixGainComputation:16' switch surroundLevel */
/*@>11968e0*/if (/*@>11965d9*/(uint32_T)/*@>11965db*/i/*@>11965d8*/ == /*@>11965dc*/0U) {
    /*@>11968e4*/tmp/*@>11968e3*/ = /*@>1197d2a*/0;
} else /*@>11968e5*/if (/*@>11965e0*/(uint32_T)/*@>11965e2*/i/*@>11965df*/ == /*@>11965e3*/128U) {
    /*@>11968e9*/tmp/*@>11968e8*/ = /*@>1197d2d*/1;
} else /*@>11968ea*/if (/*@>11965e7*/(uint32_T)/*@>11965e9*/i/*@>11965e6*/ == /*@>11965ea*/255U) {
    /*@>11968ee*/tmp/*@>11968ed*/ = /*@>1197d33*/2;
} else {
    /*@>11968d9*/tmp/*@>11968db*/ = /*@>1197d30*/-1;
}
/*@>10bd774*/switch (/*@>11968dd*/tmp) {
  case /*@>1195fe6*/0:
    /* 'MedusaPremixGainComputation:17' case min_level */
    /* 'MedusaPremixGainComputation:18' targetGain = minGain; */
    /*@>1197624*/memcpy(&/*@>119725b*/rtd_Premix_SLCGain_Right/*@>119725c*/[/*@>1197212*/0], &/*@>1197265*/rtu_minGain_Right/*@>1197266*/[/*@>119721f*/0], /*@>1197259*/77U/*@>1197269*/ * /*@>1197268*/sizeof(real32_T));
    /*  when surround index corresponds to 'min' anchor point */
    break;
  case /*@>1195fe7*/1:
    /* 'MedusaPremixGainComputation:19' case detent_level */
    /* 'MedusaPremixGainComputation:20' targetGain = detentGain; */
    /*@>1197626*/memcpy(&/*@>119727c*/rtd_Premix_SLCGain_Right/*@>119727d*/[/*@>119722e*/0], &/*@>1197286*/rtu_detentGain_Right/*@>1197287*/[/*@>119723b*/0], /*@>119727a*/77U/*@>119728a*/ * /*@>1197289*/sizeof(real32_T));
    /*  when surround index corresponds to 'detent' anchor point */
    break;
  case /*@>1195fe8*/2:
    /* 'MedusaPremixGainComputation:21' case max_level */
    /* 'MedusaPremixGainComputation:22' targetGain = maxGain; */
    /*@>1197628*/memcpy(&/*@>119729d*/rtd_Premix_SLCGain_Right/*@>119729e*/[/*@>119724a*/0], &/*@>11972a7*/rtu_maxGain_Right/*@>11972a8*/[/*@>1197257*/0], /*@>119729b*/77U/*@>11972ab*/ * /*@>11972aa*/sizeof(real32_T));
    /*  when surround index corresponds to 'max' anchor point */
    break;
  default: {
    real32_T position;
    /* 'MedusaPremixGainComputation:23' otherwise */
    /* 'MedusaPremixGainComputation:24' position = (single(surroundLevel) - min_level)/(max_level - min_level); */
    /*@>1195feb*/position/*@>10bd7d8*/ = /*@>11974f2*/qhmath_div_f(/*@>11963c1*/(real32_T)/*@>1195ff8*/i, /*@>1195fea*/255.0F);
    /*  when surround index lies in between the anchor points */
    /* 'MedusaPremixGainComputation:25' if (interpolationMethod(1) == 0) */
    /*@>10bd77c*/if (/*@>1196004*/rtu_interpolation_method/*@>10bd772*/ == /*@>1195fe9*/0.0F) {
        /* 'MedusaPremixGainComputation:26' targetGain = (maxGain - minGain)*position + minGain; */
/*@>1194990*/        for (/*@>1197d51*/i = /*@>1197d50*/0; /*@>1197d5b*/i < /*@>1197d59*/77; /*@>1197d57*/i/*@>1197d5f*/++) {
            /*@>1196052*/rtd_Premix_SLCGain_Right/*@>1194f34*/[/*@>1196054*/i]/*@>119496d*/ = (/*@>11978c3*/rtu_maxGain_Right/*@>11978c5*/[/*@>11978c1*/i]/*@>1194977*/ - /*@>11978ca*/rtu_minGain_Right/*@>11978cc*/[/*@>11978c8*/i])/*@>11960b0*/ * /*@>1196022*/position/*@>1194975*/ + /*@>11978d1*/rtu_minGain_Right/*@>11978d3*/[/*@>11978cf*/i];
        }
        /*  Linear Interpolation */
    } else {
        /* 'MedusaPremixGainComputation:27' else */
        /* 'MedusaPremixGainComputation:28' minGain_dB = 20*log10(max(minGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:29' maxGain_dB = 20*log10(max(maxGain, eps('single'))); */
        /* 'MedusaPremixGainComputation:30' targetGain_dB = (maxGain_dB - minGain_dB)*position + minGain_dB; */
        /* 'MedusaPremixGainComputation:31' targetGain = 10.^(targetGain_dB/20); */
/*@>10bd7ec*/        for (/*@>1197d40*/i = /*@>1197d3f*/0; /*@>1197d4a*/i < /*@>1197d48*/77; /*@>1197d46*/i/*@>1197d60*/++) {
            real32_T minGain_dB;
            minGain_dB/*@>1194fb7*/ = /*@>1196029*/20.0F/*@>11960a3*/ * /*@>11974f6*/qhmath_log10_f(/*@>11974f4*/fmaxf(/*@>11978d8*/rtu_minGain_Right/*@>11978da*/[/*@>11978d6*/i], /*@>11966b1*/1.1920929E-7F));
            /*@>119605e*/rtd_Premix_SLCGain_Right/*@>1195155*/[/*@>1196060*/i]/*@>10bd81f*/ = /*@>11974fe*/qhmath_pow_f(/*@>1195ff7*/10.0F, /*@>11974fc*/qhmath_div_f((/*@>1196617*/20.0F/*@>1196616*/ * /*@>11974fa*/qhmath_log10_f(/*@>11974f8*/fmaxf(/*@>11978df*/rtu_maxGain_Right/*@>11978e1*/[/*@>11978dd*/i], /*@>11966bd*/1.1920929E-7F))/*@>1196615*/ - minGain_dB)/*@>1196614*/ * /*@>119661d*/position/*@>1196613*/ + minGain_dB, /*@>1196620*/20.0F));
        }
        /*  dB-Linear Interpolation */
    }
}
    break;
}
/* '<S1094>:1:22' Premix_SLCGain_Right = targetGain; */
/*      gain_out = targetGain; */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[28].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(28, 0, 0)>
%endif
%if SLibCG_ArgAccessed(28, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(28, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_TargetGainComputation_e(\
%assign comma = ""
%if SLibCG_ArgAccessed(28, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_TargetGainComputation_e", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>const real32_T rtu_minGain_Right[77]\
%assign comma = ", "
%<comma>const real32_T rtu_detentGain_Right[77]\
%assign comma = ", "
%<comma>const real32_T rtu_maxGain_Right[77]\
%assign comma = ", "
%<comma>real32_T rtu_interpolation_method\
%assign comma = ", "
%<comma>uint32_T rtu_surr_level\
%assign comma = ", "
%<comma>real32_T rtd_Premix_SLCGain_Right[77]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(28, 0, fcnProtoType)>
%endfunction
