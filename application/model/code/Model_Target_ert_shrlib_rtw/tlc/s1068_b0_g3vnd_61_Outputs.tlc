%implements s1068_b0_g3vnd_61_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
/*  The midrange curve is configured as a piecewise linear plot, with */
/*  configurable values of the maximum boost ('maxB') and maximum cut ('maxC') */
/*  in dB.  */
/*     dB ^ */
/*        | */
/*  maxB  ----------/ */
/*        |        / */
/*        |       / */
/*   0    ------|---|----> index */
/*        |   /128  255 */
/*        |  / */
/*  maxC  --/ */
/*        | */
/*  Hence, for any given index, the gain is calculated as a value in  */
/*  between 0 and 1 for boost and 0 and -1 for cut. This will later be */
/*  multiplied with the maxB or maxC to get the actual gain value.  */
/*  (y - y1) / (x - x1) = (y1 - y2) / (x1 - x2) */
/*  (y - 0) / (x - 128) = (0 - 1) / (128 - 255) */
/*                    y = (x - 128)/127 */
/*  'offset' represents the center point between boost and cut (i.e. 128) and */
/*  'scale' represents how many intervals are available for boost/cut (i.e. 127) */
/* MATLAB Function 'ModelPreAmp/PreAmpPart1/Bass/index to linear': '<S1535>:1' */
/*  Apply the tuning calibration */
/* '<S1535>:1:27' floatIndex = single(index); */
/* '<S1535>:1:28' linearGain = single((floatIndex - offset) / scale); */
/*@>11ff1cc*/localB->/*@>11ff406*/linearGain/*@>10c42e7*/ = /*@>11ff0de*/qhmath_div_f(/*@>10c430e*/(real32_T)/*@>11fed5a*/rtu_index/*@>10c430b*/ - /*@>11fed5c*/rtu_offset, /*@>11fed5e*/rtu_scale);
/*  Ensure the result is between -1 and 1 */
/* '<S1535>:1:31' linearGain = min(linearGain, 1); */
/*@>11ff1d3*/localB->/*@>11ff409*/linearGain/*@>10c42ff*/ = /*@>11ff0e0*/fminf(/*@>11ff1da*/localB->/*@>11ff40c*/linearGain, /*@>11fed56*/1.0F);
/* '<S1535>:1:32' linearGain = max(linearGain, -1); */
/*@>11ff1e1*/localB->/*@>11ff40f*/linearGain/*@>10c4302*/ = /*@>11ff0e2*/fmaxf(/*@>11ff1e8*/localB->/*@>11ff412*/linearGain, /*@>11fed57*/-1.0F);
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[61].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(61, 0, 0)>
%endif
%if SLibCG_ArgAccessed(61, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(61, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Model_Target_indextolinear(\
%assign comma = ""
%if SLibCG_ArgAccessed(61, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Model_Target_indextolinear", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>real32_T rtu_scale\
%assign comma = ", "
%<comma>real32_T rtu_offset\
%assign comma = ", "
%<comma>uint32_T rtu_index\
%assign comma = ", "
%<comma>B_indextolinear_Model_Target_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(61, 0, fcnProtoType)>
%endfunction
